<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GitLab CI/CD 实现自动构建部署项目</title>
      <link href="/post/gitlab-cicd/"/>
      <url>/post/gitlab-cicd/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h1><p>首先需要有一台 GitLab 服务器，然后需要有个项目；这里示例项目以 Spring Boot 项目为例，然后最好有一台专门用来 Build 的机器，实际生产中如果 Build 任务不频繁可适当用一些业务机器进行 Build。</p><ul><li>GitLab IP :10.88.9.21  (version 12.6.0)</li><li>Runner IP :10.88.9.37  (version 12.5.0)</li></ul><h1 id="二、GitLab-CI-简介"><a href="#二、GitLab-CI-简介" class="headerlink" title="二、GitLab CI 简介"></a>二、GitLab CI 简介</h1><p>GitLab CI 是 GitLab 默认集成的 CI 功能，GitLab CI 通过在项目内 .gitlab-ci.yaml 配置文件读取 CI 任务并进行相应处理；GitLab CI 通过其称为 GitLab Runner 的 Agent 端进行 build 操作；Runner 本身可以使用多种方式安装，比如使用 Docker 镜像启动等；Runner 在进行 build 操作时也可以选择多种 build 环境提供者；比如直接在 Runner 所在宿主机 build、通过新创建虚拟机(vmware、virtualbox)进行 build等；同时 Runner 支持 Docker 作为 build 提供者，即每次 build 新启动容器进行 build；GitLab CI 其大致架构如下<br><img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/UTOOLS1576566686625.png" alt="UTOOLS1576566686625.png"></p><h1 id="三、GitLab搭建"><a href="#三、GitLab搭建" class="headerlink" title="三、GitLab搭建"></a>三、GitLab搭建</h1><h2 id="安准基础依赖"><a href="#安准基础依赖" class="headerlink" title="安准基础依赖"></a>安准基础依赖</h2><ul><li>安装基础依赖</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo yum install -y curl policycoreutils-python openssh-server</code></pre><p>启动ssh服务&amp;设置为开机启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo systemctl enable sshdsudo systemctl start sshd </code></pre><ul><li>安装Postfix</li></ul><p>Postfix是一个邮件服务器，GitLab发送邮件需要用到</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 安装postfixsudo yum install -y postfix</code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 启动postfix并设置为开机启动sudo systemctl enable postfixsudo systemctl start postfix</code></pre><ul><li>开放ssh以及http服务（80端口)</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 开放ssh、http服务sudo firewall-cmd --add-service&#x3D;ssh --permanentsudo firewall-cmd --add-service&#x3D;http --permanent</code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 重载防火墙规则sudo firewall-cmd --reload</code></pre><h2 id="安装GitLab"><a href="#安装GitLab" class="headerlink" title="安装GitLab"></a>安装GitLab</h2><p>本次我们部署的是社区版:gitlab-ce，如果要部署商业版可以把关键字替换为：gitlab-ee</p><ul><li>Yum安装GitLab</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 新建 &#x2F;etc&#x2F;yum.repos.d&#x2F;gitlab-ce.repo，内容为[gitlab-ce]name&#x3D;Gitlab CE Repositorybaseurl&#x3D;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;gitlab-ce&#x2F;yum&#x2F;el$releasever&#x2F;gpgcheck&#x3D;0enabled&#x3D;1# 再执行sudo yum makecachesudo yum install gitlab-ce</code></pre><h2 id="配置GitLab"><a href="#配置GitLab" class="headerlink" title="配置GitLab"></a>配置GitLab</h2><p>GitLab默认的配置文件路径是&#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#修改配置文件sudo vim &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb#配置首页地址（大约在第15行）可以用IP代替域名，这里根据自己需求来即可external_url &#39;http:&#x2F;&#x2F;gitlab.ecloud.com&#39;</code></pre><h2 id="启动并访问GitLab"><a href="#启动并访问GitLab" class="headerlink" title="启动并访问GitLab"></a>启动并访问GitLab</h2><ul><li>启动GitLab</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#重新配置并启动sudo gitlab-ctl reconfigure#完成后将会看到如下输出Running handlers completeChef Client finished, 432&#x2F;613 resources updated in 03 minutes 43 secondsgitlab Reconfigured!</code></pre><ul><li>访问 GitLab</li></ul><p><code>将设置的域名DNS解析到服务器IP，或者修改本地host将域名指向服务器IP。 访问：http://gitlab.ecloud.com </code></p><ul><li>设置密码</li></ul><p><code>这时候会提示为管理员账号设置密码。管理员账号默认username是root。 设置完成之后即可使用root账号登录，登陆后会进入欢迎界面。</code><br><img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/UTOOLS1576569027584.png" alt="UTOOLS1576569027584.png"></p><h1 id="四、GitLab-CI-配置"><a href="#四、GitLab-CI-配置" class="headerlink" title="四、GitLab CI 配置"></a>四、GitLab CI 配置</h1><h2 id="增加-Runner"><a href="#增加-Runner" class="headerlink" title="增加 Runner"></a>增加 Runner</h2><p><em>GitLab CI 在进行构建时会将任务下发给 Runner，让 Runner 去执行；所以先要添加一个 Runner</em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 新建 &#x2F;etc&#x2F;yum.repos.d&#x2F;gitlab-runner.repo，内容为[gitlab-runner]name&#x3D;gitlab-runnerbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;gitlab-runner&#x2F;yum&#x2F;el7repo_gpgcheck&#x3D;0gpgcheck&#x3D;0enabled&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;packages.gitlab.com&#x2F;gpg.key# 再执行sudo yum makecachesudo yum install gitlab-runner</code></pre><h2 id="gitlab-runner-注册"><a href="#gitlab-runner-注册" class="headerlink" title="gitlab-runner 注册"></a>gitlab-runner 注册</h2><ul><li><p>首先要先获取gitlab-ci的Token:<br><code>项目主页 -&gt; Sttings -&gt; CI/CD -&gt; Runners Expand </code><br><img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/UTOOLS1577171080231.png" alt="UTOOLS1577171080231.png"></p></li><li><p>登录安装runner的服务器，使用命令注册gitlab-runner:</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gitlab-runner register</code></pre><ol><li>输入gitlab的服务URL，这个使用的是<a href="http://gitlab.ecloud.com/">http://gitlab.ecloud.com</a></li><li>输入gitlab-ci的Toekn，获取方式参考上图</li><li>关于集成服务中对于这个runner的描述</li><li>给这个gitlab-runner输入一个标记，这个tag非常重要，在后续的使用过程中需要使用这个tag来指定gitlab-runner</li><li>是否运行在没有tag的build上面。在配置gitlab-ci的时候，会有很多job，每个job可以通过tags属性来选择runner。这里为true表示如果job没有配置tags，也执行</li><li>是否锁定runner到当前项目</li><li>选择执行器，gitlab-runner实现了很多执行器，可用在不同场景中运行构建，详情可见GitLab Runner Executors，这里选用Shell模式</li><li>刷新页面就可以看到新增的一个Runner:</li></ol><p><img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/UTOOLS1577172646072.png" alt="UTOOLS1577172646072.png"></p><p> 9.这个GitLabRunner就安装好了，下一步就是把项目集成到gitlab-ci中，开始持续集成了。</p><h2 id="gitlab-runner-使用"><a href="#gitlab-runner-使用" class="headerlink" title="gitlab-runner 使用"></a>gitlab-runner 使用</h2><ul><li>创建 CI 配置文件<br><code>一切准备就绪以后，就可以编写 CI 脚本了；GitLab 依靠读取项目根目录下的 .gitlab-ci.yml 文件来执行相应的 CI 操作；以下为测试项目的 .gitlab-ci.yml 配置</code></li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># These are the default stages. You don&#39;t need to explicitly define them. But you could define any stages you need.stages:- build- deploy- catLog- killvariables:MAVEN_CLI_OPTS: &quot;-s .m2&#x2F;settings.xml --batch-mode&quot;MAVEN_OPTS: &quot;-Dmaven.repo.local&#x3D;&#x2F;export&#x2F;servers&#x2F;repository_boot&quot;SHELL_NAME: &quot;ry.sh&quot;cache:paths:# - .m2&#x2F;repository- target&#x2F;# This is the name of the job. You can choose it freely.maven_build:# A job is always executed within a stage. If no stage is set, it defaults to &#39;test&#39;stage: build# Since we require Maven for this job, we can restrict the job to runners with a certain tag. Of course, we need to configure a runner with the tag maven with a maven installationtags:- dev# 使用当前作业的名称和当前分支或标签（仅包括二进制文件目录）创建档案artifacts:name: &quot;$CI_JOB_NAME-$CI_COMMIT_REF_NAME&quot;expire_in: 4 weekpaths:- target&#x2F;*.jar# Here you can execute arbitrate terminal commands.# If any of the commands returns a non zero exit code the job failsscript:- echo &quot;Building project with maven&quot;- mvn $MAVEN_CLI_OPTS clean- mvn $MAVEN_CLI_OPTS installdeploy_jdk8:stage: deploytags:- devscript:- echo &quot;Deploy....&quot;- sh $SHELL_NAME restartwhen: on_successinterruptible: truecat_boot_log:stage: catLogtags:- devscript:- echo &quot;cat  log....&quot;- sh $SHELL_NAME catwhen: on_successkill_progress:stage: killtags:- devscript:- echo &quot;kill progress&quot;- sh $SHELL_NAME stopwhen: manual</code></pre><img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/UTOOLS1577173183588.png"  /><p>关于 .gitlab-ci.yml 具体配置更完整的请参考 <strong><a href="https://docs.gitlab.com/ee/ci/yaml/">官方文档</a></strong></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>文中测试项目:  <strong><a href="/download/ruoyi-test-dev.zip">点击下载</a></strong></p></blockquote><p>Article link： <a href="https://tqgoblin.site/post/gitlab-cicd/">https://tqgoblin.site/post/gitlab-cicd/</a> <div align=left> Author：<a href="https://www.tqgoblin.site"> Stephen </a> </div></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Activiti 学习笔记（二）</title>
      <link href="/post/activiti%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/"/>
      <url>/post/activiti%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="一、Activiti-入门体验"><a href="#一、Activiti-入门体验" class="headerlink" title="一、Activiti 入门体验"></a>一、Activiti 入门体验</h1><h2 id="流程定义"><a href="#流程定义" class="headerlink" title="流程定义"></a>流程定义</h2><h3 id="Palette（画板）"><a href="#Palette（画板）" class="headerlink" title="Palette（画板）"></a>Palette（画板）</h3><p>在 eclipse 或 idea 中安装 activiti-designer 插件即可使用，画板中包括以下结点：</p><ul><li>Connection—连接</li><li>Event—事件</li><li>Task—任务</li><li>Gateway—网关</li><li>Container—容器</li><li>Boundary event—边界事件</li><li>Intermediate event- -中间事件</li><li>流程图设计完毕保存生成.bpmn 文件。</li></ul><h3 id="新建流程-（IDEA）"><a href="#新建流程-（IDEA）" class="headerlink" title="新建流程 （IDEA）"></a>新建流程 （IDEA）</h3><img src="https://i.loli.net/2020/01/03/K21JHz9UdgxXqoW.png"/><p>起完名字 holiday 后（默认扩展名为 bpmn），就可以看到进入了流程设计页面，如图所示：</p><img src="https://i.loli.net/2020/01/03/MOZyBW7wTNpheEF.png"/><h3 id="绘制流程"><a href="#绘制流程" class="headerlink" title="绘制流程"></a>绘制流程</h3><p>左侧区域是绘图区，右侧区域是 palette 画板区域 ，鼠标先点击画板的元素即可在左侧绘图。<br><img src="https://i.loli.net/2020/01/03/RW2UZEPY3csqazx.png"  /></p><h3 id="指定流程定义Key"><a href="#指定流程定义Key" class="headerlink" title="指定流程定义Key"></a>指定流程定义Key</h3><p>流程定义 key 即流程定义的标识，在 idea 中通过 properties 视图查看流程的 key<br>建议：相同的业务流程，流程定义的 key 名字定义一样，比如，如果需要创建新的业务流程，请假流程则使用新的 key。</p><img src="https://i.loli.net/2020/01/04/iRGJ624P5hwFqDr.png"/><h3 id="指定任务负责人"><a href="#指定任务负责人" class="headerlink" title="指定任务负责人"></a>指定任务负责人</h3><p>在 properties 视图指定每个任务结点的负责人，比如下边是填写请假单的负责人为 zhangsan</p><img src="https://i.loli.net/2020/01/04/a5iQrmVdf1L2CqE.png" /><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>生成png流程图 参考 <a href="https://blog.csdn.net/will_lam/article/details/78833806">Idea创建bpmn文件没有png图片解决办法</a></p></blockquote><h2 id="部署流程定义"><a href="#部署流程定义" class="headerlink" title="部署流程定义"></a>部署流程定义</h2><p>部署流程定义就是要将上边绘制的图形即流程定义（.bpmn）部署在工作流程引擎 activiti 中，方法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * 流程定义的部署 * activiti表有哪些？ *  act_re_deployment  部署信息    act_re_procdef     流程定义的一些信息    act_ge_bytearray   流程定义的bpmn文件及png文件 *&#x2F;public static void main(String[] args) &#123;    &#x2F;&#x2F;1.创建ProcessEngine对象    ProcessEngine processEngine &#x3D; ProcessEngines.getDefaultProcessEngine();    &#x2F;&#x2F;2.得到RepositoryService实例    RepositoryService repositoryService &#x3D; processEngine.getRepositoryService();    &#x2F;&#x2F;3.进行部署    Deployment deployment &#x3D; repositoryService.createDeployment()            .addClasspathResource(&quot;diagram&#x2F;holiday.bpmn&quot;)  &#x2F;&#x2F;添加bpmn资源            .addClasspathResource(&quot;diagram&#x2F;holiday.png&quot;)            .name(&quot;请假申请单流程&quot;)            .deploy();    &#x2F;&#x2F;4.输出部署的一些信息    System.out.println(deployment.getName());    System.out.println(deployment.getId());&#125;</code></pre><h2 id="启动一个流程实例"><a href="#启动一个流程实例" class="headerlink" title="启动一个流程实例"></a>启动一个流程实例</h2><p>流程定义部署在 activiti 后就可以通过工作流管理业务流程了，也就是说上边部署的请假申请流程可以使用了。<br>针对该流程，启动一个流程表示发起一个新的请假申请单，这就相当于 java 类与 java 对象的关系，类定义好后需要 new 创建一个对象使用，当然可以 new 多个对象。对于请假申请流程，张三发起一个请假申请单需要启动一个流程实例，请假申请单发起一个请假单也需要启动一个流程实例。<br>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    &#x2F;**    * 启动流程实例:    *     前提是先已经完成流程定义的部署工作    *    *     背后影响的表：    *       act_hi_actinst     已完成的活动信息         act_hi_identitylink   参与者信息         act_hi_procinst   流程实例         act_hi_taskinst   任务实例         act_ru_execution   执行表         act_ru_identitylink   参与者信息         act_ru_task  任务    *&#x2F;public class ActivitiStartInstance &#123;    public static void main(String[] args) &#123;        &#x2F;&#x2F;1.得到ProcessEngine对象        ProcessEngine processEngine &#x3D; ProcessEngines.getDefaultProcessEngine();        &#x2F;&#x2F;2.得到RunService对象        RuntimeService runtimeService &#x3D; processEngine.getRuntimeService();        &#x2F;&#x2F;3.创建流程实例  流程定义的key需要知道 holiday        ProcessInstance processInstance &#x3D; runtimeService.startProcessInstanceByKey(&quot;holiday&quot;);        &#x2F;&#x2F;4.输出实例的相关信息        System.out.println(&quot;流程部署ID&quot;+processInstance.getDeploymentId());&#x2F;&#x2F;null        System.out.println(&quot;流程定义ID&quot;+processInstance.getProcessDefinitionId());&#x2F;&#x2F;holiday:1:4        System.out.println(&quot;流程实例ID&quot;+processInstance.getId());&#x2F;&#x2F;2501        System.out.println(&quot;活动ID&quot;+processInstance.getActivityId());&#x2F;&#x2F;null    &#125;</code></pre><h3 id="任务查询"><a href="#任务查询" class="headerlink" title="任务查询"></a>任务查询</h3><p>流程启动后，各各任务的负责人就可以查询自己当前需要处理的任务，查询出来的任务都是该用户的待办任务。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> &#x2F;&#x2F;zhangsan完成自己任务列表的查询public static void main(String[] args) &#123;    &#x2F;&#x2F;1.得到ProcessEngine对象    ProcessEngine processEngine &#x3D; ProcessEngines.getDefaultProcessEngine();    &#x2F;&#x2F;2.得到TaskService对象    TaskService taskService &#x3D; processEngine.getTaskService();    &#x2F;&#x2F;3.根据流程定义的key,负责人assignee来实现当前用户的任务列表查询    Task task &#x3D; taskService.createTaskQuery()            .processDefinitionKey(&quot;holiday&quot;)            .taskAssignee(&quot;zhangsan&quot;)            .singleResult();    &#x2F;&#x2F;4.任务列表的展示    System.out.println(&quot;流程实例ID:&quot;+task.getProcessInstanceId()); &#x2F;&#x2F;2501    System.out.println(&quot;任务ID:&quot;+task.getId());  &#x2F;&#x2F;2505    System.out.println(&quot;任务负责人:&quot;+task.getAssignee()); &#x2F;&#x2F;zhangsan    System.out.println(&quot;任务名称:&quot;+task.getName()); &#x2F;&#x2F;填写请假申请单&#125;</code></pre><h3 id="任务处理"><a href="#任务处理" class="headerlink" title="任务处理"></a>任务处理</h3><p>任务负责人查询待办任务，选择任务进行处理，完成任务。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * zhangsan完成自己的任务 * 处理当前用户的任务 * 背后操作的表： *   act_hi_actinst     act_hi_identitylink     act_hi_taskinst     act_ru_identitylink     act_ru_task *&#x2F;public static void main(String[] args) &#123;    &#x2F;&#x2F;1.得到ProcessEngine对象    ProcessEngine processEngine &#x3D; ProcessEngines.getDefaultProcessEngine();    &#x2F;&#x2F;2.得到TaskService对象    TaskService taskService &#x3D; processEngine.getTaskService();    &#x2F;&#x2F;3.处理任务,结合当前用户任务列表的查询操作的话,任务ID:2505    taskService.complete(&quot;2505&quot;);    &#125;</code></pre><h3 id="流程定义删除"><a href="#流程定义删除" class="headerlink" title="流程定义删除"></a>流程定义删除</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">    &#x2F;**     * 删除已经部署的流程定义     *     * 背后影响的表:     * act_ge_bytearray       act_re_deployment       act_re_procdef     *&#x2F;public class DeleteProcessDefinition &#123;    &#x2F;**     * 注意事项：     *     1.当我们正在执行的这一套流程没有完全审批结束的时候，此时如果要删除流程定义信息就会失败     *     2.如果公司层面要强制删除,可以使用repositoryService.deleteDeployment(&quot;1&quot;,true);     *     &#x2F;&#x2F;参数true代表级联删除，此时就会先删除没有完成的流程结点，最后就可以删除流程定义信息  false的值代表不级联     *     * @param args     *&#x2F;    public static void main(String[] args) &#123;        &#x2F;&#x2F;1.得到ProcessEngine对象        ProcessEngine processEngine &#x3D; ProcessEngines.getDefaultProcessEngine();        &#x2F;&#x2F;2.创建RepositoryService对象        RepositoryService repositoryService &#x3D; processEngine.getRepositoryService();        &#x2F;&#x2F;3.执行删除流程定义  参数代表流程部署的id        repositoryService.deleteDeployment(&quot;1&quot;);    &#125;&#125;</code></pre><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>说明：</p></blockquote><ol><li>使用 repositoryService 删除流程定义</li><li>如果该流程定义下没有正在运行的流程，则可以用普通删除。</li><li>如果该流程定义下存在已经运行的流程，使用普通删除报错，可用级联删除方法将流程及相关记录全部删除。项目开发中使用级联删除的情况比较多，删除操作一般只开放给超级管理员使用。</li></ol><h3 id="流程定义资源查询"><a href="#流程定义资源查询" class="headerlink" title="流程定义资源查询"></a>流程定义资源查询</h3><p>通过流程定义对象获取流程定义资源，获取 bpmn 和 png。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * 需求： * 1.从Activiti的act_ge_bytearray表中读取两个资源文件 * 2.将两个资源文件保存到路径：   &#x2F;Users&#x2F;mac&#x2F;Desktop&#x2F;diagram&#x2F; * * 技术方案： *     1.第一种方式使用actviti的api来实现 *     2.第二种方式：其实就是原理层面，可以使用jdbc的对blob类型，clob类型数据的读取，并保存 *        IO流转换，最好commons-io.jar包可以轻松解决IO操作 * * 真实应用场景：用户想查看这个请假流程具体有哪些步骤要走？ * * *&#x2F;public class QueryBpmnFile &#123;    public static void main(String[] args) throws IOException &#123;        &#x2F;&#x2F;1.得到ProcessEngine对象        ProcessEngine processEngine &#x3D; ProcessEngines.getDefaultProcessEngine();        &#x2F;&#x2F;2.得到RepositoryService对象        RepositoryService repositoryService &#x3D; processEngine.getRepositoryService();        &#x2F;&#x2F;3.得到查询器:ProcessDefinitionQuery对象        ProcessDefinitionQuery processDefinitionQuery &#x3D; repositoryService.createProcessDefinitionQuery();        &#x2F;&#x2F;4.设置查询条件        processDefinitionQuery.processDefinitionKey(&quot;holiday&quot;);&#x2F;&#x2F;参数是流程定义的key        &#x2F;&#x2F;5.执行查询操作,查询出想要的流程定义        ProcessDefinition processDefinition &#x3D; processDefinitionQuery.singleResult();        &#x2F;&#x2F;6.通过流程定义信息，得到部署ID        String deploymentId &#x3D; processDefinition.getDeploymentId();        &#x2F;&#x2F;7.通过repositoryService的方法,实现读取图片信息及bpmn文件信息(输入流)        &#x2F;&#x2F;getResourceAsStream()方法的参数说明：第一个参数部署id,第二个参数代表资源名称        &#x2F;&#x2F;processDefinition.getDiagramResourceName() 代表获取png图片资源的名称        &#x2F;&#x2F;processDefinition.getResourceName()代表获取bpmn文件的名称        InputStream pngIs &#x3D; repositoryService                .getResourceAsStream(deploymentId,processDefinition.getDiagramResourceName());        InputStream bpmnIs &#x3D; repositoryService                .getResourceAsStream(deploymentId,processDefinition.getResourceName());        &#x2F;&#x2F;8.构建出OutputStream流        OutputStream pngOs &#x3D;                new FileOutputStream(new File(&quot;&#x2F;Users&#x2F;mac&#x2F;Desktop&#x2F;&quot;+processDefinition.getDiagramResourceName()));        OutputStream bpmnOs &#x3D;                new FileOutputStream(new File(&quot;&#x2F;Users&#x2F;mac&#x2F;Desktop&#x2F;&quot;+processDefinition.getResourceName()));        &#x2F;&#x2F;9.输入流，输出流的转换  commons-io-xx.jar中的方法        IOUtils.copy(pngIs,pngOs);        IOUtils.copy(bpmnIs,bpmnOs);        &#x2F;&#x2F;10.关闭流        pngOs.close();        bpmnOs.close();        pngIs.close();        bpmnIs.close();    &#125;&#125;</code></pre><h3 id="流程历史信息的查看"><a href="#流程历史信息的查看" class="headerlink" title="流程历史信息的查看"></a>流程历史信息的查看</h3><p>即使流程定义已经删除了，流程执行的历史信息通过前面的分析，依然保存在 activiti 的 act_hi_*相关的表中。所以我们还是可以查询流程执行的历史信息，可以通过 HistoryService 来查看相关的历史记录。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public static void main(String[] args) throws IOException &#123;        &#x2F;&#x2F;1.得到ProcessEngine对象        ProcessEngine processEngine &#x3D; ProcessEngines.getDefaultProcessEngine();        &#x2F;&#x2F;2.得到HistoryService        HistoryService historyService &#x3D; processEngine.getHistoryService();        &#x2F;&#x2F;3.得到HistoricActivitiInstanceQuery对象        HistoricActivityInstanceQuery historicActivityInstanceQuery &#x3D; historyService.createHistoricActivityInstanceQuery();        historicActivityInstanceQuery.processInstanceId(&quot;10001&quot;);&#x2F;&#x2F;设置流程实例的id        &#x2F;&#x2F;4.执行查询        List&lt;HistoricActivityInstance&gt; list &#x3D; historicActivityInstanceQuery                .orderByHistoricActivityInstanceStartTime().asc().list();&#x2F;&#x2F;排序StartTime        &#x2F;&#x2F;5.遍历查询结果        for (HistoricActivityInstance instance :list)&#123;            System.out.println(instance.getActivityId());            System.out.println(instance.getActivityName());            System.out.println(instance.getProcessDefinitionId());            System.out.println(instance.getProcessInstanceId());            System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);        &#125;    &#125;</code></pre><p>Article link： <a href="https://tqgoblin.site/post/activiti%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/">https://tqgoblin.site/post/activiti学习笔记(二)/</a> <div align=left> Author：<a href="https://www.tqgoblin.site"> Stephen </a> </div></p>]]></content>
      
      
      <categories>
          
          <category> Activiti </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Activiti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Activiti 学习笔记（一）</title>
      <link href="/post/activiti%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/"/>
      <url>/post/activiti%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="一、-Activiti流程引擎简介"><a href="#一、-Activiti流程引擎简介" class="headerlink" title="一、 Activiti流程引擎简介"></a>一、 Activiti流程引擎简介</h1><ul><li>此项目于2010年Tom Bayen（jBPM创始人）离开jBoss后加入Alfresco公司之后的又一力作；第一版在2010年5月发布，当时仅支持最简单的流程处理，后来版本发布频率固定为每两个月一版。 值得一提的是参与项目开发的除了Tom Bayen和十几位核心开发人员之外还有其他公司的成员的参与，例如：SpringSource、MuleSoft、Salves、Signavio、FuseSource、NextLevel等公司。  </li><li>Activiti是一个针对企业用户、开发人员、系统管理员轻量级工作流业务管理平台。其核心是使用Java开发的快速、稳定BPMN 2.0流程引擎。Activiti 是在 Apache V2 许可下发布的。Activiti可以运行在任何类型的Java程序中，例如服务器、集群、云服务。它可以完美地与Spring集成。计基于简约思想的设计使Activiti非常的轻量级。 它有着活跃的社区，而且越来越多的企业都选择Activiti作为自己的流程引擎或者嵌入到自己的系统平台中（例如ESB）。</li></ul><h1 id="二、-Activiti-数据库支持"><a href="#二、-Activiti-数据库支持" class="headerlink" title="二、 Activiti 数据库支持"></a>二、 Activiti 数据库支持</h1><p>Activiti的后台是有数据库的支持，所有的表都以ACT_开头。 第二部分是表示表的用途的两个字母标识。 用途也和服务的API对应。 </p><ul><li>ACT_RE_*: ‘RE’表示repository。 这个前缀的表包含了流程定义和流程静态资源 （图片，规则，等等）。 </li><li>ACT_RU_*: ‘RU’表示runtime。 这些运行时的表，包含流程实例，任务，变量，异步任务，等运行中的数据。 Activiti只在流程实例执行过程中保存这些数据， 在流程结束时就会删除这些记录。 这样运行时表可以一直很小速度很快。 </li><li>ACT_ID_*: ‘ID’表示identity。 这些表包含身份信息，比如用户，组等等。 </li><li>ACT_HI_*: ‘HI’表示history。 这些表包含历史数据，比如历史流程实例， 变量，任务等等。 </li><li>ACT_GE_*: 通用数据， 用于不同场景下，如存放资源文件</li></ul><h1 id="三、-Activiti-如何使用"><a href="#三、-Activiti-如何使用" class="headerlink" title="三、 Activiti 如何使用"></a>三、 Activiti 如何使用</h1><h2 id="1-部署Activiti"><a href="#1-部署Activiti" class="headerlink" title="1. 部署Activiti"></a>1. 部署Activiti</h2><p>Activiti 是一个工作流引擎（其实就是一堆jar包 API），业务系统使用 activiti 来对系统的业务流<br>程进行自动化管理，为了方便业务系统访问(操作)activiti 的接口或功能，通常将 activiti 环境与业务<br>系统的环境集成在一起。</p><h2 id="2-流程定义"><a href="#2-流程定义" class="headerlink" title="2. 流程定义"></a>2. 流程定义</h2><p>使用 activiti 流程建模工具(activity-designer)定义业务流程(.bpmn 文件) 。<br>.bpmn 文件就是业务流程定义文件，通过 xml 定义业务流程。<br>如果使用其它公司开发的工作作引擎一般都提供了可视化的建模工具(Process Designer)用于生<br>成流程定义文件，建模工具操作直观，一般都支持图形化拖拽方式、多窗口的用户界面、丰富的过<br>程图形元素、过程元素拷贝、粘贴、删除等功能。</p><img src="https://user-gold-cdn.xitu.io/2020/1/3/16f6a627bb6d2e87?w=1222&h=601&f=png&s=441693"/><h2 id="3-流程定义部署"><a href="#3-流程定义部署" class="headerlink" title="3. 流程定义部署"></a>3. 流程定义部署</h2><p>向 activiti 部署业务流程定义（.bpmn 文件）。<br>使用 activiti 提供的 api 向 activiti 中部署.bpmn 文件（一般情况还需要一块儿部署业务流程的图<br>片.png）</p><h2 id="4-启动一个流程实例-ProcessInstance"><a href="#4-启动一个流程实例-ProcessInstance" class="headerlink" title="4. 启动一个流程实例(ProcessInstance)"></a>4. 启动一个流程实例(ProcessInstance)</h2><p>启动一个流程实例表示开始一次业务流程的运行，比如员工请假流程部署完成，如果张三要请<br>假就可以启动一个流程实例，如果李四要请假也启动一个流程实例，两个流程的执行互相不影<br>响，就好比定义一个 java 类，实例化两个对象一样，部署的流程就好比 java 类，启动一个流程<br>实例就好比 new 一个 java 对象。</p><h2 id="5-用户查询代办任务-Task"><a href="#5-用户查询代办任务-Task" class="headerlink" title="5. 用户查询代办任务(Task)"></a>5. 用户查询代办任务(Task)</h2><p>因为现在系统的业务流程已经交给 activiti 管理，通过 activiti 就可以查询当前流程执行到哪了，<br>当前用户需要办理什么任务了，这些 activiti帮我们管理了，而不像上边需要我们在 sql语句中的where<br>条件中指定当前查询的状态值是多少。</p><h2 id="6-用户办理任务"><a href="#6-用户办理任务" class="headerlink" title="6. 用户办理任务"></a>6. 用户办理任务</h2><p>用户查询待办任务后，就可以办理某个任务，如果这个任务办理完成还需要其它用户办理，比如采<br>购单创建后由部门经理审核，这个过程也是由 activiti 帮我们完成了，不需要我们在代码中硬编码指<br>定下一个任务办理人了。</p><h2 id="7-流程结束"><a href="#7-流程结束" class="headerlink" title="7. 流程结束"></a>7. 流程结束</h2><p>当任务办理完成没有下一个任务&#x2F;结点了，这个流程实例就完成了。</p><h1 id="四、-Activiti-服务架构图"><a href="#四、-Activiti-服务架构图" class="headerlink" title="四、 Activiti 服务架构图"></a>四、 Activiti 服务架构图</h1><img src="https://i.loli.net/2020/01/03/nEOgGw43lIafYrV.png"/><p>在新版本中， IdentityService，FormService 两个 Serivce 都已经删除了。</p><h2 id="1-activiti-cfg-xml"><a href="#1-activiti-cfg-xml" class="headerlink" title="1. activiti.cfg.xml"></a>1. activiti.cfg.xml</h2><p>activiti 的引擎配置文件，包括：ProcessEngineConfiguration 的定义、数据源定义、事务管理器等，<br>此文件其实就是一个 spring 配置文件，下面是一个基本的配置只配置了 ProcessEngineConfiguration<br>和数据源：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;       xmlns:tx&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&quot;       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsdhttp:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;contex http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsdhttp:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&#x2F;spring-tx.xsd&quot;&gt;    &lt;!--数据源配置dbcp--&gt;    &lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;org.apache.commons.dbcp.BasicDataSource&quot;&gt;        &lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot; &#x2F;&gt;        &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;activiti&quot; &#x2F;&gt;        &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot; &#x2F;&gt;        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;root&quot; &#x2F;&gt;    &lt;&#x2F;bean&gt;    &lt;!--activiti单独运行的ProcessEngine配置对象(processEngineConfiguration),使用单独启动方式        默认情况下：bean的id&#x3D;processEngineConfiguration    --&gt;    &lt;bean id&#x3D;&quot;processEngineConfiguration&quot; class&#x3D;&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt;    &lt;!--代表数据源--&gt;    &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;    &lt;!--代表是否生成表结构--&gt;    &lt;property name&#x3D;&quot;databaseSchemaUpdate&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;    &lt;&#x2F;bean&gt;&lt;&#x2F;beans&gt;</code></pre><h2 id="2-ProcessEngineConfiguration"><a href="#2-ProcessEngineConfiguration" class="headerlink" title="2. ProcessEngineConfiguration"></a>2. ProcessEngineConfiguration</h2><p>流程引擎的配置类，通过 ProcessEngineConfiguration 可以创建工作流引擎 ProceccEngine，常用的两种方法如下：</p><h3 id="StandaloneProcessEngineConfiguration"><a href="#StandaloneProcessEngineConfiguration" class="headerlink" title="StandaloneProcessEngineConfiguration"></a>StandaloneProcessEngineConfiguration</h3><p>通过org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration<br>Activiti 可以单独运行，使用它创建的 ProcessEngine，Activiti 会自己处理事务。</p><p>配置文件方式：<br>通常在 activiti.cfg.xml 配置文件中定义一个 id 为 processEngineConfiguration 的 bean，这里<br>会使用 spring 的依赖注入来构建引擎。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;bean id&#x3D;&quot;processEngineConfiguration&quot;class&#x3D;&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt;&lt;!-- 数据源 --&gt; &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot; &#x2F;&gt;&lt;!-- 数据库策略 --&gt; &lt;property name&#x3D;&quot;databaseSchemaUpdate&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;&lt;&#x2F;bean&gt;</code></pre><h3 id="SpringProcessEngineConfiguration"><a href="#SpringProcessEngineConfiguration" class="headerlink" title="SpringProcessEngineConfiguration"></a>SpringProcessEngineConfiguration</h3><p>通过 org.activiti.spring.SpringProcessEngineConfiguration 与 Spring 整合。<br>创建 spring 与 activiti 的整合配置文件：<br>activity-spring.cfg.xml（名称不固定）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;xmlns:tx&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&quot;xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans-3.1.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc-3.1.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context-3.1.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop-3.1.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&#x2F;spring-tx-3.1.xsd &quot;&gt;&lt;!-- 工作流引擎配置bean --&gt; &lt;bean id&#x3D;&quot;processEngineConfiguration&quot;class&#x3D;&quot;org.activiti.spring.SpringProcessEngineConfiguration&quot;&gt;&lt;!-- 数据源 --&gt; &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot; &#x2F;&gt;&lt;!-- 使用spring事务管理器 --&gt; &lt;property name&#x3D;&quot;transactionManager&quot; ref&#x3D;&quot;transactionManager&quot; &#x2F;&gt;&lt;!-- 数据库策略 --&gt; &lt;property name&#x3D;&quot;databaseSchemaUpdate&quot; value&#x3D;&quot;drop-create&quot; &#x2F;&gt;&lt;!-- activiti的定时任务关闭 --&gt; &lt;property name&#x3D;&quot;jobExecutorActivate&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;&lt;&#x2F;bean&gt;&lt;!-- 流程引擎 --&gt; &lt;bean id&#x3D;&quot;processEngine&quot;class&#x3D;&quot;org.activiti.spring.ProcessEngineFactoryBean&quot;&gt;&lt;property name&#x3D;&quot;processEngineConfiguration&quot;ref&#x3D;&quot;processEngineConfiguration&quot; &#x2F;&gt;&lt;&#x2F;bean&gt;&lt;!-- 资源服务service --&gt; &lt;bean id&#x3D;&quot;repositoryService&quot; factory-bean&#x3D;&quot;processEngine&quot;factory-method&#x3D;&quot;getRepositoryService&quot; &#x2F;&gt;&lt;!-- 流程运行service --&gt; &lt;bean id&#x3D;&quot;runtimeService&quot; factory-bean&#x3D;&quot;processEngine&quot;factory-method&#x3D;&quot;getRuntimeService&quot; &#x2F;&gt;&lt;!-- 任务管理service --&gt; &lt;bean id&#x3D;&quot;taskService&quot; factory-bean&#x3D;&quot;processEngine&quot;factory-method&#x3D;&quot;getTaskService&quot; &#x2F;&gt;&lt;!-- 历史管理service --&gt; &lt;bean id&#x3D;&quot;historyService&quot; factory-bean&#x3D;&quot;processEngine&quot;factory-method&#x3D;&quot;getHistoryService&quot; &#x2F;&gt;&lt;!-- 用户管理service --&gt; &lt;bean id&#x3D;&quot;identityService&quot; factory-bean&#x3D;&quot;processEngine&quot;factory-method&#x3D;&quot;getIdentityService&quot; &#x2F;&gt;&lt;!-- 引擎管理service --&gt; &lt;bean id&#x3D;&quot;managementService&quot; factory-bean&#x3D;&quot;processEngine&quot;factory-method&#x3D;&quot;getManagementService&quot; &#x2F;&gt;&lt;!-- 数据源 --&gt; &lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;org.apache.commons.dbcp.BasicDataSource&quot;&gt; &lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot; &#x2F;&gt;&lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;activiti&quot; &#x2F;&gt;&lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot; &#x2F;&gt;&lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;mysql&quot; &#x2F;&gt;&lt;property name&#x3D;&quot;maxActive&quot; value&#x3D;&quot;3&quot; &#x2F;&gt;&lt;property name&#x3D;&quot;maxIdle&quot; value&#x3D;&quot;1&quot; &#x2F;&gt;&lt;&#x2F;bean&gt;&lt;!-- 事务管理器 --&gt; &lt;bean id&#x3D;&quot;transactionManager&quot;class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt; &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot; &#x2F;&gt;&lt;&#x2F;bean&gt;&lt;!-- 通知 --&gt; &lt;tx:advice id&#x3D;&quot;txAdvice&quot; transaction-manager&#x3D;&quot;transactionManager&quot;&gt; &lt;tx:attributes&gt;&lt;!-- 传播行为 --&gt; &lt;tx:method name&#x3D;&quot;save*&quot; propagation&#x3D;&quot;REQUIRED&quot; &#x2F;&gt;&lt;tx:method name&#x3D;&quot;insert*&quot; propagation&#x3D;&quot;REQUIRED&quot; &#x2F;&gt;&lt;tx:method name&#x3D;&quot;delete*&quot; propagation&#x3D;&quot;REQUIRED&quot; &#x2F;&gt;&lt;tx:method name&#x3D;&quot;update*&quot; propagation&#x3D;&quot;REQUIRED&quot; &#x2F;&gt;&lt;tx:method name&#x3D;&quot;find*&quot; propagation&#x3D;&quot;SUPPORTS&quot; read-only&#x3D;&quot;true&quot; &#x2F;&gt;&lt;tx:method name&#x3D;&quot;get*&quot; propagation&#x3D;&quot;SUPPORTS&quot; read-only&#x3D;&quot;true&quot; &#x2F;&gt;&lt;&#x2F;tx:attributes&gt;&lt;&#x2F;tx:advice&gt;&lt;!-- 切面，根据具体项目修改切点配置 --&gt; &lt;aop:config proxy-target-class&#x3D;&quot;true&quot;&gt; &lt;aop:advisor advice-ref&#x3D;&quot;txAdvice&quot;pointcut&#x3D;&quot;execution(* com.itheima.ihrm.service.impl.*.*(..))&quot; &#x2F;&gt;&lt;&#x2F;aop:config&gt;&lt;&#x2F;beans&gt;</code></pre><h2 id="3-ProcessEngine"><a href="#3-ProcessEngine" class="headerlink" title="3. ProcessEngine"></a>3. ProcessEngine</h2><p>工作流引擎，相当于一个门面接口，通过 ProcessEngineConfiguration 创建 processEngine，通过ProcessEngine 创建各个 service 接口。</p><h3 id="一般创建方式"><a href="#一般创建方式" class="headerlink" title="一般创建方式"></a>一般创建方式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;1.创建ProcessEngineConfiguration对象  第一个参数:配置文件名称  第二个参数是processEngineConfiguration的bean的idProcessEngineConfiguration configuration &#x3D; ProcessEngineConfiguration        .createProcessEngineConfigurationFromResource(&quot;activiti.cfg.xml&quot;,&quot;processEngineConfiguration&quot;);                &#x2F;&#x2F;2.创建ProcesEngine对象                ProcessEngine processEngine &#x3D; configuration.buildProcessEngine();&#x2F;&#x2F;3.输出processEngine对象System.out.println(processEngine)</code></pre><h3 id="简单创建方式"><a href="#简单创建方式" class="headerlink" title="简单创建方式"></a>简单创建方式</h3><p>将 activiti.cfg.xml 文件名及路径固定，且 activiti.cfg.xml 文件中有 processEngineConfiguration 的配置，可以使用如下代码创建 processEngine</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;条件：1.activiti配置文件名称：activiti.cfg.xml   2.bean的id&#x3D;&quot;processEngineConfiguration&quot;       ProcessEngine processEngine &#x3D; ProcessEngines.getDefaultProcessEngine();</code></pre><h2 id="4-Service"><a href="#4-Service" class="headerlink" title="4. Service"></a>4. Service</h2><h3 id="Service-创建方式"><a href="#Service-创建方式" class="headerlink" title="Service 创建方式"></a>Service 创建方式</h3><p> 通过 ProcessEngine 创建 Service，Service 是工作流引擎提供用于进行工作流部署、执行、管理的服务接口。<br>方式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">RuntimeService runtimeService &#x3D; processEngine.getRuntimeService();RepositoryService repositoryService &#x3D; processEngine.getRepositoryService();TaskService taskService &#x3D; processEngine.getTaskService();......</code></pre><h3 id="Service-总览"><a href="#Service-总览" class="headerlink" title="Service 总览"></a>Service 总览</h3><table><thead><tr><th>服务</th><th>作用</th></tr></thead><tbody><tr><td>RepositoryService</td><td>activiti 的资源管理类</td></tr><tr><td>RuntimeService</td><td>activiti 的流程运行管理类</td></tr><tr><td>TaskService</td><td>activiti 的任务管理类</td></tr><tr><td>HistoryService</td><td>activiti 的历史管理类</td></tr><tr><td>ManagerService</td><td>activiti 的引擎管理类</td></tr></tbody></table><h3 id="RepositoryService"><a href="#RepositoryService" class="headerlink" title="RepositoryService"></a>RepositoryService</h3><ul><li>是 activiti 的资源管理类，提供了管理和控制流程发布包和流程定义的操作。使用工作流建模工具设计的业务流程图需要使用此 service 将流程定义文件的内容部署到数据库。<br> <strong>除了部署流程定义以外还可以：</strong></li><li>查询引擎中的发布包和流程定义。</li><li>暂停或激活发布包，对应全部和特定流程定义。 暂停意味着它们不能再执行任何操作了，激活是对应的反向操作。</li><li>获得多种资源，像是包含在发布包里的文件， 或引擎自动生成的流程图。</li><li>获得流程定义的 pojo 版本， 可以用来通过 java 解析流程，而不必通过 xml。</li></ul><h3 id="RuntimeService"><a href="#RuntimeService" class="headerlink" title="RuntimeService"></a>RuntimeService</h3><p>它是 activiti 的流程运行管理类。可以从这个服务类中获取很多关于流程执行相关的信息</p><h3 id="TaskService"><a href="#TaskService" class="headerlink" title="TaskService"></a>TaskService</h3><p>是 activiti 的任务管理类。可以从这个类中获取任务的信息。</p><h3 id="HistoryService"><a href="#HistoryService" class="headerlink" title="HistoryService"></a>HistoryService</h3><p>是 activiti 的历史管理类，可以查询历史信息，执行流程时，引擎会保存很多数据（根据配置），比如流程实例启动时间，任务的参与者， 完成任务的时间，每个流程实例的执行路径，等等。 这个服务主要通过查询功能来获得这些数据。</p><h3 id="ManagementService"><a href="#ManagementService" class="headerlink" title="ManagementService"></a>ManagementService</h3><p>是 activiti 的引擎管理类，提供了对 Activiti 流程引擎的管理和维护功能，这些功能不在工作流驱动的应用程序中使用，主要用于 Activiti 系统的日常维护。</p><p>Article link： <a href="https://tqgoblin.site/post/activiti%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/">https://tqgoblin.site/post/activiti学习笔记(一)/</a> <div align=left> Author：<a href="https://www.tqgoblin.site"> Stephen </a> </div></p>]]></content>
      
      
      <categories>
          
          <category> Activiti </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Activiti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>THUCTC 文本分类中jar冲突</title>
      <link href="/post/thuctc%E5%88%86%E7%B1%BB/"/>
      <url>/post/thuctc%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><pre><code>我将完整的THUCTC的Demo项目作为moudle引入到自己的工程中，Demo在其自己的moudle中可以正常运行，但我将Demo的代码整合到自己的工程中时，出现了如下错误</code></pre><p><img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/UTOOLS1572674787523.png" alt="UTOOLS1572674787523.png"></p><pre><code>发现自己的工程中引入了高版本的snowball包，但是遗憾的是我并不能将它降低版本。高版本中的Amog类的构造方法发生了改变，造成了这个错误。</code></pre><ul><li><p>解决方案: </p><pre><code>  修改THUCTC工程中snowball包路径，重新打成jar包，再引入自己工程即可</code></pre></li></ul><p><img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/UTOOLS1572676250077.png" alt="UTOOLS1572676250077.png"><br><img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/UTOOLS1572676287026.png" alt="UTOOLS1572676287026.png"></p><p>Article link： <a href="https://tqgoblin.site/post/thuctc%E5%88%86%E7%B1%BB/">https://tqgoblin.site/post/thuctc分类/</a> <div align=left> Author：<a href="https://www.tqgoblin.site"> Stephen </a> </div></p>]]></content>
      
      
      <categories>
          
          <category> 踩坑之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科学上网</title>
      <link href="/post/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
      <url>/post/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="一、利用Chrome的谷歌助手实现科学上网"><a href="#一、利用Chrome的谷歌助手实现科学上网" class="headerlink" title="一、利用Chrome的谷歌助手实现科学上网"></a>一、利用Chrome的谷歌助手实现科学上网</h1><ol><li>进入Chrome的扩展程序界面</li></ol><div align=center> <img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/blog/kxsw/Snipaste1.png"  width = "70%" height = "70%"  > </div><ol start="2"><li>打开开发者模式</li></ol><div align=center>  <img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/blog/kxsw/Snipaste_2.png" width = "70%" height = "70%"  >  </div><ol start="3"><li>点击 加载已解压的扩展程序</li></ol><div align=center>  <img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/blog/kxsw/Snipaste_3png.png" width = "70%" height = "70%"  >  </div>  <ol start="4"><li>加载谷歌助手</li></ol><div align=center>  <img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/blog/kxsw/Snipaste_4png.png" width = "70%" height = "70%"  >  </div><ol start="5"><li>等待谷歌助手加载完成就能访问了</li></ol><div align=center>  <img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/blog/kxsw/Snipaste_5.png" width = "70%" height = "70%" >  <img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/blog/kxsw/Snipaste_6.png" width = "70%" height = "70%" >  </div>      <blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>软件包:  <strong><a href="/download/google-access-helper-2.3.0.zip">点击下载</a></strong>  (Mac  Win 通用)</p></blockquote><h1 id="二、Lantern代理"><a href="#二、Lantern代理" class="headerlink" title="二、Lantern代理"></a>二、Lantern代理</h1><ul><li>谷歌助手虽然能让我们在谷歌商场下载插件，但如果是访问Youtube等网站就不能满足需求了</li></ul><ul><li>使用 Lantern代理 每月有500MB 免费流量  能满足轻量用户需求<div align=center> <img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/blog/kxsw/Snipaste_8.png" width = "70%" height = "70%"  ></li></ul><img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/blog/kxsw/Snipaste_9.png" width = "70%" height = "70%"  >  </div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>官网地址 <a href="https://getlantern.org/zh_CN/index.html">https://getlantern.org/zh_CN/index.html</a></p></blockquote><h1 id="三、ShadowsocksX"><a href="#三、ShadowsocksX" class="headerlink" title="三、ShadowsocksX"></a>三、ShadowsocksX</h1><ul><li>该软件能实现全局代理，可选服务器多 ，但是收费 🙂</li></ul><img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/blog/kxsw/Snipaste_11.png" width = "70%" height = "70%"  >  <img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/blog/kxsw/Snipaste_12.png" width = "70%" height = "70%"  >  <blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>软件包:  <strong><a href="/download/ShadowsocksX.app.zip">点击下载</a></strong>  (mac 版)</p></blockquote><p>Article link： <a href="https://tqgoblin.site/post/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/">https://tqgoblin.site/post/科学上网/</a> <div align=left> Author：<a href="https://www.tqgoblin.site"> Stephen </a> </div></p>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>private</title>
      <link href="/post/private/"/>
      <url>/post/private/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ccb4466aabf4266348425d879ea782c38f38421544c2ec47bfa60acf54029111">76a95db47c288b0644d34172affb81a3d71f7e0c07e70fbecabc5e9c53ed2236e2ed4fa095521d3cf15b0ce92e5737fe6886aafe39b200e8592d42be37022cf15d4abb62a2d0c2a6ea42e53ef22366b3b428f5627e7a0892ad4bb3f32e5fcc0a6c03e7492e1e3f2ab02f9067e5257f3f28eb1905d0246de263f83f788da66651b7fb4527319e5d8d1cc6c2e18798f2da99de0417809225e031d051cd739ad8325a3ccdc582b9db575ae8476bd062b5324a28092fc844571bc766eb203d9a83c17d4407fc55a9da64c00843b30d4db48bccea27cf83acfe2f5a62b00272fa1a2c556b844af34f215b12cd1967221b3c10a8ab52aa1ce4af28b2820d105536a3810e68bceee21c9f57f98153f534ff0ee91ca19f9928caa0118e017530b2359086af0d5614e7da4c116e51db8f2e8db6bd7c624b464833d648e85c19a906c39dd31d22c7be81943a1a76ebd2ccad52a162c3120fba8f25389a9c351af7bd402cf97d799582d5c6ea1dfa2a97a4fb4bdd9d7e056873c5e4998b016dfe9b6743237162fec60a2bf4082b86abf82dedb5ed87f07bc4cf9310350bd1c8f947c66ef019d6f25df0eaad7990bf7a773ff7abe5d2cf0831614ac6997dee8074d31f0e4bb3b9e978fb1d7d80df894fcbdec0103275c796cac180245f31dcbc19d3871b7f159550ffaa3df98f467b7be88a214662055701b145dc4873c50ec54c89baed7b9c43ec596f6370fcef0878cf70d25a1bb5f058364a277f1d44f980e01d62a88dc69b9e152059097c4799fcd2d42d8c3469e38d544764dc5ddbe59ad379cd64f1e2d5d904d1410acf012c3f7b0d8e9476614fed30cc82f6884b39b4169fc00a5fd164e2d0c352ed259fe8bb593b600409d41a035ed4542943045cf4404d0d8cf10784ea650f258e5e5425691822c20970c791141a7ff99d1194602c3234b78a067c051633a16473b99dce5d57b6cb332f50f480dbedc1fdbce67722e22315283e84baf443521a15e2bbedb275267aef94544dc8b85aca82d1b0793f97881ae1f9620021c15466a4664b1ca0dce7ee170dd31d65f162d2ff0ed545659405b40f0286993ecd7ef5ea14fefd192dc2ce697faddc106d17f5854e33f6896a78317c8569f95edb4735d681bc133c93a0265a862fe556435e87ae08d06eb61477b04c46666f3b55360b4a2eb4b737e766ca01a555e5bc313382c26d803f8333532119a1c0dbdff34bfbb8239d0188b9d3d154c9bd0eec50067a1c880d71f8bacba034c11f1a81ecb5c8ec68cfcf06dd03621580fde53587fe1d3304858ae2547a0dd52baf1ff91acb48df8f8c695e684f72d83528247b0020cab9e504ba4a0a83cdc10123ef2926ca8028d564279ff498de446f0bc6d5ced9524a9435f0852ca8075230b5a45125a08a9b28905dcf621a4b3bb21bb2735d526250f6cbe2cc657526be019c9799067164c5d63cefb82a90f1ad22d7681357182d252102c4fc49b7189590fa17fae2cb85e30a0fdee20b1d8fe6b0ad2846077f138afd29cdb1e26128899e85964e82c182482502c95cbbdd4b86a53a87c722afaf920b2ca8e890051e5999a9e5328589ecfdf54a9d51ba893afd80bd22b8397dc0a95505b6fd9739a7949a0958c2e422023d1cad75268556c5764df3e16f7262d3bc390700f04f92bb3183ff97a8c04253c56e9be80476bf87d3032602361c01efb2d9e2ee9904408537e7b463d56b5ca04834516222ac8b32b73acd112abe520a9cd11ae3c71c3e67c167237a7cbb9557ab3a40842973c1b0e9adf6d7a48a3469cad3cae141e0c652e8007cb832ac817b887d52bdb4f7b6c3aed6df5352dddcdeab772d52f1cfc8bfb624684da8d8f6eee219865477e8fe7e157ca301521093103db688eb2e4cdb6c1a964ebf38dd11f41a0178fb4614b02a4c13a124050dec3d078f9da8e1349009232be1e3577cdd1bf049aa5e86af26221ee5ee566b06f7f92ac64a1af15d93cee12f2f932232e0470b424bcf40ea06173b31badf117cb3636d0856d103ad624d22caaa3921725ca3f0443a1fd31604336de0d31faf10166eb1cc14517abadb671d7a726ea8c5741654e12b6df466a425280f758d92c13b02e176f6180578c3cc2c1b4fa446adb01ff0a705747cc7b81edb813c5339e6d31aab0ac57a4a96567ddbeb06097775b9ea6bc1bd7dd9e4b988decd1b72c6d7da65cb9901a83a53fa56239986478f35dc6f9ec7e1407f934ab5c45a236ca6b6d410a5dff430265329f23dd9a9814f68f66f3920a72f0e099596d98681aaceba5a2fa6208065182844f11329d2454c548b8cdf0d38b08eac7b770c8413821075274f8d1ddc61ca3c8d51c3d86911863869d51efd04bead13bae5be31dbcf48570328ced315f27b34cd43ca93f277b2f0811b81ed6c093ccc08205f5da0c580711dc881b07b0316fe2dffc7d44024a7c9bad0a8ea179421ab7c1adcb9b3f20eb8d11e0e376f5ccc3bd4d0cd385b40a4711247b23d1f6e45454fa204150956cb6ce77063cca2fb7fc6c93accb33313bff9305ed5131fce52318ee310837eca049b8427314ee9f570bde12006150ba49d2a2ba8b84d9feb738555697c4a7f6b4f6ad5887bd6f0a134a180c44e369601b8e4b29cfde71ed578595bbc0140191d4c15ddf59b96bb4c0d30e0c43a0894a4149371a9c284f77fa4fdd9b315edefcdd7a22243e3dfd480348116c3cc811631662721eaf3b404e92cb5e344177a3fd540413a8482c4aedfe656aaab875caefd51fcec9836601820dd8ff0cce97b6927e5e10bf83a01bc8b28674cad7ae5fe4963b1c279625adf92fd8ec3a4be00d1b7b182bd835eb43b4e86969f57d2dbd193231c0bb2226f254142440460c8e15e9a74dba7cae56e671b9eb385232361639c7fcdefd2a788a5893a6143c34eb96009a06a04b867f371311137c2f099334cf9333d47c307227fca5840abaad9bbaca2fe41aeaf30d3378b017d86725430b728515ed20dc64065949536704d88054d3d40c3b23f3f1db130370f11a88b0754514cd4b2440b462e27005dd323ab13c144698ef1fd6b1778b6fcb21011602a3236cdf9ab946e56a7c525e99bec89a4d69d6ebbe60b71a0e0c397a108630678f68e96257104df23c29d41b03361e7df7d0c370cc7f11027ecc195f3f381ccece3bef48b1f9ab05a0de6015fb8c367c2a035838016d2be391d7984a541d19993752d0716416b81213eac47a655e82d11ba863dece5ff76ac494aee0b52f87acdeb075405a0a5353a368c6fe7536107ac7fc88dde87625102b101ab1c78e75f7169a46d7faaf159d7169269920b3c8eb6d69aa4970876e42a32def6ca2d8587f0a36f274b73b125474693579e44b912b65997cd5dc298b48805cf742366e71e1448fb89617abfb972a483b89357237d19d661c839693aa9035e6c1808f9d89774eac5bee36aea237d60e1fe96bfb8d13a02df1db6149fb48d6e7eafb12010ade18d96dbe04710a3a181d7712ebdfe17c6b1d9f4219e3891383fd9461d035bb422e1f068f8a5aee80e46acbba47732e5ee1feadfe703738a30fd23c8195e03b61b019b54189d676eaedb51849df68f87feb05e38133e357097bd902943324690b27c02c88b3d3decb828bf67512be5e611813bc0acc12ddc77bb67e915ce7e6dc874a2bf81ac9937501783f1f3cdb002726f80193ac8d037fb5da44d664491f123cab8303871a208a95b5832fc9aed91d4b3c1cf1eeeabde1a1b6ba1c61dddd3868ac13adccc5f1c6f29752c5fa22ab7ae0c931493f3937836e3fd19a60dd579178ce881961ec3b8509bbe90d6a3b1ccd2acbebcca8b60310ed1959e36d22b9498e7dc21625256aa6e20d0af6588d7e2af304d6eadbb66b2ba4e9c2714749044e5d2</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> private </category>
          
      </categories>
      
      
        <tags>
            
            <tag> private </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jetbrains 全家桶免费用</title>
      <link href="/post/Jetbrains/"/>
      <url>/post/Jetbrains/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Jetbrains软件激活方法"><a href="#Jetbrains软件激活方法" class="headerlink" title="Jetbrains软件激活方法"></a>Jetbrains软件激活方法</h1><h2 id="下载激活包"><a href="#下载激活包" class="headerlink" title="下载激活包"></a>下载激活包</h2><h2 id="启动IDE，如果上来就需要注册，选择：试用（Evaluate-for-free）进入IDE"><a href="#启动IDE，如果上来就需要注册，选择：试用（Evaluate-for-free）进入IDE" class="headerlink" title="启动IDE，如果上来就需要注册，选择：试用（Evaluate for free）进入IDE"></a>启动IDE，如果上来就需要注册，选择：试用（Evaluate for free）进入IDE</h2><h2 id="点击你要注册的IDE菜单：”Configure”-或-“Help”-“Edit-Custom-VM-Options-…”"><a href="#点击你要注册的IDE菜单：”Configure”-或-“Help”-“Edit-Custom-VM-Options-…”" class="headerlink" title="点击你要注册的IDE菜单：”Configure” 或 “Help” -&gt; “Edit Custom VM Options …”"></a>点击你要注册的IDE菜单：”Configure” 或 “Help” -&gt; “Edit Custom VM Options …”</h2><div align=center>  <img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/blog/%08IDE/Snipaste_2019-08-14_20-28-19_1.png" width = "60%" height = "50%"  >  </div>  <h2 id="在打开的vmoptions编辑窗口末行添加：”-javaagent-absolute-path-to-jetbrains-agent-jar”-填写你存放-jetbrains-agent-jar-文件的绝对路径"><a href="#在打开的vmoptions编辑窗口末行添加：”-javaagent-absolute-path-to-jetbrains-agent-jar”-填写你存放-jetbrains-agent-jar-文件的绝对路径" class="headerlink" title="在打开的vmoptions编辑窗口末行添加：”-javaagent:&#x2F;absolute&#x2F;path&#x2F;to&#x2F;jetbrains-agent.jar” (填写你存放 jetbrains-agent.jar 文件的绝对路径)"></a>在打开的vmoptions编辑窗口末行添加：”-javaagent:&#x2F;absolute&#x2F;path&#x2F;to&#x2F;jetbrains-agent.jar” (填写你存放 jetbrains-agent.jar 文件的绝对路径)</h2><div align=center>  <img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/blog/%08IDE/Snipaste_2019-08-14_20-29-30_2.png" width = "60%" height = "50%"  >  </div>   <h2 id="重启IDE。"><a href="#重启IDE。" class="headerlink" title="重启IDE。"></a>重启IDE。</h2><h2 id="点击IDE菜单-“Help”-“Register…”-或-“Configure”-“Manage-License…”"><a href="#点击IDE菜单-“Help”-“Register…”-或-“Configure”-“Manage-License…”" class="headerlink" title="点击IDE菜单 “Help” -&gt; “Register…” 或 “Configure” -&gt; “Manage License…”"></a>点击IDE菜单 “Help” -&gt; “Register…” 或 “Configure” -&gt; “Manage License…”</h2> <div align=center>  <img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/blog/%08IDE/Snipaste_2019-08-14_20-30-02_3.png" width = "60%" height = "50%"  >  </div>   <h2 id="填写激活码"><a href="#填写激活码" class="headerlink" title="填写激活码"></a>填写激活码</h2>  <div align=center>  <img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/blog/%08IDE/Snipaste_2019-08-14_20-30-26_4.png" width = "60%" height = "40%"  >  </div>   <h2 id="激活成功"><a href="#激活成功" class="headerlink" title="激活成功"></a>激活成功</h2><div align=center>  <img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/blog/%08IDE/Snipaste_2019-08-14_20-31-10_5.png" width = "60%" height = "50%"  >  </div>         <div align=center> <img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/blog/%08IDE/Snipaste_2019-08-14_20-31-47_6.png" width = "60%" height = "50%"  > </div><h1 id="激活包下载"><a href="#激活包下载" class="headerlink" title="激活包下载"></a>激活包下载</h1><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>软件包:  <strong><a href="/download/%E6%BF%80%E6%B4%BB%E5%8C%85.zip">点击下载</a></strong>  (Mac  Win 通用)</p></blockquote><p>Article link： <a href="https://tqgoblin.site/post/Jetbrains/">https://tqgoblin.site/post/Jetbrains/</a> <div align=left> Author：<a href="https://www.tqgoblin.site"> Stephen </a> </div></p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring boot 工程访问不到webapp文件下资源</title>
      <link href="/post/spring-boot-bug-webapp/"/>
      <url>/post/spring-boot-bug-webapp/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><pre><code>  当我们用IntelliJ IDEA 启动 springBoot新项目访问webapp下的静态页面时出现404，且没有任何错误的情况下</code></pre><div align=center>     <img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/blog/bug/Snipaste_2019-08-24_15-00-46.png" width = "70%" height = "70%" >     </div><pre><code>解决方案</code></pre><div align=center>     <img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/blog/bug/Snipaste_2019-08-24_15-12-03.png" width = "70%" height = "70%" >     </div>   <div align=center>    <img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/blog/bug/Snipaste_2019-08-24_15-02-23.png" width = "70%" height = "70%" >     </div><p>Article link： <a href="https://tqgoblin.site/post/spring-boot-bug-webapp/">https://tqgoblin.site/post/spring-boot-bug-webapp/</a> <div align=left> Author：<a href="https://www.tqgoblin.site"> Stephen </a> </div></p>]]></content>
      
      
      <categories>
          
          <category> 踩坑之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于freemaker 逆向工程</title>
      <link href="/post/codegenerator/"/>
      <url>/post/codegenerator/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-EZgsfEDD" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="7040507499" data-server="tencent" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="false" data-listmaxheight="340px" data-preload="true" data-theme="#e6d0b2"    ></div>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">public class MysqlUtil &#123;    static &#123;        try &#123;            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);        &#125; catch (ClassNotFoundException e) &#123;            e.printStackTrace();        &#125;    &#125;    &#x2F;&#x2F;获取连接    public static Connection getConnection(Configuration configuration) throws SQLException &#123;        String url &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;&quot;+configuration.getAddress()+&quot;:&quot;+configuration.getPort();        Connection connection &#x3D; null;        connection &#x3D; DriverManager.getConnection(url, configuration.getUserName(), configuration.getPassword());        connection.setAutoCommit(true);        return connection;    &#125;    &#x2F;&#x2F;释放资源    public static void release(Connection connection, Statement statement, ResultSet resultSet) throws SQLException &#123;        if (connection!&#x3D;null)&#123;            connection.close();        &#125;        if (statement!&#x3D;null)&#123;            statement.close();        &#125;        if (resultSet!&#x3D;null)&#123;            resultSet.close();        &#125;    &#125;    &#x2F;&#x2F;执行sql   在控制台中显示所有的数据库名称    public static void executeSqlForShowDatabases(Connection connection,Configuration configuration) throws SQLException &#123;        Statement statement &#x3D; connection.createStatement();        ResultSet resultSet &#x3D; statement.executeQuery(&quot;show databases;&quot;);        Set&lt;String&gt; databases &#x3D; new HashSet&lt;String&gt;();        while (resultSet.next())&#123;            String databaseName &#x3D; resultSet.getString(1);            databases.add(databaseName);            System.out.println(databaseName);        &#125;        configuration.setDatabases(databases);        MysqlUtil.release(null,statement,resultSet);    &#125;    &#x2F;&#x2F;执行sql    显示所有的表名称    public static void executeSqlForShowTables(Connection connection,Configuration configuration) throws SQLException &#123;        Statement statement &#x3D; connection.createStatement();        statement.execute(&quot;use &quot;+configuration.getDatabase());        ResultSet resultSet &#x3D; statement.executeQuery(&quot;show tables&quot;);        Set&lt;String&gt; tables &#x3D; new HashSet&lt;String&gt;();        while (resultSet.next())&#123;            String tableName &#x3D; resultSet.getString(1);            tables.add(tableName);            System.out.println(tableName);        &#125;        MysqlUtil.release(null,statement,resultSet);    &#125;    &#x2F;&#x2F;执行sql   查看表结构  能拿到表的字段 以及字段的数据类型    public static void executeSqlForDescTable(Connection connection,Configuration configuration) throws SQLException &#123;        Statement statement &#x3D; connection.createStatement();        ResultSet resultSet &#x3D; statement.executeQuery(&quot;desc &quot;+configuration.getTable());        Set&lt;ColumnModel&gt; columnModels &#x3D; new HashSet&lt;ColumnModel&gt;();&#x2F;&#x2F;当前这个表中所有的字段及类型        while (resultSet.next())&#123;            String columnName &#x3D; resultSet.getString(1);            String columnType &#x3D; resultSet.getString(2);            ColumnModel columnModel &#x3D; new ColumnModel();            columnModel.setColumnName(columnName);            if (columnType.contains(&quot;varchar&quot;)||columnType.contains(&quot;char&quot;))&#123;                columnModel.setType(&quot;String&quot;);            &#125;else if (columnType.contains(&quot;int&quot;))&#123;                columnModel.setType(&quot;Integer&quot;);            &#125;else if (columnType.contains(&quot;datetime&quot;))&#123;                columnModel.setType(&quot;Date&quot;);            &#125;else if (columnType.contains(&quot;bigint&quot;))&#123;                columnModel.setType(&quot;Long&quot;);            &#125;            columnModels.add(columnModel);&#x2F;&#x2F;            System.out.println(columnName+&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&quot;+columnType);        &#125;        TableModel tableModel &#x3D; new TableModel();        tableModel.setTableName(configuration.getTable());        tableModel.setColumnModels(columnModels);        configuration.setTableModel(tableModel);        MysqlUtil.release(null,statement,resultSet);    &#125;&#125;</code></pre><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>源码:  <strong><a href="/download/codegenerator.zip">点击下载</a></strong> </p></blockquote><p>Article link： <a href="https://tqgoblin.site/post/codegenerator/">https://tqgoblin.site/post/codegenerator/</a> <div align=left> Author：<a href="https://www.tqgoblin.site"> Stephen </a> </div></p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正整数分解质因数</title>
      <link href="/post/%E6%AD%A3%E6%95%B4%E6%95%B0%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0/"/>
      <url>/post/%E6%AD%A3%E6%95%B4%E6%95%B0%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h5 id="将一个正整数分解质因数。例如：输入90，打印出90-2-3-3-5"><a href="#将一个正整数分解质因数。例如：输入90，打印出90-2-3-3-5" class="headerlink" title="将一个正整数分解质因数。例如：输入90，打印出90&#x3D;2*3*3*5"></a>将一个正整数分解质因数。例如：输入90，打印出90&#x3D;2*3*3*5</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">    public class Solution &#123;        public static void main(String[] args) &#123;            Scanner sc &#x3D; new Scanner(System.in);            System.out.println(&quot;请输入要分解的正整数：&quot;);            int n &#x3D; sc.nextInt();            StringBuilder sb &#x3D; new StringBuilder();            sb.append(n + &quot;&#x3D;&quot;);            &#x2F;&#x2F;逻辑是：从2-n中找一个最小的且能被n整除的数k            &#x2F;&#x2F;如果找到了 就用 n&#x2F;k 的商作为新n  继续循环            &#x2F;&#x2F;如果n &#x3D;&#x3D; k 则说明是质数 或者商是质数 就循环结束直接输出            for (int i &#x3D; 2; i &lt; n + 1; i++) &#123;                while (n % i &#x3D;&#x3D; 0 &amp;&amp; n !&#x3D; i) &#123;                    n &#x3D; n &#x2F; i;                    sb.append(i + &quot;*&quot;);                &#125;                    if (n &#x3D;&#x3D; i) &#123;     &#x2F;&#x2F;如果上面的都不能整除说明是个质数                    sb.append(i);                    break;                &#125;            &#125;        System.out.println(sb.toString());    &#125;&#125;</code></pre><p>Article link： <a href="https://tqgoblin.site/post/%E6%AD%A3%E6%95%B4%E6%95%B0%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0/">https://tqgoblin.site/post/正整数分解质因数/</a> <div align=left> Author：<a href="https://www.tqgoblin.site"> Stephen </a> </div></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hannuota</title>
      <link href="/post/Hannuota/"/>
      <url>/post/Hannuota/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="Java-实现-汉诺塔解法"><a href="#Java-实现-汉诺塔解法" class="headerlink" title="Java 实现 汉诺塔解法"></a>Java 实现 汉诺塔解法</h4><p><code>汉诺塔：汉诺塔问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。</code></p><div align=center>  <img src="https://stblogs.oss-cn-chengdu.aliyuncs.com/blog/suanfa/timg.jpeg" width = "70%" height = "70%"  >  </div> <pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Solution &#123;    public static void main(String[] args) &#123;        int n &#x3D; 3;        char from &#x3D; &#39;A&#39;;        char in &#x3D; &#39;B&#39;;        char to &#x3D; &#39;c&#39;;        func(n, from, in, to);    &#125;    private static void func(int n, char from, char in, char to) &#123;        if (n &#x3D;&#x3D; 1) &#123;            System.out.println(&quot;将第&quot; + n + &quot;块从&quot; + from + &quot;移到&quot; + to);            &#x2F;&#x2F; 无论有多少盘子 都看成2个盘子 ， 最后一个盘子和 上面的所有盘子        &#125; else &#123;            &#x2F;&#x2F; 将除最后一个之外的所有的盘子移到  temp位置去            func(n - 1, from, to, in);            &#x2F;&#x2F; 将最后一个盘子移到目标位置            System.out.println(&quot;将第&quot; + n + &quot;块从&quot; + from + &quot;移到&quot; + to);            &#x2F;&#x2F; 再将n-1个盘子从 temp移到目标位置            func(n - 1, in, from, to);        &#125;    &#125;&#125;</code></pre><p>Article link： <a href="https://tqgoblin.site/post/Hannuota/">https://tqgoblin.site/post/Hannuota/</a> <div align=left> Author：<a href="https://www.tqgoblin.site"> Stephen </a> </div></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
