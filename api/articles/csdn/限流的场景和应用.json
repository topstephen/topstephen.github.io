{"title":"限流的场景和应用","uid":"1088266219777eea7a5e1871adc5dc26","slug":"csdn/限流的场景和应用","date":"2023-06-25T07:36:34.000Z","updated":"2025-02-17T01:58:21.581Z","comments":true,"path":"api/articles/csdn/限流的场景和应用.json","keywords":"Stephen web3","cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><span id=\"more\"></span>\n\n<p><strong>目录</strong></p>\n<p><a href=\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\">应用场景</a></p>\n<p><a href=\"#%E5%B8%B8%E8%A7%81%E7%AD%96%E7%95%A5\">常见策略</a></p>\n<p><a href=\"#%E5%B8%B8%E7%94%A8%E6%8A%80%E6%9C%AF\">常用技术</a></p>\n<p><a href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\">代码实现</a></p>\n<p><a href=\"#%E8%AE%A1%E6%95%B0%E5%99%A8\">计数器</a></p>\n<p><a href=\"#%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3\">滑动窗口</a></p>\n<p><a href=\"#%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95\">漏桶算法</a></p>\n<p><a href=\"#%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95\">令牌桶算法</a></p>\n<p><a href=\"#Guava%20RateLimiter\">Guava RateLimiter</a></p>\n<p><a href=\"#%E4%BC%98%E7%BC%BA%E7%82%B9\">优缺点</a></p>\n<p><a href=\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\">应用场景</a></p>\n<p><a href=\"#%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%B0%81%E8%A3%85\">工具类封装</a></p>\n<hr>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>1. 防止流量过大导致系统崩溃:当流量突然增大时,限流可以确保系统不会因为过大的流量导致资源耗尽和系统崩溃。</p>\n<p>2. 防止恶意请求:限流可以用来针对一些恶意请求进行限制,避免这些请求对系统造成损害。</p>\n<p>3. 避免线程池耗尽:当请求很多时,后端的线程池可能会耗尽,导致许多请求得不到响应。加上限流可以避免这种情况的发生。</p>\n<p>4. 防止缓存击穿:当缓存失效时,后端系统会接收大量的请求。限流可以确保后端系统不会因为缓存失效而被打垮。</p>\n<p>5. 控制流量并发度:有些系统会根据自身的处理能力来控制并发度,限流可以起到控制流量和并发度的作用。</p>\n<h2 id=\"常见策略\"><a href=\"#常见策略\" class=\"headerlink\" title=\"常见策略\"></a>常见策略</h2><p>1. 客户端限流:限制客户端向服务器发起请求的频率。可以通过在客户端实现限流算法来实现。</p>\n<p>2. 服务端限流:限制服务器处理请求的频率。可以在服务器上实现限流来达到这个目的。</p>\n<p>3. 应用层限流:在应用层根据业务逻辑对某些请求进行限流。比如限制对重要资源的访问频率。</p>\n<p>4. 网络层限流:在网络设备上进行流量控制,限制到达服务器的请求频率。</p>\n<h2 id=\"常用技术\"><a href=\"#常用技术\" class=\"headerlink\" title=\"常用技术\"></a>常用技术</h2><p>1. 计数器: 使用一个计数器来统计请求数,如果达到阈值则拒绝请求。这是一种简单的限流方式,可以使用 Java 的 AtomicInteger 来实现计数器。</p>\n<p>2. 滑动窗口: 维持一个固定大小的窗口,统计窗口内的请求数,如果达到阈值则拒绝请求。这种方式比简单的计数器更精确,可以使用 Java 的 LinkedBlockingQueue 来实现滑动窗口。</p>\n<p>3. 漏桶算法: 维持一个桶的大小,如果桶满了则拒绝请求,否则放行请求。漏桶的大小控制了限流速率,可以使用 Java 的 Semaphore 来实现漏桶算法。</p>\n<p>4. 令牌桶算法: 定期生成令牌放入桶中,如果桶中有令牌则允许请求并消耗一个令牌,否则拒绝请求。令牌生成的速率控制了限流速率,可以使用 Java 的 ScheduledExecutorService 和 Semaphore 来实现令牌桶算法。</p>\n<p>5. Guava 的 RateLimiter: Google Guava 中的 RateLimiter 实现了令牌桶算法,可以直接使用。它提供简单易用的限流功能,对并发请求有很好的支持。</p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><h4 id=\"计数器\"><a href=\"#计数器\" class=\"headerlink\" title=\"计数器\"></a>计数器</h4><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">boolean</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">limit</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    count</span><span style=\"color: #89DDFF\">++;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">count </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> threshold</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">false;</span><span style=\"color: #BABED8\">  </span><span style=\"color: #676E95; font-style: italic\">// 达到限流阈值,拒绝请求</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">true;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><h4 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h4><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">Deque</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Long</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> window </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ArrayDeque</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">long</span><span style=\"color: #BABED8\"> now </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">currentTimeMillis</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">window</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">now</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">window</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">size</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> windowSize</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">long</span><span style=\"color: #BABED8\"> oldest </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> window</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">pollFirst</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">now </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> oldest </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> interval</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">false;</span><span style=\"color: #BABED8\">  </span><span style=\"color: #676E95; font-style: italic\">// 窗口内请求数达到限流阈值,拒绝请求</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">true;</span><span style=\"color: #BABED8\">  </span></span></code></pre></div><h4 id=\"漏桶算法\"><a href=\"#漏桶算法\" class=\"headerlink\" title=\"漏桶算法\"></a>漏桶算法</h4><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">Semaphore</span><span style=\"color: #BABED8\"> semaphore </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Semaphore</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">bucketSize</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">semaphore</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">tryAcquire</span><span style=\"color: #89DDFF\">())</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">true;</span><span style=\"color: #BABED8\">   </span><span style=\"color: #676E95; font-style: italic\">// 获取令牌成功,放行请求</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">false;</span><span style=\"color: #BABED8\">  </span><span style=\"color: #676E95; font-style: italic\">// 桶中无令牌,拒绝请求</span></span></code></pre></div><h4 id=\"令牌桶算法\"><a href=\"#令牌桶算法\" class=\"headerlink\" title=\"令牌桶算法\"></a>令牌桶算法</h4><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">ScheduledExecutorService</span><span style=\"color: #BABED8\"> scheduled </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> Executors</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">newScheduledThreadPool</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">Semaphore</span><span style=\"color: #BABED8\"> semaphore </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Semaphore</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">scheduled</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">scheduleAtFixedRate</span><span style=\"color: #89DDFF\">(()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">-&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> added </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> Math</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">min</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">bucketSize </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> semaphore</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">availablePermits</span><span style=\"color: #89DDFF\">(),</span><span style=\"color: #BABED8\"> addRate</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    semaphore</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">release</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">added</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\">  </span><span style=\"color: #676E95; font-style: italic\">// 按速率添加令牌</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> TimeUnit</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">SECONDS</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">semaphore</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">tryAcquire</span><span style=\"color: #89DDFF\">())</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">true;</span><span style=\"color: #BABED8\">  </span><span style=\"color: #676E95; font-style: italic\">// 获取令牌成功,放行请求</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">false;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// 桶中无令牌,拒绝请求</span></span></code></pre></div><h4 id=\"Guava-RateLimiter\"><a href=\"#Guava-RateLimiter\" class=\"headerlink\" title=\"Guava RateLimiter\"></a>Guava RateLimiter</h4><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">RateLimiter</span><span style=\"color: #BABED8\"> limiter </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> RateLimiter</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">create</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\">  </span><span style=\"color: #676E95; font-style: italic\">// 每秒 2 个请求  </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">limiter</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">tryAcquire</span><span style=\"color: #89DDFF\">())</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">true;</span><span style=\"color: #BABED8\">  </span><span style=\"color: #676E95; font-style: italic\">// 获取令牌成功,放行请求</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">false;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// 限流,拒绝请求 </span></span></code></pre></div><h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><p>这些限流技术各有优缺点:</p>\n<p>1. 计数器:</p>\n<p>  - 优点:简单易实现</p>\n<p>  - 缺点:不够精确,无法控制速率,窗口大小不可配置</p>\n<p>2. 滑动窗口:</p>\n<p>  - 优点:比计数器更精确,窗口大小可配置</p>\n<p>  - 缺点:实现复杂度高于计数器</p>\n<p>3. 漏桶算法:</p>\n<p>  - 优点:可以限制速率,实现简单</p>\n<p>  - 缺点:不够精确,无法应对突发流量</p>\n<p>4. 令牌桶算法:</p>\n<p>  - 优点:可以限制速率,且能应对突发流量</p>\n<p>  - 缺点:实现较复杂</p>\n<p>5. Guava RateLimiter:</p>\n<p>  - 优点:实现简单,可以限制速率,能应对突发流量</p>\n<p>  - 缺点:速率控制不够灵活,不能实现更复杂的限流策略</p>\n<p>综上,我的推荐是:如果需要一个简单的限流器,使用 Guava RateLimiter。它实现简单,功能足够。如果需要更精确的速率控制或实现更复杂的限流策略,自己实现基于令牌桶算法的限流器。如果对限流精度要求不高,可以使用简单的计数器或滑动窗口。基于应用场景选择合适的限流技术非常重要。没有一种技术适用于所有场景,所以理解每个技术的优缺点很关键。此外,限流还可以从多个 dimensionality 进行</p>\n<p>比如:</p>\n<p>- 对某用户进行限流</p>\n<p>- 对某资源进行限流</p>\n<p>- 基于客户端 IP 进行限流</p>\n<p>- 等等所以在设计一个限流系统时,需要全面考虑到这些因素。</p>\n<h3 id=\"应用场景-1\"><a href=\"#应用场景-1\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p>1. 计数器:</p>\n<p>  - 场景:需要一个简单的限流器,限流精度要求不高。</p>\n<p>  - 例如:限制某资源的访问次数,简单防止窃取资源。</p>\n<p>  - 框架:简单的应用层限流实现</p>\n<p>2. 滑动窗口:</p>\n<p>   - 场景:需要限制一定窗口内的请求次数,且窗口大小可配置。</p>\n<p>   - 例如:限制一定时间窗口内的登录失败次数,以防暴力破解登录。</p>\n<p>   -框架:Nginx 等代理服务器</p>\n<p>3. 漏桶算法:</p>\n<p>  - 场景:需要固定速率地限制请求,可应对一定程度的突发流量。</p>\n<p>  - 例如:限制接口调用的速率,防止流量骤增导致系统超负荷。</p>\n<p>  - 框架:Hystrix 等容错库</p>\n<p>4. 令牌桶算法:</p>\n<p>  - 场景:需要更精确地控制请求通过的速率,并能应对更高的突发流量。</p>\n<p>  - 例如:限制对重要资源的访问速率,保证资源不会因为突发大流量而超负荷。</p>\n<p>  - 框架:Sentinel、Resilience4j 等流控框架</p>\n<p>5. Guava RateLimiter:</p>\n<p>  - 场景:需要一个简单的速率限制器,不需要很精确的速率控制和复杂的限流策略。</p>\n<p>  - 例如:简单限制 API 调用频率,防止占用过多服务器资源。</p>\n<p>  -框架:Google Guava</p>\n<p>除此之外,限流技术在其他产品和框架中也有应用:</p>\n<p>  - AWS WAF:基于速率限制和 web 防火墙限制恶意流量</p>\n<p>  - Nginx 限流模块:基于速率限制和漏桶算法进行限流</p>\n<p>  - Envoy 路由器:基于速率限制和令牌桶算法进行限流</p>\n<p>  - API 网关:对 API 请求进行限流,一般基于速率限制实现</p>\n<p>  - 数据库代理:基于速率限制和漏桶算法限制数据库连接数和查询频率</p>\n<p>  - 缓存代理:基于速率限制和令牌桶算法限制缓存击穿场景下的请求流量</p>\n<p>  - 等等</p>\n<p>可以看到,这些限流技术可以应用于很多场景,但每个技术都有其最适用的场景。在选择限流技术时,需要考虑:</p>\n<p>  - 需要控制的对象(用户、资源等)</p>\n<p>  - 限流精度要求(速率控制是否精确)</p>\n<p>  - 是否需要应对突发流量</p>\n<p>  - 限流策略的复杂度</p>\n<p>  - 等等</p>\n<p>综合考虑这些因素再选择最适合的限流技术。</p>\n<h3 id=\"工具类封装\"><a href=\"#工具类封装\" class=\"headerlink\" title=\"工具类封装\"></a>工具类封装</h3><p>代码包里这个工具类实现了计数器限流、滑动窗口限流、漏桶限流和令牌桶限流四种方式。可以根据需要选择相应的限流方法进行流量控制。这样一个集成多种限流技术的工具类可以很好地应用于不同的限流场景,而不需要每次都自己实现限流算法。</p>\n<p>注意：这里的令牌桶和漏桶的限流是线程数层面的限流，无法用在业务层面做数据限速。</p>\n<p>Article link： <a href=\"https://tqgoblin.site/post/csdn/%E9%99%90%E6%B5%81%E7%9A%84%E5%9C%BA%E6%99%AF%E5%92%8C%E5%BA%94%E7%94%A8/\">https://tqgoblin.site/post/csdn/限流的场景和应用/</a> <div align=left> Author：<a href=\"https://www.tqgoblin.site\"> Stephen </a> </div></p>\n","text":" 目录 应用场景 常见策略 常用技术 代码实现 计数器 滑动窗口 漏桶算法 令牌桶算法 Guava RateLimiter 优缺点 应用场景 工具类封装 应用场...","permalink":"/post/csdn/限流的场景和应用","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"java","slug":"java","count":6,"path":"api/categories/java.json"}],"tags":[{"name":"java","slug":"java","count":2,"path":"api/tags/java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">应用场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">常见策略</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E6%8A%80%E6%9C%AF\"><span class=\"toc-text\">常用技术</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">代码实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E6%95%B0%E5%99%A8\"><span class=\"toc-text\">计数器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3\"><span class=\"toc-text\">滑动窗口</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">漏桶算法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">令牌桶算法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Guava-RateLimiter\"><span class=\"toc-text\">Guava RateLimiter</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">优缺点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-1\"><span class=\"toc-text\">应用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%B0%81%E8%A3%85\"><span class=\"toc-text\">工具类封装</span></a></li></ol></li></ol>","author":{"name":"Stephen","slug":"blog-author","avatar":"../img/logo.png","link":"/","description":"Love and Share","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Golang基础入门","uid":"401056d31ba23a246721cb99d93af09c","slug":"csdn/Golang基础入门","date":"2023-09-13T14:07:24.000Z","updated":"2025-02-17T03:15:46.382Z","comments":true,"path":"api/articles/csdn/Golang基础入门.json","keywords":"Stephen web3","cover":[],"text":" 文章目录 Golang基础入门 0.1 简介 0.2 先决条件 0.3 参考文献 模块一：初识Go 1.1 什么是 Golang？ 1.1.1 Go发展历史 ...","permalink":"/post/csdn/Golang基础入门","photos":[],"count_time":{"symbolsCount":"159k","symbolsTime":"2:25"},"categories":[{"name":"go语言学习","slug":"go语言学习","count":1,"path":"api/categories/go语言学习.json"}],"tags":[{"name":"golang","slug":"golang","count":1,"path":"api/tags/golang.json"}],"author":{"name":"Stephen","slug":"blog-author","avatar":"../img/logo.png","link":"/","description":"Love and Share","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Prometheus监控K8S","uid":"efa52dd3078c52d1c106921316828151","slug":"csdn/Prometheus监控K8S","date":"2023-06-16T15:48:13.000Z","updated":"2025-02-17T01:58:21.578Z","comments":true,"path":"api/articles/csdn/Prometheus监控K8S.json","keywords":"Stephen web3","cover":[],"text":" 目录 一、描述 二、监控流程 三、Kubernetes监控指标 四、使用Prometheus监控k8s 一、描述Cadvisor + node-exporte...","permalink":"/post/csdn/Prometheus监控K8S","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"运维","slug":"运维","count":5,"path":"api/categories/运维.json"}],"tags":[{"name":"kubernetes prometheus","slug":"kubernetes-prometheus","count":1,"path":"api/tags/kubernetes-prometheus.json"}],"author":{"name":"Stephen","slug":"blog-author","avatar":"../img/logo.png","link":"/","description":"Love and Share","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}