{"title":"Hadoop 简介","uid":"1008d683f9094b98f7665efd116e8351","slug":"csdn/Hadoop 简介","date":"2021-02-05T10:11:13.000Z","updated":"2025-02-17T03:38:44.698Z","comments":true,"path":"api/articles/csdn/Hadoop 简介.json","keywords":"Stephen web3","cover":[],"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"1、HDFS\"><a href=\"#1、HDFS\" class=\"headerlink\" title=\"1、HDFS\"></a>1、HDFS</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>HDFS (Hadoop Distributed File System) ，它是一个文件系统，用于存储文件，通过目录树来定位文件；其次，它是分布式的，由很多服务器联合起来实现其功能，集群中的服务器有各自的角色。</p>\n<p>HDFS 的使用场景：适合一次写入，多次读出的场景，且不支持文件的修改。适合用来做数据分析，并不适合用来做网盘应用。</p>\n<h4 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h4><p>优点：</p>\n<p>（ 1 ）高容错性</p>\n<p>        ①数据自动保存多个副本。它通过增加副本的形式，提高容错性。</p>\n<p>        ②某一个副本丢失以后，它可以自动恢复。</p>\n<p>（2）适合处理大数据</p>\n<p>        ①数据规模：能够处理数据规模达到 GB 、 TB 、甚至 PB 级别的数据；</p>\n<p>        ②文件规模：能够处理百万规模以上的文件数量，数量相当之大。</p>\n<p>（3）可构建在廉价机器上，通过多副本机制，提高可靠性。</p>\n<p>缺点：</p>\n<p>（ 1 ）不适合低延时数据访问，比如毫秒级的存储数据，是做不到的。</p>\n<p>（2）无法高效的对大量小文件进行存储。</p>\n<p>①存储大量小文件的话，它会占用 NameNode 大量的内存来存储文件目录和块信息。这</p>\n<p>样是不可取的，因为 NameNode 的内存总是有限的；</p>\n<p>②小文件存储的寻址时间会超过读取时间，它违反了 HDFS 的设计目标。</p>\n<p>（3）不支持并发写入、文件随机修改。</p>\n<p>        ①一个文件只能有一个写，不允许多个线程同时写；</p>\n<p>        ②仅支持数据 append ( 追加 ) ，不支持文件的随机修改。</p>\n<h4 id=\"核心思想\"><a href=\"#核心思想\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h4><p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/3e3489626cf81e49db03530010638314.png\"></p>\n<p>（ 1 ） NameNode (nn) ：就是 Master ， 它是一个主管、管理者。</p>\n<p>①管理 HDFS 的名称空间；</p>\n<p>        ②配置副本策略；</p>\n<p>③管理数据块(Block) 映射信息；</p>\n<p>        ④处理客户端读写请求。</p>\n<p>（2） DataNode ：就是 Slave 。 NameNode 下达命令， DataNode 执行实际的操作。</p>\n<p>        ①存储实际的数据块；</p>\n<p>        ③执行数据块的读&#x2F; 写操作。</p>\n<p>（3） Client ：就是客户端。</p>\n<p>①文件切分。文件上传 HDFS 的时候， Client 将文件切分成一个一个的 Block, 然后进行上传；</p>\n<p>②与 NameNode 交互，获取文件的位置信息；</p>\n<p>③与 DataNode 交互，读取或者写入数据；</p>\n<p>④Client 提供一些命令来管理 HDFS, 比如 NameNode 格式化；</p>\n<p>⑤Client 可以通过一些命令来访问 HDFS ，比如对 HDFS 增删查改操作；</p>\n<p>（4） Secondary NameNode ：并非 NameNode 的热备。当 NameNode 挂掉的时候， 它并不能马上替换 NameNode 并提供服务。</p>\n<p>        ①辅助 NameNode ，分 担其工 作量 ，比如 定期合 并 Fsimage 和 Edits, 并推送给NameNode ；</p>\n<p>        ②在紧急情况下，可辅助恢复 NameNode 。</p>\n<h4 id=\"重点\"><a href=\"#重点\" class=\"headerlink\" title=\"重点\"></a>重点</h4><p>HDFS 中的文件在物理上是分块存储 (Block) ，块的大小可以通过配置参数 ( dfs.blocksize)来规定，默认大小在 Hadoop2.x 版本中是 128M ，老版本中是 64M 。</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/e7a78a8f9cc044131f88ac254943d1e1.png\"></p>\n<p>思考：为什么块的大小不能设置太小，也不能设置太大？</p>\n<p>        (1) HDFS 的块设置太小，会增加寻址时间，程序一直在找块的开始位置；</p>\n<p>        (2)如果块设置的太大，从磁盘传输数据的时间会明显大于定位这个块开始位置所需的时间。导致程序在处理这块数据时，会非常慢。</p>\n<p>总结 : HDFS 块的大小设置主要取决于磁盘传输速率。</p>\n<h3 id=\"2、MapReduce\"><a href=\"#2、MapReduce\" class=\"headerlink\" title=\"2、MapReduce\"></a>2、MapReduce</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>MapReduce是一个分布式运算程序的编程框架，是用户开发“基于Hadoop的数据分析应用”的核心框架<br>MapReduce核心功能是将用户编写的业务逻辑代码和自带默认组件整合成一个完的分布式运算程序，并发运行在一个Hadoop集群上</p>\n<h4 id=\"优缺点-1\"><a href=\"#优缺点-1\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h4><p>优点：</p>\n<p>（1）MapReduce易于编程它简单的实现一些接口，就可以完成一个分布式程序，这个分布式程序可以分布到大量廉价的PC机器上运行。也就是说你写一个分布式程序，跟写一个简单的串行程序是一模一样的。就是因为这个特点使得MapReduce编程变得非常流行。<br>（2）良好的扩展性<br>当你的计算资源不能得到满足的时候，你可以通过简单的增加机器来扩展它的计算能力。</p>\n<p>（3）高容错性<br>MapReduce设计的初衷就是使程序能够部署在廉价的PC机器上，这就要求它具有很高的容错性。比如其中一台机器挂了，它可以把上面的计算任务转移到另外一个节点上运行，不至于这个任务运行失败，而且这个过程不需要人工参与，而完全是由Hadoop内部完成的。<br>（4）适合PB级以上海量数据的离线处理可以实现上千台服务器集群并发工作，提供数据处理能力。</p>\n<p>缺点：</p>\n<p>（1）不擅长实时计算MapReduce无法像MySQL一样，在毫秒或者秒级内返回结果<br>（2）不擅长流式计算<br>流式计算的输入数据是动态的，而MapReduce的输入数据集是静态的，不能动态变化。这是因为MapReduce自身的设计特点决定了数据源必须是静态的不擅长DAG(有向图)计算</p>\n<p>（3）多个应用程序存在依赖关系，后一个应用程序的输入为前一个的输出。在这种情况下，MapReduce并不是不能做，而是使用后，每个MapReduce作业的输出结果都会写入到磁盘，会造成大量的磁盘IO，导致性能非常的低下</p>\n<h4 id=\"核心思想-1\"><a href=\"#核心思想-1\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h4><p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/09ce6526f7615677d28b7aeb753f2811.png\"></p>\n<p>（1 ）分布式的运算程序往往需要分成至少 2 个阶段。</p>\n<p>（2 ）第一个阶段的 MapTask 并发实例，完全并行运行，互不相干。</p>\n<p>（3 ）第二个阶段的 ReduceTask 并发实例互不相干，但是他们的数据依赖于上一个阶段的</p>\n<p>所有 MapTask 并发实例的输出。</p>\n<p>（4 ） MapReduce 编程模型只能包含一个 Map 阶段和一个 Reduce 阶段，如果用户的业务</p>\n<p>逻辑非常复杂，那就只能多个 MapReduce 程序，串行运行。</p>\n<h4 id=\"MapReduce进程\"><a href=\"#MapReduce进程\" class=\"headerlink\" title=\"MapReduce进程\"></a>MapReduce进程</h4><p> <img src=\"https://i-blog.csdnimg.cn/blog_migrate/b24fb2ccc5bc9f2e834f47c46b96fd05.png\"></p>\n<h4 id=\"执行流程\"><a href=\"#执行流程\" class=\"headerlink\" title=\"执行流程\"></a>执行流程</h4><h3 id=\"3、Yarn\"><a href=\"#3、Yarn\" class=\"headerlink\" title=\"3、Yarn\"></a><img src=\"https://i-blog.csdnimg.cn/blog_migrate/a8b3493fe241e4c4b67497fed9d3c804.png\">3、Yarn</h3><h4 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>yarn是一种通用的资源管理系统和调度平台。<br>资源管理系统 ：管理集群内的硬件资源，和程序运行相关，比如内存，CPU等。<br>调度平台：多个程序同时申请计算资源时提供分配，调度的规则（算法）。<br>通用：不仅仅支持MapReduce程序，理论上支持各种计算程序如spark，flink。yarn不关系程序的计算内容，只关心程序所需的资源，在程序申请资源的时候根据调度算法分配资源，计算结束之后回收计算资源。使用yarn作为资源调度平台的计算框架自身需要提供ApplicationMaster来负责计算任务的调度。</p>\n<h4 id=\"优缺点-2\"><a href=\"#优缺点-2\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h4><p>优点</p>\n<p>（1）将资源管理和作业控制分离，减小JobTracker压力</p>\n<p>（2）YARN的设计大大减小了 JobTracker（也就是现在的 ResourceManager）的资源消耗，并且让监测每一个 Job 子任务 (tasks) 状态的程序分布式化了，更安全、更优美。</p>\n<p>（3）老的框架中，JobTracker一个很大的负担就是监控job下的tasks的运行状况，现在，这个部分就扔给ApplicationMaster做了而ResourceManager中有一个模块叫做ApplicationsManager(ASM)，它负责监测ApplicationMaster的运行状况。</p>\n<p>（4）能够支持不同的计算框架</p>\n<p>（5）资源管理更加合理</p>\n<p>（6）使用Container对资源进行抽象，Container不同于MRv1中的slot，它是一个动态资源划分单位，是根据应用程序的需求动态生成的，比之前以slot数目更合理。</p>\n<p>（7）且使用了轻量级资源隔离机制Cgroups进行资源隔离。</p>\n<p>（8）Container的设计避免了之前的map slot&#x2F;reduce slot分开造成集群资源闲置的尴尬情况。</p>\n<p> 缺点：</p>\n<p>（1）各个应用无法感知集群整体资源的使用情况，只能等待上层调度推送信息。</p>\n<p>（2）资源分配采用轮询、ResourceOffer机制（mesos)，在分配过程中使用悲观锁，并发粒度小。</p>\n<p>（3）缺乏一种有效的竞争或优先抢占的机制。</p>\n<p>（4）简化了双层调度器中的全局资源管理器，改为由一个Cell State来记录集群内的资源使用情况，这些使用情况都是共享的数据，以此来达到与全局资源管理器相同的效果。</p>\n<p>（5）所有任务访问共享数据时，采用乐观并发控制方法。</p>\n<h4 id=\"核心思想-2\"><a href=\"#核心思想-2\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h4><p> <img src=\"https://i-blog.csdnimg.cn/blog_migrate/90ca5391069ad249937a3d743e089017.png\"> </p>\n<p>步骤说明：<br>1，客户端向ResourceManager中的ApplicationManager提交作业申请，申请jobID。<br>2，ApplicationManager 返回一个jobID，以及运行的hdfs临时路径(hdfs:&#x2F;&#x2F;… jobID)。<br>3，客户端将作业的jar包，配置信息等上传到分配的hdfs临时路径(hdfs:&#x2F;&#x2F;… jobID)中。<br>4，客户端上传文件成功后，向ApplicationManager发送执行作业请求。<br>5，ApplicationManager将请求转发给Scheduler，申请执行所需资源。<br>6，调度器将作业放置到相关队列中，当执行到该作业时，开始让ApplicationManager分配Containers。<br>7，ApplicationManager命令NodeManager使用分配的container资源启动ApplicationMaster。<br>8，ApplicationMaster启动后去分配的hdfs临时路径(hdfs:&#x2F;&#x2F;… jobID)中读取作业的具体信息，根据分片信息创建map任务，reduce任务。<br>9，ApplicationMaster向Scheduler请求资源来执行map任务，reduce任务。<br>10，Scheduler返回申请结果。<br>11，AppMaster通知NodeManager，启动map，reduce任务。<br>12，NodeManager启动map，reduce任务。<br>13，map，reduce任务读取数据，进行逻辑计算。计算过程中如果有map，reduce任务执行失败了，AppMaster负责重启任务。<br>14，程序执行成功后，AppMaster向Scheduler发送请求，释放资源。</p>\n<p>摘抄部分原文链接：<a href=\"https://blog.csdn.net/weixin/_43172032/article/details/117759068\">https://blog.csdn.net/weixin\\_43172032/article/details/117759068</a> </p>\n<h4 id=\"调度策略\"><a href=\"#调度策略\" class=\"headerlink\" title=\"调度策略\"></a>调度策略</h4><p>  Yarn中有三种资源调度器：<a href=\"https://so.csdn.net/so/search?q=FIFO&spm=1001.2101.3001.7020\" title=\"FIFO\">FIFO</a>调度器（FIFO Scheduler）、容量调度器（Capacity Scheduler）、公平调度器（Fair Scheduler）。</p>\n<p>（1）FIFO调度器</p>\n<p>        <strong>简介：</strong>顾名思义，FIFO调度器把应用放在队列里，按照先进先出的提交顺序执行应用。</p>\n<p>        <strong>优点：</strong>简单，不需要额外配置。</p>\n<p>        <strong>缺点：</strong>不适合共享集群。大应用会占满整个集群的资源，导致小应用长时间等待。</p>\n<p>（2）容量调度器</p>\n<p>**        简介：**容量调度器设有一个专门的队列给小作业使用。</p>\n<p>        <strong>优点：</strong>大作业不会占满全部资源，小作业不需要长时间等待大作业完成。</p>\n<p>        <strong>缺点：</strong>整个集群的资源利用率降低了，大作业需要更长的时间来执行。</p>\n<p>（3）公平调度器</p>\n<p>**        简介：**公平调度器旨在为所有运行的应用公平地分配资源。</p>\n<p>       ** 优点：**同时解决了FIFO大作业占满整个集群资源的问题和Capacity小作业队列空闲导致集群资源利用率降低的问题。</p>\n<p>        <strong>缺点：</strong>存在延迟问题，后面的作业需要等待前面的作业让出资源。</p>\n<p>具体策略介绍请看：<a href=\"https://blog.csdn.net/m0_37795099/article/details/124211350\">https://blog.csdn.net/m0_37795099/article/details/124211350</a></p>\n<h2 id=\"三、Hadoop-生态圈\"><a href=\"#三、Hadoop-生态圈\" class=\"headerlink\" title=\"三、Hadoop 生态圈\"></a>三、Hadoop 生态圈</h2><p>Hadoop 生态圈是指围绕 Hadoop 软件框架为核心而出现的越来越多的相关软件框架，这些软件框架和 Hadoop 框架一起构成了一个生机勃勃的 Hadoop 生态圈。在特定场景下，Hadoop 有时也指代 Hadoop 生态圈。</p>\n<p>Hadoop 生态圈的架构图</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/231d583b9573b77eb6d800befd4082f0.png\"></p>\n<p>Article link： [<a href=\"https://tqgoblin.site/post/csdn/Hadoop\">https://tqgoblin.site/post/csdn/Hadoop</a> 简介&#x2F;](<a href=\"https://tqgoblin.site/post/csdn/Hadoop\">https://tqgoblin.site/post/csdn/Hadoop</a> 简介&#x2F;) <div align=left> Author：<a href=\"https://www.tqgoblin.site\"> Stephen </a> </div></p>\n","text":"1、HDFS定义HDFS (Hadoop Distributed File System) ，它是一个文件系统，用于存储文件，通过目录树来定位文件；其次，它是分...","permalink":"/post/csdn/Hadoop 简介","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"大数据","slug":"大数据","count":4,"path":"api/categories/大数据.json"}],"tags":[{"name":"hadoop","slug":"hadoop","count":2,"path":"api/tags/hadoop.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81HDFS\"><span class=\"toc-text\">1、HDFS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">优缺点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3\"><span class=\"toc-text\">核心思想</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%87%8D%E7%82%B9\"><span class=\"toc-text\">重点</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81MapReduce\"><span class=\"toc-text\">2、MapReduce</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-1\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%BC%BA%E7%82%B9-1\"><span class=\"toc-text\">优缺点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3-1\"><span class=\"toc-text\">核心思想</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#MapReduce%E8%BF%9B%E7%A8%8B\"><span class=\"toc-text\">MapReduce进程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">执行流程</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81Yarn\"><span class=\"toc-text\">3、Yarn</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-2\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%BC%BA%E7%82%B9-2\"><span class=\"toc-text\">优缺点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3-2\"><span class=\"toc-text\">核心思想</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B0%83%E5%BA%A6%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">调度策略</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81Hadoop-%E7%94%9F%E6%80%81%E5%9C%88\"><span class=\"toc-text\">三、Hadoop 生态圈</span></a>","author":{"name":"Stephen","slug":"blog-author","avatar":"../img/logo.png","link":"/","description":"Love and Share","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Hadoop（部署篇）","uid":"f7e86999f1d4e7aaf5b2a2d3ab660579","slug":"csdn/Hadoop（部署篇）","date":"2021-02-05T15:07:30.000Z","updated":"2025-02-17T03:38:44.703Z","comments":true,"path":"api/articles/csdn/Hadoop（部署篇）.json","keywords":"Stephen web3","cover":[],"text":"Hadoop三种运行模式Hadoop 运行模式包括：本地模式、伪分布式模式以及完全分布式模式。 Hadoop 官方网站：http://hadoop.apache...","permalink":"/post/csdn/Hadoop（部署篇）","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"大数据","slug":"大数据","count":4,"path":"api/categories/大数据.json"}],"tags":[{"name":"hadoop","slug":"hadoop","count":2,"path":"api/tags/hadoop.json"}],"author":{"name":"Stephen","slug":"blog-author","avatar":"../img/logo.png","link":"/","description":"Love and Share","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"虚拟机上搭建Linux环境","uid":"ec8e41983198176e48b34bdb3d17a7d0","slug":"csdn/虚拟机上搭建Linux环境","date":"2021-01-10T09:14:25.000Z","updated":"2025-02-17T04:22:34.751Z","comments":true,"path":"api/articles/csdn/虚拟机上搭建Linux环境.json","keywords":"Stephen web3","cover":[],"text":"一、虚拟机环境准备用虚拟机搭建三台linux环境 **1.**虚拟机安装第一步：打开 VMware Workstation 软件，如下图所示： 第二步：单击“*...","permalink":"/post/csdn/虚拟机上搭建Linux环境","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"运维","slug":"运维","count":6,"path":"api/categories/运维.json"}],"tags":[{"name":"linux linux","slug":"linux-linux","count":1,"path":"api/tags/linux-linux.json"}],"author":{"name":"Stephen","slug":"blog-author","avatar":"../img/logo.png","link":"/","description":"Love and Share","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}