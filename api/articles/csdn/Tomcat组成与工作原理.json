{"title":"Tomcat组成与工作原理","uid":"df4a2b3e83ff0d1bcb88dc96e346c071","slug":"csdn/Tomcat组成与工作原理","date":"2021-10-10T14:43:18.000Z","updated":"2025-02-17T04:22:34.841Z","comments":true,"path":"api/articles/csdn/Tomcat组成与工作原理.json","keywords":"Stephen web3","cover":[],"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"什么是tomcat\"><a href=\"#什么是tomcat\" class=\"headerlink\" title=\"什么是tomcat\"></a>什么是tomcat</h3><p>开源的 Java Web 应用服务器，实现了 Java EE(Java Platform Enterprise Edition)的部 分技术规范，比如 Java Servlet、Java Server Page、JSTL、Java WebSocket。Java EE 是 Sun 公 司为企业级应用推出的标准平台，定义了一系列用于企业级开发的技术规范，除了上述的之外，还有 EJB、Java Mail、JPA、JTA、JMS 等，而这些都依赖具体容器的实现。</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/da3f2d4ba99e12b4f9dd1e07271f6b53.png\"></p>\n<p>上图对比了 Java EE 容器的实现情况，Tomcat 和 Jetty 都只提供了 Java Web 容器必需的 Servlet 和 JSP 规范，开发者要想实现其他的功能，需要自己依赖其他开源实现。</p>\n<p>Glassfish 是由 sun 公司推出，Java EE 最新规范出来之后，首先会在 Glassfish 上进行实 现，所以是研究 Java EE 最新技术的首选。</p>\n<p>最常见的情况是使用 Tomcat 作为 Java Web 服务器，使用 Spring 提供的开箱即用的强大的功能，并依赖其他开源库来完成负责的业务功能实现。</p>\n<h3 id=\"Servlet容器\"><a href=\"#Servlet容器\" class=\"headerlink\" title=\"Servlet容器\"></a><strong>Servlet容器</strong></h3><p>Tomcat 组成如下图：主要有 Container 和 Connector 以及相关组件构成。</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/1dda678be67aa64f379e19305834f07f.png\"></p>\n<p><strong>Server：</strong>指的就是整个 Tomcat 服 务器，包含多组服务，负责管理和 启动各个 Service，同时监听 8005 端口发过来的 shutdown 命令，用 于关闭整个容器 ；</p>\n<p><strong>Service：</strong>Tomcat 封装的、对外提 供完整的、基于组件的 web 服务， 包含 Connectors、Container 两个 核心组件，以及多个功能组件，各 个 Service 之间是独立的，但是共享 同一 JVM 的资源 ；</p>\n<p><strong>Connector：</strong>Tomcat 与外部世界的连接器，监听固定端口接收外部请求，传递给 Container，并 将 Container 处理的结果返回给外部；</p>\n<p><strong>Container：</strong>Catalina，Servlet 容器，内部有多层容器组成，用于管理 Servlet 生命周期，调用 servlet 相关方法。</p>\n<p><strong>Loader：</strong>封装了 Java ClassLoader，用于 Container 加载类文件；Realm：</p>\n<p>Tomcat 中为 web 应用程序提供访问认证和角色管理的机制；</p>\n<p><strong>JMX：</strong>Java SE 中定义技术规范，是一个为应用程序、设备、系统等植入管理功能的框架，通过 JMX 可以远程监控 Tomcat 的运行状态；</p>\n<p><strong>Jasper：</strong>Tomcat 的 Jsp 解析引擎，用于将 Jsp 转换成 Java 文件，并编译成 class 文件。Session：负责管理和创建 session，以及 Session 的持久化(可自定义)，支持 session 的集群。</p>\n<p><strong>Pipeline：</strong>在容器中充当管道的作用，管道中可以设置各种 valve(阀门)，请求和响应在经由管 道中各个阀门处理，提供了一种灵活可配置的处理请求和响应的机制</p>\n<p><strong>Naming：</strong>命名服务，JNDI， Java 命名和目录接口，是一组在 Java 应用中访问命名和目录服务的 API。命名服务将名称和对象联系起来，使得我们可以用名称访问对象，目录服务也是一种命名 服务，对象不但有名称，还有属性。Tomcat 中可以使用 JNDI 定义数据源、配置信息，用于开发 与部署的分离。</p>\n<p><strong>Container组成</strong></p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/e68ead9c238fdc4b42163681930576d8.png\"></p>\n<p><strong>Engine：</strong>Servlet 的顶层容器，包含一 个或多个 Host 子容器；</p>\n<p><strong>Host：</strong>虚拟主机，负责 web 应用的部 署和 Context 的创建；</p>\n<p><strong>Context：</strong>Web 应用上下文，包含多个 Wrapper，负责 web 配置的解析、管 理所有的 Web 资源；</p>\n<p><strong>Wrapper：</strong>最底层的容器，是对 Servlet 的封装，负责 Servlet 实例的创 建、执行和销毁。</p>\n<p><strong>生命周期管理</strong></p>\n<p>Tomcat 为了方便管理组件和容器的生命周期，定义了从创建、启动、到停止、销毁共 12 中状态，tomcat 生命周期管理了内部状态变化的规则控制，组件和容器只需实现相应的生命周期 方法即可完成各生命周期内的操作(initInternal、startInternal、stopInternal、 destroyInternal)；</p>\n<p>比如执行初始化操作时，会判断当前状态是否 New，如果不是则抛出生命周期异常；是的 话则设置当前状态为 Initializing，并执行 initInternal 方法，由子类实现，方法执行成功则设置当 前状态为 Initialized，执行失败则设置为 Failed 状态；</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/b3166a3c017c48e80f2a0589de6c6906.png\"></p>\n<p>Tomcat 的生命周期管理引入了事件机制，在组件或容器的生命周期状态发生变化时会通 知事件监听器，监听器通过判断事件的类型来进行相应的操作。</p>\n<p>事件监听器的添加可以在 server.xml 文件中进行配置;上班摸鱼神器：<a href=\"https://www.yoodb.com/slack-off/home.html\">https://www.yoodb.com/slack-off/home.html</a></p>\n<p>Tomcat 各类容器的配置过程就是通过添加 listener 的方式来进行的，从而达到配置逻辑与 容器的解耦。如 EngineConfig、HostConfig、ContextConfig。</p>\n<p><strong>EngineConfig：</strong>主要打印启动和停止日志</p>\n<p><strong>HostConfig：</strong>主要处理部署应用，解析应用 META-INF&#x2F;context.xml 并创建应用的 Context ContextConfig：主要解析并合并 web.xml，扫描应用的各类 web 资源 (filter、servlet、listener)</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/43015c9d66354fd4bc6eb2ffa30656a4.png\"></p>\n<p><strong>Tomcat 的启动过程</strong></p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/0be0c9ec1c2456b5f76b9bdf1e9aa4c3.png\"></p>\n<p>启动从 Tomcat 提供的 start.sh 脚本开始，shell 脚本会调用 Bootstrap 的 main 方法，实际 调用了 Catalina 相应的 load、start 方法。</p>\n<p>load 方法会通过 Digester 进行 config&#x2F;server.xml 的解析，在解析的过程中会根据 xml 中的关系 和配置信息来创建容器，并设置相关的属性。接着 Catalina 会调用 StandardServer 的 init 和 start 方法进行容器的初始化和启动。</p>\n<p>按照 xml 的配置关系，server 的子元素是 service，service 的子元素是顶层容器 Engine，每层容器有持有自己的子容器，而这些元素都实现了生命周期管理 的各个方法，因此就很容易的完成整个容器的启动、关闭等生命周期的管理。</p>\n<p>StandardServer 完成 init 和 start 方法调用后，会一直监听来自 8005 端口(可配置)，如果接收 到 shutdown 命令，则会退出循环监听，执行后续的 stop 和 destroy 方法，完成 Tomcat 容器的 关闭。同时也会调用 JVM 的 Runtime.getRuntime()﴿.addShutdownHook 方法，在虚拟机意外退 出的时候来关闭容器。</p>\n<p>所有容器都是继承自 ContainerBase，基类中封装了容器中的重复工作，负责启动容器相关的组 件 Loader、Logger、Manager、Cluster、Pipeline，启动子容器(线程池并发启动子容器，通过 线程池 submit 多个线程，调用后返回 Future 对象，线程内部启动子容器，接着调用 Future 对象 的 get 方法来等待执行结果)。</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Future</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Void</span><span style=\"color: #89DDFF\">&gt;&gt;</span><span style=\"color: #BABED8\"> results </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ArrayList</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Future</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Void</span><span style=\"color: #89DDFF\">&gt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> children</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">length</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">++)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    results</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">startStopExecutor</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">submit</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">StartChild</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">children</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">])));</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">boolean</span><span style=\"color: #BABED8\"> fail </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">false;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">Future</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\">Void</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> result ：results</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">try</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        result</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">catch</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">Exception</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">e</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        log</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">error</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">sm</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getString</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">containerBase.threadedStartFailed</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">， e</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        fail </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">true;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p><strong>Web 应用的部署方式</strong></p>\n<p>注：catalina.home：安装目录;catalina.base：工作目录;默认值 user.dir</p>\n<ul>\n<li><p>Server.xml 配置 Host 元素，指定 appBase 属性，默认$catalina.base&#x2F;webapps&#x2F;</p>\n</li>\n<li><p>Server.xml 配置 Context 元素，指定 docBase，元素，指定 web 应用的路径</p>\n</li>\n<li><p>自定义配置：在$catalina.base&#x2F;EngineName&#x2F;HostName&#x2F;XXX.xml 配置 Context 元素</p>\n</li>\n</ul>\n<p>HostConfig 监听了 StandardHost 容器的事件，在 start 方法中解析上述配置文件：</p>\n<ul>\n<li><p>扫描 appbase 路径下的所有文件夹和 war 包，解析各个应用的 META-INF&#x2F;context.xml，并 创建 StandardContext，并将 Context 加入到 Host 的子容器中。</p>\n</li>\n<li><p>解析$catalina.base&#x2F;EngineName&#x2F;HostName&#x2F;下的所有 Context 配置，找到相应 web 应 用的位置，解析各个应用的 META-INF&#x2F;context.xml，并创建 StandardContext，并将 Context 加入到 Host 的子容器中。</p>\n</li>\n</ul>\n<p>注：</p>\n<ul>\n<li><p>HostConfig 并没有实际解析 Context.xml，而是在 ContextConfig 中进行的。</p>\n</li>\n<li><p>HostConfig 中会定期检查 watched 资源文件(context.xml 配置文件)</p>\n</li>\n</ul>\n<p>ContextConfig 解析 context.xml 顺序：</p>\n<ul>\n<li><p>先解析全局的配置 config&#x2F;context.xml</p>\n</li>\n<li><p>然后解析 Host 的默认配置 EngineName&#x2F;HostName&#x2F;context.xml.default</p>\n</li>\n<li><p>最后解析应用的 META-INF&#x2F;context.xml</p>\n</li>\n</ul>\n<p>ContextConfig 解析 web.xml 顺序：</p>\n<ul>\n<li><p>先解析全局的配置 config&#x2F;web.xml</p>\n</li>\n<li><p>然后解析 Host 的默认配置 EngineName&#x2F;HostName&#x2F;web.xml.default 接着解析应用的 MEB-INF&#x2F;web.xml</p>\n</li>\n<li><p>扫描应用 WEB-INF&#x2F;lib&#x2F;下的 jar 文件，解析其中的 META-INF&#x2F;web-fragment.xml 最后合并 xml 封装成 WebXml，并设置 Context</p>\n</li>\n</ul>\n<p>注：</p>\n<ul>\n<li><p>扫描 web 应用和 jar 中的注解(Filter、Listener、Servlet)就是上述步骤中进行的。</p>\n</li>\n<li><p>容器的定期执行：backgroundProcess，由 ContainerBase 来实现的，并且只有在顶层容器 中才会开启线程。(backgroundProcessorDelay&#x3D;10 标志位来控制)</p>\n</li>\n</ul>\n<h3 id=\"Servlet生命周期\"><a href=\"#Servlet生命周期\" class=\"headerlink\" title=\"Servlet生命周期\"></a>Servlet生命周期</h3><p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/93fac9977d952409ac3e1a12ddeb0a5a.png\"></p>\n<p>Servlet 是用 Java 编写的服务器端程序。其主要功能在于交互式地浏览和修改数据，生成动态 Web 内容。</p>\n<ol>\n<li><p>请求到达 server 端，server 根据 url 映射到相应的 Servlet</p>\n</li>\n<li><p>判断 Servlet 实例是否存在，不存在则加载和实例化 Servlet 并调用 init 方法</p>\n</li>\n<li><p>Server 分别创建 Request 和 Response 对象，调用 Servlet 实例的 service 方法(service 方法 内部会根据 http 请求方法类型调用相应的 doXXX 方法)</p>\n</li>\n<li><p>doXXX 方法内为业务逻辑实现，从 Request 对象获取请求参数，处理完毕之后将结果通过 response 对象返回给调用方</p>\n</li>\n<li><p>当 Server 不再需要 Servlet 时(一般当 Server 关闭时)，Server 调用 Servlet 的 destroy() 方 法。</p>\n</li>\n</ol>\n<p><strong>load on startup</strong></p>\n<p>当值为 0 或者大于 0 时，表示容器在应用启动时就加载这个 servlet; 当是一个负数时或者没有指定时，则指示容器在该 servlet 被选择时才加载; 正数的值越小，启动该 servlet 的优先级越高;</p>\n<p><strong>single thread model</strong></p>\n<p>每次访问 servlet，新建 servlet 实体对象，但并不能保证线程安全，同时 tomcat 会限制 servlet 的实例数目最佳实践：不要使用该模型，servlet 中不要有全局变量</p>\n<p><strong>请求处理过程</strong>  </p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/9007c16725b774eabbd14d1d6742c5bf.png\"></p>\n<ol>\n<li><p>根据 server.xml 配置的指定的 connector 以及端口监听 http、或者 ajp 请求</p>\n</li>\n<li><p>请求到来时建立连接,解析请求参数,创建 Request 和 Response 对象,调用顶层容器 pipeline 的 invoke 方法</p>\n</li>\n<li><p>容器之间层层调用,最终调用业务 servlet 的 service 方法</p>\n</li>\n<li><p>Connector 将 response 流中的数据写到 socket 中</p>\n</li>\n</ol>\n<p><strong>Pipeline 与 Valve</strong></p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/5e4b9663599dfe39c4c098d1b7d1541d.png\"></p>\n<p>Pipeline 可以理解为现实中的管道,Valve 为管道中的阀门,Request 和 Response 对象在管道中 经过各个阀门的处理和控制。</p>\n<p>每个容器的管道中都有一个必不可少的 basic valve,其他的都是可选的,basic valve 在管道中最 后调用,同时负责调用子容器的第一个 valve。</p>\n<p>Valve 中主要的三个方法:setNext、getNext、invoke;valve 之间的关系是单向链式结构,本身 invoke 方法中会调用下一个 valve 的 invoke 方法。</p>\n<p>各层容器对应的 basic valve 分别是 StandardEngineValve、StandardHostValve、 StandardContextValve、StandardWrapperValve。</p>\n<p><strong>JSP引擎</strong></p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/f1389f5866635a4102fe087d61ffc7bc.png\"></p>\n<p><strong>JSP 生命周期</strong></p>\n<ul>\n<li><p>编译阶段:servlet 容器编译 servlet 源文。上班摸鱼神器：<a href=\"https://www.yoodb.com/slack-off/home.html\">https://www.yoodb.com/slack-off/home.html</a></p>\n</li>\n<li><p>件,生成 servlet 类</p>\n</li>\n<li><p>初始化阶段:加载与 JSP 对应的 servlet 类, 创建其实例,并调用它的初始化方法</p>\n</li>\n<li><p>执行阶段:调用与 JSP 对应的 servlet 实例的 服务方法</p>\n</li>\n<li><p>销毁阶段:调用与 JSP 对应的 servlet 实例的 销毁方法,然后销毁 servlet 实例</p>\n</li>\n</ul>\n<p><strong>JSP元素</strong></p>\n<ul>\n<li><p>代码片段：&lt;% 代码片段 %&gt;</p>\n</li>\n<li><p>JSP声明：&lt;%! declaration; [ declaration; ]+ … %&gt;</p>\n</li>\n<li><p>JSP表达式：&lt;%&#x3D; 表达式 %&gt;</p>\n</li>\n<li><p>JSP注释：&lt;%– 注释 --%&gt;</p>\n</li>\n<li><p>JSP指令：    &lt;%@ directive attribute&#x3D;“value” %&gt;</p>\n</li>\n<li><p>JSP行为：    &lt;jsp:action_name attribute&#x3D;“value” &#x2F;&gt;</p>\n</li>\n<li><p>HTML元素：html&#x2F;head&#x2F;body&#x2F;div&#x2F;p&#x2F;…</p>\n</li>\n<li><p>JSP隐式对象：request、response、out、session、application、config、</p>\n</li>\n<li><p>pageContext、page、Exception</p>\n</li>\n</ul>\n<p><strong>JSP 元素说明</strong></p>\n<ul>\n<li><p>代码片段:包含任意量的 Java 语句、变量、方法或表达式;</p>\n</li>\n<li><p>JSP 声明:一个声明语句可以声明一个或多个变量、方法,供后面的 Java 代码使用;</p>\n</li>\n<li><p>JSP 表达式:输出 Java 表达式的值,String 形式;</p>\n</li>\n<li><p>JSP 注释:为代码作注释以及将某段代码注释掉</p>\n</li>\n<li><p>JSP 指令:用来设置与整个 JSP 页面相关的属性,</p>\n</li>\n<li><p>&lt;%@ page … %&gt;定义页面的依赖属性,比如 language、contentType、errorPage、 isErrorPage、import、isThreadSafe、session 等等</p>\n</li>\n<li><p>&lt;%@ include … %&gt;包含其他的 JSP 文件、HTML 文件或文本文件,是该 JSP 文件的一部分,会 被同时编译执行</p>\n</li>\n<li><p>&lt;%@ taglib … %&gt;引入标签库的定义,可以是自定义标签</p>\n</li>\n<li><p>JSP 行为:jsp:include、jsp:useBean、jsp:setProperty、jsp:getProperty、jsp:forward</p>\n</li>\n</ul>\n<p><strong>Jsp 解析过程</strong></p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/6b0d9b64dc9220581646601d5d9a7ef3.png\"></p>\n<ul>\n<li><p>代码片段:在_jspService()方法内直接输出</p>\n</li>\n<li><p>JSP 声明: 在 servlet 类中进行输出</p>\n</li>\n<li><p>JSP 表达式:在_jspService()方法内直接输出</p>\n</li>\n<li><p>JSP 注释:直接忽略,不输出</p>\n</li>\n<li><p>JSP 指令:根据不同指令进行区分,include:对引入的文件进行解析;page 相关的属性会做为 JSP 的属性,影响的是解析和请求处理时的行为</p>\n</li>\n<li><p>JSP 行为:不同的行为有不同的处理方式,jsp:useBean 为例,会从 pageContext 根据 scope 的 类别获取 bean 对象,如果没有会创建 bean,同时存到相应 scope 的 pageContext 中</p>\n</li>\n<li><p>HTML:在_jspService()方法内直接输出</p>\n</li>\n<li><p>JSP 隐式对象:在_jspService()方法会进行声明,只能在方法中使用;</p>\n</li>\n</ul>\n<p><strong>Connector</strong></p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/431e5d94800f5b3e501ebc51f8da4a85.png\"></p>\n<p>Http:HTTP 是超文本传输协议,是客户端浏览器或其他程序与 Web 服务器之间的应用层通信协议</p>\n<p>AJP:Apache JServ 协议(AJP)是一种二进制协议,专门代理从 Web 服务器到位于后端的应用 程序服务器的入站请求</p>\n<p><strong>阻塞 IO</strong></p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/c5614a5959efe86252e6b42c5217bcd4.png\"></p>\n<p><strong>非阻塞 IO</strong></p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/035256c33ab6585943d3bd747564b8cb.png\"></p>\n<p><strong>IO多路复用</strong></p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/d2de41cb81a0de19fa94f6945bd09209.png\"></p>\n<p>阻塞与非阻塞的区别在于进行读操作和写操作的系统调用时，如果此时内核态没有数据可读或者没有缓冲空间可写时，是否阻塞。</p>\n<p>IO多路复用的好处在于可同时监听多个socket的可读和可写事件，这样就能使得应用可以同时监听多个socket，释放了应用线程资源。</p>\n<h3 id=\"Tomcat各类Connector对比\"><a href=\"#Tomcat各类Connector对比\" class=\"headerlink\" title=\"Tomcat各类Connector对比\"></a>Tomcat各类Connector对比</h3><p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/67d4f2051b0300df58dfe498f3360f9f.png\"></p>\n<p>Connector的实现模式有三种，分别是BIO、NIO、APR，可以在server.xml中指定。</p>\n<ul>\n<li><p>JIO：用java.io编写的TCP模块，阻塞IO</p>\n</li>\n<li><p>NIO：用java.nio编写的TCP模块，非阻塞IO，（IO多路复用）</p>\n</li>\n<li><p>APR：全称Apache Portable Runtime，使用JNI的方式来进行读取文件以及进行网络传输</p>\n</li>\n</ul>\n<p>Apache Portable Runtime是一个高度可移植的库，它是Apache HTTP Server 2.x的核心。APR具有许多用途，包括访问高级IO功能（如sendfile，epoll和OpenSSL），操作系统级功能（随机数生成，系统状态等）和本地进程处理（共享内存，NT管道和Unix套接字）。</p>\n<p>表格中字段含义说明：</p>\n<ul>\n<li><p>Support Polling：是否支持基于IO多路复用的socket事件轮询</p>\n</li>\n<li><p>Polling Size：轮询的最大连接数</p>\n</li>\n<li><p>Wait for next Request：在等待下一个请求时，处理线程是否释放，BIO是没有释放的，所以在keep-alive&#x3D;true的情况下处理的并发连接数有限</p>\n</li>\n<li><p>Read Request Headers：由于request header数据较少，可以由容器提前解析完毕，不需要阻塞</p>\n</li>\n<li><p>Read Request Body：读取request body的数据是应用业务逻辑的事情，同时Servlet的限制，是需要阻塞读取的</p>\n</li>\n<li><p>Write Response：跟读取request body的逻辑类似，同样需要阻塞写</p>\n</li>\n</ul>\n<p><strong>NIO处理相关类</strong></p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/7cb42c38b11630464dc11aebc30efd8a.png\"></p>\n<p>Acceptor线程负责接收连接，调用accept方法阻塞接收建立的连接，并对socket进行封装成PollerEvent，指定注册的事件为op_read，并放入到EventQueue队列中，PollerEvent的run方法逻辑的是将Selector注册到socket的指定事件；</p>\n<p>Poller线程从EventQueue获取PollerEvent，并执行PollerEvent的run方法，调用Selector的select方法，如果有可读的Socket则创建Http11NioProcessor，放入到线程池中执行；</p>\n<p>CoyoteAdapter是Connector到Container的适配器，Http11NioProcessor调用其提供的service方法，内部创建Request和Response对象，并调用最顶层容器的Pipeline中的第一个Valve的invoke方法</p>\n<p>Mapper主要处理http url 到servlet的映射规则的解析，对外提供map方法</p>\n<p><strong>NIO Connector主要参数</strong></p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/2a5de27bae39bf2ae6e2178da014959f.png\"></p>\n<p><strong>Comet</strong></p>\n<p>Comet是一种用于web的推送技术，能使服务器实时地将更新的信息传送到客户端，而无须客户端发出请求</p>\n<p>在WebSocket出来之前，如果不使用comet，只能通过浏览器端轮询Server来模拟实现服务器端推送。</p>\n<p>Comet支持servlet异步处理IO，当连接上数据可读时触发事件，并异步写数据(阻塞)</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/7e8a594de4bbb1fb044e447c07aded5c.png\"></p>\n<p>Tomcat要实现Comet，只需继承HttpServlet同时，实现CometProcessor接口</p>\n<ul>\n<li><p>Begin：新的请求连接接入调用，可进行与Request和Response相关的对象初始化操作，并保存response对象，用于后续写入数据</p>\n</li>\n<li><p>Read：请求连接有数据可读时调用</p>\n</li>\n<li><p>End：当数据可用时，如果读取到文件结束或者response被关闭时则被调用</p>\n</li>\n<li><p>Error：在连接上发生异常时调用，数据读取异常、连接断开、处理异常、socket超时</p>\n</li>\n</ul>\n<p><strong>Note：</strong></p>\n<ul>\n<li><p>Read：在post请求有数据，但在begin事件中没有处理，则会调用read，如果read没有读取数据，在会触发Error回调，关闭socket</p>\n</li>\n<li><p>End：当socket超时，并且response被关闭时也会调用；server被关闭时调用</p>\n</li>\n<li><p>Error：除了socket超时不会关闭socket，其他都会关闭socket</p>\n</li>\n<li><p>End和Error时间触发时应关闭当前comet会话，即调用CometEvent的close方法</p>\n</li>\n<li><p>Note：在事件触发时要做好线程安全的操作</p>\n</li>\n</ul>\n<p><strong>异步Servlet</strong></p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/7ef12f35d212666c4db1c06720b9a292.png\"></p>\n<p>传统流程：</p>\n<ul>\n<li><p>首先，Servlet 接收到请求之后，request数据解析；</p>\n</li>\n<li><p>接着，调用业务接口的某些方法，以完成业务处理；</p>\n</li>\n<li><p>最后，根据处理的结果提交响应，Servlet 线程结束</p>\n</li>\n</ul>\n<p>异步处理流程：</p>\n<ul>\n<li><p>客户端发送一个请求</p>\n</li>\n<li><p>Servlet容器分配一个线程来处理容器中的一个servlet</p>\n</li>\n<li><p>servlet调用request.startAsync()，保存AsyncContext, 然后返回</p>\n</li>\n<li><p>任何方式存在的容器线程都将退出，但是response仍然保持开放</p>\n</li>\n<li><p>业务线程使用保存的AsyncContext来完成响应（线程池）</p>\n</li>\n<li><p>客户端收到响应</p>\n</li>\n</ul>\n<p>Servlet 线程将请求转交给一个异步线程来执行业务处理，线程本身返回至容器，此时 Servlet 还没有生成响应数据，异步线程处理完业务以后，可以直接生成响应数据（异步线程拥有 ServletRequest 和 ServletResponse 对象的引用）</p>\n<p><strong>为什么web应用中支持异步？</strong></p>\n<p>推出异步，主要是针对那些比较耗时的请求：比如一次缓慢的数据库查询，一次外部REST API调用, 或者是其他一些I&#x2F;O密集型操作。这种耗时的请求会很快的耗光Servlet容器的线程池，继而影响可扩展性。</p>\n<p>Note：从客户端的角度来看，request仍然像任何其他的HTTP的request-response交互一样，只是耗费了更长的时间而已</p>\n<p><strong>异步事件监听</strong></p>\n<ul>\n<li><p>onStartAsync：Request调用startAsync方法时触发</p>\n</li>\n<li><p>onComplete：syncContext调用complete方法时触发</p>\n</li>\n<li><p>onError：处理请求的过程出现异常时触发</p>\n</li>\n<li><p>onTimeout：socket超时触发</p>\n</li>\n</ul>\n<p><strong>Note :</strong></p>\n<p>onError&#x2F; onTimeout触发后，会紧接着回调onComplete</p>\n<p>onComplete 执行后，就不可再操作request和response</p>\n<p>Article link： <a href=\"https://tqgoblin.site/post/csdn/Tomcat%E7%BB%84%E6%88%90%E4%B8%8E%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/\">https://tqgoblin.site/post/csdn/Tomcat组成与工作原理/</a> <div align=left> Author：<a href=\"https://www.tqgoblin.site\"> Stephen </a> </div></p>\n","text":"什么是tomcat开源的 Java Web 应用服务器，实现了 Java EE(Java Platform Enterprise Edition)的部 分技术规...","permalink":"/post/csdn/Tomcat组成与工作原理","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"面试","slug":"面试","count":5,"path":"api/categories/面试.json"}],"tags":[{"name":"tomcat java","slug":"tomcat-java","count":1,"path":"api/tags/tomcat-java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFtomcat\"><span class=\"toc-text\">什么是tomcat</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Servlet%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">Servlet容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Servlet%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">Servlet生命周期</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Tomcat%E5%90%84%E7%B1%BBConnector%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">Tomcat各类Connector对比</span></a></li></ol>","author":{"name":"Stephen","slug":"blog-author","avatar":"../img/logo.png","link":"/","description":"Love and Share","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"go语言--区块链学习（一）","uid":"7f7afcc6a1e9fb63345e7b5f7e953c62","slug":"csdn/go语言--区块链学习（一）","date":"2022-01-19T12:21:10.000Z","updated":"2025-02-17T03:38:06.956Z","comments":true,"path":"api/articles/csdn/go语言--区块链学习（一）.json","keywords":"Stephen web3","cover":null,"text":"模块一：密码学1.1 密码介绍1.1.1 为什么要加密 ？ 保护隐私和数据安全：在信息传输过程中，不加密的数据可以被未经授权的人员截获和查看，这可能导致个人隐私...","permalink":"/post/csdn/go语言--区块链学习（一）","photos":[],"count_time":{"symbolsCount":"31k","symbolsTime":"28 mins."},"categories":[{"name":"区块链学习","slug":"区块链学习","count":8,"path":"api/categories/区块链学习.json"}],"tags":[{"name":"golang 区块链 密码学","slug":"golang-区块链-密码学","count":1,"path":"api/tags/golang-区块链-密码学.json"}],"author":{"name":"Stephen","slug":"blog-author","avatar":"../img/logo.png","link":"/","description":"Love and Share","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Golang基础入门","uid":"401056d31ba23a246721cb99d93af09c","slug":"csdn/Golang基础入门","date":"2021-09-13T14:07:24.000Z","updated":"2025-02-17T03:37:04.092Z","comments":true,"path":"api/articles/csdn/Golang基础入门.json","keywords":"Stephen web3","cover":[],"text":"Golang基础入门0.1 简介本篇教程适用于对Golang感兴趣的初学者，也适用于对Golang基础知识点不太熟练的初学者，也适用于对于Golang基础知识点...","permalink":"/post/csdn/Golang基础入门","photos":[],"count_time":{"symbolsCount":"154k","symbolsTime":"2:20"},"categories":[{"name":"go语言学习","slug":"go语言学习","count":1,"path":"api/categories/go语言学习.json"}],"tags":[{"name":"golang","slug":"golang","count":1,"path":"api/tags/golang.json"}],"author":{"name":"Stephen","slug":"blog-author","avatar":"../img/logo.png","link":"/","description":"Love and Share","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}