{"title":"Spark详解","uid":"76e2b6bc5d139da0618aa8a268fb05fa","slug":"csdn/Spark详解","date":"2023-02-06T07:47:39.000Z","updated":"2025-02-17T01:58:21.585Z","comments":true,"path":"api/articles/csdn/Spark详解.json","keywords":"Stephen web3","cover":[],"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><span id=\"more\"></span>\n\n<p><strong>目录</strong></p>\n<p><a href=\"#%E7%AC%AC1%E7%AB%A0%EF%BC%9ASpark%E6%A6%82%E8%BF%B0\">第1章：Spark概述</a></p>\n<p><a href=\"#1.1%20Spark%E6%98%AF%E4%BB%80%E4%B9%88\">1.1 Spark是什么</a></p>\n<p><a href=\"#1.2%20Spark%C2%A0and%C2%A0Hadoop\">1.2 Spark and Hadoop</a></p>\n<p><a href=\"#1.3%20Spark%C2%A0on%20Hadoop\">1.3 Spark on Hadoop</a></p>\n<p><a href=\"#1.4%20Spark%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97\">1.4 Spark核心模块</a></p>\n<p><a href=\"#%E7%AC%AC2%E7%AB%A0%EF%BC%9ASpark%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B\">第2章：Spark快速上手</a></p>\n<p><a href=\"#2.1%20%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE\">2.1 创建Maven项目</a></p>\n<p><a href=\"#2.1.1%20%E5%A2%9E%E5%8A%A0Scala%E6%8F%92%E4%BB%B6\">2.1.1 增加Scala插件</a></p>\n<p><a href=\"#2.1.2%20%E5%A2%9E%E5%8A%A0%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB\">2.1.2 增加依赖关系</a></p>\n<p><a href=\"#2.1.3%20WordCount\">2.1.3 WordCount</a></p>\n<p><a href=\"#2.1.4%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86\">2.1.4 异常处理</a></p>\n<p><a href=\"#%E7%AC%AC3%E7%AB%A0%EF%BC%9ASpark%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83\">第3章：Spark运行环境</a></p>\n<p><a href=\"#3.1%20Local%E6%A8%A1%E5%BC%8F\">3.1 Local模式</a></p>\n<p><a href=\"#3.1.1%20%E4%B8%8A%E4%BC%A0%E5%B9%B6%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6\">3.1.1 上传并解压缩文件</a></p>\n<p><a href=\"#3.1.2%20%E5%90%AF%E5%8A%A8Local%E7%8E%AF%E5%A2%83\">3.1.2 启动Local环境</a></p>\n<p><a href=\"#3.1.3%20%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7\">3.1.3 命令行工具</a></p>\n<p><a href=\"#3.1.4%20%E9%80%80%E5%87%BA%E6%9C%AC%E5%9C%B0%E6%A8%A1%E5%BC%8F\">3.1.4 退出本地模式</a></p>\n<p><a href=\"#3.1.5%20%E6%8F%90%E4%BA%A4%E5%BA%94%E7%94%A8\">3.1.5 提交应用</a></p>\n<p><a href=\"#3.2%20Standalone%E6%A8%A1%E5%BC%8F\">3.2 Standalone模式</a></p>\n<p><a href=\"#3.2.1%20%E4%B8%8A%E4%BC%A0%E5%B9%B6%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6\">3.2.1 上传并解压缩文件</a></p>\n<p><a href=\"#3.2.2%20%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">3.2.2 修改配置文件</a></p>\n<p><a href=\"#3.2.3%20%E5%90%AF%E5%8A%A8%E9%9B%86%E7%BE%A4\">3.2.3 启动集群</a></p>\n<p><a href=\"#3.2.4%20%E6%8F%90%E4%BA%A4%E5%BA%94%E7%94%A8\">3.2.4 提交应用</a></p>\n<p><a href=\"#3.2.5%20%E6%8F%90%E4%BA%A4%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">3.2.5 提交参数说明</a></p>\n<p><a href=\"#3.2.6%20%E9%85%8D%E7%BD%AE%E5%8E%86%E5%8F%B2%E6%9C%8D%E5%8A%A1\">3.2.6 配置历史服务</a></p>\n<p><a href=\"#3.2.7%20%E9%85%8D%E7%BD%AE%E9%AB%98%E5%8F%AF%E7%94%A8%EF%BC%88HA%EF%BC%89\">3.2.7 配置高可用（HA）</a></p>\n<p><a href=\"#3.3%20Yarn%E6%A8%A1%E5%BC%8F\">3.3 Yarn模式</a></p>\n<p><a href=\"#3.3.1%20%E4%B8%8A%E4%BC%A0%E5%B9%B6%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6\">3.3.1 上传并解压缩文件</a></p>\n<p><a href=\"#3.3.2%20%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">3.3.2 修改配置文件</a></p>\n<p><a href=\"#3.3.3%20%E5%90%AF%E5%8A%A8Hadoop%E9%9B%86%E7%BE%A4\">3.3.3 启动Hadoop集群</a></p>\n<p><a href=\"#3.3.4%20%E6%8F%90%E4%BA%A4%E5%BA%94%E7%94%A8\">3.3.4 提交应用</a></p>\n<p><a href=\"#3.3.5%20%E9%85%8D%E7%BD%AE%E5%8E%86%E5%8F%B2%E6%9C%8D%E5%8A%A1%E5%99%A8\">3.3.5 配置历史服务器</a></p>\n<p><a href=\"#%E7%AC%AC4%E7%AB%A0%EF%BC%9ASpark%E8%BF%90%E8%A1%8C%E6%9E%B6%E6%9E%84\">第4章：Spark运行架构</a></p>\n<p><a href=\"#4.1%20%E8%BF%90%E8%A1%8C%E6%9E%B6%E6%9E%84\">4.1 运行架构</a></p>\n<p><a href=\"#4.2%20%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6\">4.2 核心组件</a></p>\n<p><a href=\"#4.2.1%20Driver\">4.2.1 Driver</a></p>\n<p><a href=\"#4.2.2%20Executor\">4.2.2 Executor</a></p>\n<p><a href=\"#4.2.3%20Master&Worker\">4.2.3 Master&amp;Worker</a></p>\n<p><a href=\"#4.2.4%20ApplicationMaster\">4.2.4 ApplicationMaster</a></p>\n<p><a href=\"#4.3%20%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5\">4.3 核心概念</a></p>\n<p><a href=\"#4.3.1%20Executor%E4%B8%8ECore\">4.3.1 Executor与Core</a></p>\n<p><a href=\"#4.3.2%20%E5%B9%B6%E8%A1%8C%E5%BA%A6%EF%BC%88Parallelism%EF%BC%89\">4.3.2 并行度（Parallelism）</a></p>\n<p><a href=\"#4.3.3%20%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE%EF%BC%88DAG%EF%BC%89\">4.3.3 有向无环图（DAG）</a></p>\n<p><a href=\"#4.4%20%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B\">4.4 提交流程</a></p>\n<p><a href=\"#4.4.1%20Yarn%C2%A0Clinet%E6%A8%A1%E5%BC%8F\">4.4.1 Yarn Clinet模式</a></p>\n<p><a href=\"#4.4.2%20Yarn%20Cluster%E6%A8%A1%E5%BC%8F\">4.4.2 Yarn Cluster模式</a></p>\n<p><a href=\"#%E7%AC%AC5%E7%AB%A0%EF%BC%9ASpark%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B\">第5章：Spark核心编程</a></p>\n<p><a href=\"#5.1%20RDD\">5.1 RDD</a></p>\n<p><a href=\"#5.1.1%20%E4%BB%80%E4%B9%88%E6%98%AFRDD\">5.1.1 什么是RDD</a></p>\n<p><a href=\"#5.1.2%20%E6%A0%B8%E5%BF%83%E5%B1%9E%E6%80%A7\">5.1.2 核心属性</a></p>\n<p><a href=\"#5.1.3%20%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86\">5.1.3 执行原理</a></p>\n<p><a href=\"#5.1.4%20%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B\">5.1.4 基础编程</a></p>\n<p><a href=\"#5.2%20%E7%B4%AF%E5%8A%A0%E5%99%A8\">5.2 累加器</a></p>\n<p><a href=\"#5.2.1%20%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\">5.2.1 实现原理</a></p>\n<p><a href=\"#5.2.2%20%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B\">5.2.2 基础编程</a></p>\n<p><a href=\"#5.3%20%E5%B9%BF%E6%92%AD%E5%8F%98%E9%87%8F\">5.3 广播变量</a></p>\n<hr>\n<h2 id=\"第1章：Spark概述\"><a href=\"#第1章：Spark概述\" class=\"headerlink\" title=\"第1章：Spark概述\"></a><strong><strong><strong>第</strong></strong></strong><strong>1</strong><strong><strong><strong>章：Spark概述</strong></strong></strong></h2><h3 id=\"1-1-Spark是什么\"><a href=\"#1-1-Spark是什么\" class=\"headerlink\" title=\"1.1** Spark是什么**\"></a><strong><strong><strong>1</strong></strong></strong><strong>.1</strong>** <strong><strong>Spark是什么</strong></strong>**</h3><p>Spark 是一种基于内存的快速、通用、可扩展的大数据分析计算引擎。</p>\n<h3 id=\"1-2-Sparkand-Hadoop\"><a href=\"#1-2-Sparkand-Hadoop\" class=\"headerlink\" title=\"1.2** Sparkand Hadoop******\"></a><strong><strong><strong>1</strong></strong></strong><strong>.2</strong>** <strong><strong>Spark</strong><strong><strong><strong>and</strong></strong></strong></strong> Hadoop******</h3><p>在之前的学习中，Hadoop的 MapReduce 是大家广为熟知的计算框架，那为什么咱们还要学习新的计算框架 Spark 呢，这里就不得不提到 Spark 和 Hadoop 的关系。</p>\n<p><strong><strong>从时间节点上来看:</strong></strong></p>\n<ul>\n<li>Hadoop</li>\n</ul>\n<ol>\n<li>2006 年 1 月，Doug Cutting 加入 Yahoo，领导 Hadoop 的开发；</li>\n<li>2008 年 1 月，Hadoop 成为 Apache 顶级项目；</li>\n<li>2011 年 1.0 正式发布；</li>\n<li>2012 年 3 月稳定版发布；</li>\n</ol>\n<ol>\n<li><strong><strong>2013 年 10 月发布 2.X (Yarn)版本；</strong></strong></li>\n</ol>\n<ul>\n<li>Spark</li>\n</ul>\n<ol>\n<li>2009 年，Spark 诞生于伯克利大学的 AMPLab 实验室；</li>\n<li>2010 年，伯克利大学正式开源了 Spark 项目；</li>\n<li><strong><strong>2013 年 6 月，Spark 成为了 Apache 基金会下的项目；</strong></strong></li>\n<li>2014 年 2 月，Spark 以飞快的速度成为了 Apache 的顶级项目；</li>\n<li>2015 年至今，Spark 变得火爆，大量的国内公司开始重点部署或者使用Spark；</li>\n</ol>\n<p><strong><strong>从功能上来看:</strong></strong></p>\n<ul>\n<li>Hadoop</li>\n</ul>\n<ol>\n<li>Hadoop 是由java 语言编写的，在分布式服务器集群上存储海量数据并运行分布式分析应用的开源框架；</li>\n<li>作为Hadoop分布式文件系统，HDFS处于Hadoop生态圈的最下层，存储着所有的数据，支持着Hadoop的所有服务。它的理论基础源于Google的TheGoogleFileSystem这篇论文，它是GFS的开源实现。</li>\n<li><strong><strong>MapReduce</strong></strong> 是一种编程模型，Hadoop 根据 Google 的 MapReduce 论文将其实现，作为 Hadoop 的分布式计算模型，是 Hadoop 的核心。基于这个框架，分布式并行程序的编写变得异常简单。综合了 HDFS 的分布式存储和MapReduce 的分布式计算，Hadoop 在处理海量数据时，性能横向扩展变得非常容易。</li>\n<li>HBase是对Google的Bigtable的开源实现，但又和Bigtable存在许多不同之处。HBase是一个基于HDFS的分布式数据库，擅长实时地随机读&#x2F;写超大规模数据集。它也是Hadoop非常重要的组件。</li>\n</ol>\n<ul>\n<li><strong><strong>Spark</strong></strong></li>\n</ul>\n<ol>\n<li>Spark是一种由Scala语言开发的快速、通用、可扩展的<strong><strong>大数据分析引擎</strong></strong>；</li>\n<li>Spark Core中提供了Spark最基础与最核心的功能；</li>\n<li>Spark SQL是Spark用来操作结构化数据的组件。通过Spark SQL，用户可以使用SQL或者Apache Hive版本的SQL方言（HQL）来查询数据。</li>\n<li>Spark Streaming是Spark平台上针对实时数据进行流式计算的组件，提供了丰富的处理数据流的API。</li>\n</ol>\n<p>由上面的信息可以获知，Spark出现的时间相对较晚，并且主要功能主要是用于数据计算，所以其实Spark一直被认为是Hadoop框架的升级版。</p>\n<h3 id=\"1-3-Sparkon-Hadoop\"><a href=\"#1-3-Sparkon-Hadoop\" class=\"headerlink\" title=\"1.3** Sparkon Hadoop**\"></a><strong><strong><strong>1</strong></strong></strong><strong>.3</strong>** <strong><strong>Spark</strong><strong><strong><strong>o</strong></strong></strong><strong>n Hadoop</strong>**</strong></h3><p>Hadoop的MR框架和Spark框架都是数据处理框架，那么我们在使用时如何选择呢？</p>\n<ol>\n<li>Hadoop MapReduce由于其设计初衷并不是为了满足循环迭代式数据流处理，因此在多并行运行的数据可复用场景（如：机器学习、图挖掘算法、交互式数据挖掘算法）中存在诸多计算效率等问题。所以Spark应运而生，Spark就是在传统的MapReduce计算框架的基础上，利用其计算过程的优化，从而大大加快了数据分析、挖掘的运行和读写速度，并将计算单元缩小到更适合并行计算和重复使用的RDD计算模型。</li>\n<li>机器学习中ALS、凸优化梯度下降等。这些都需要基于数据集或者数据集的衍生数据反复查询反复操作。MR这种模式不太合适，即使多MR串行处理，性能和时间也是一个问题。数据的共享依赖于磁盘。另外一种是交互式数据挖掘，MR显然不擅长。而Spark所基于的scala语言恰恰擅长函数的处理。</li>\n<li>Spark是一个分布式数据快速分析项目。它的核心技术是弹性分布式数据集（ResilientDistributedDatasets），提供了比MapReduce丰富的模型，可以快速在内存中对数据集进行多次迭代，来支持复杂的数据挖掘算法和图形计算算法。</li>\n<li><strong><strong>Spark和Hadoop的根本差异是多个作业之间的数据通信问题:Spark多个作业之间数据通信是基于内存，而Hadoop是基于磁盘。</strong></strong></li>\n<li>Spark Task的启动时间快。Spark采用fork线程的方式，而Hadoop采用创建新的进程的方式。</li>\n<li>Spark只有在shuffle的时候将数据写入磁盘，而Hadoop中多个MR作业之间的数据交互都要依赖于磁盘交互。</li>\n<li>Spark的缓存机制比HDFS的缓存机制高效。</li>\n</ol>\n<p>经过上面的比较，我们可以看出在绝大多数的数据计算场景中，Spark确实会比MapReduce更有优势。但是Spark是基于内存的，所以在实际的生产环境中，由于内存的限制，可能会由于内存资源不够导致Job执行失败，此时，MapReduce其实是一个更好的选择，所以Spark并不能完全替代MR。</p>\n<h3 id=\"1-4-Spark核心模块\"><a href=\"#1-4-Spark核心模块\" class=\"headerlink\" title=\"1.4** Spark核心模块**\"></a><strong><strong><strong>1</strong></strong></strong><strong>.4</strong>** <strong><strong>Spark核心模块</strong></strong>**</h3><p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/c7392df504eea7fe3138ac84f32d76f5.png\"></p>\n<ul>\n<li>Spark Core</li>\n</ul>\n<p>Spark Core中提供了Spark最基础与最核心的功能，Spark其他的功能如：Spark SQL，Spark Streaming，GraphX,MLlib都是在Spark Core的基础上进行扩展的。</p>\n<ul>\n<li>Spark SQL</li>\n</ul>\n<p>Spark SQL是Spark用来操作结构化数据的组件。通过Spark SQL，用户可以使用SQL或者Apache Hive版本的SQL方言（HQL）来查询数据。</p>\n<ul>\n<li>Spark Streaming</li>\n</ul>\n<p>Spark Streaming是Spark平台上针对实时数据进行流式计算的组件，提供了丰富的处理数据流的API。</p>\n<ul>\n<li>Spark MLlib</li>\n</ul>\n<p>MLlib是Spark提供的一个机器学习算法库。MLlib不仅提供了模型评估、数据导入等额外的功能，还提供了一些更底层的机器学习原语。</p>\n<ul>\n<li>Spark GraphX</li>\n</ul>\n<p>GraphX是Spark面向图计算提供的框架与算法库。</p>\n<h2 id=\"第2章：Spark快速上手\"><a href=\"#第2章：Spark快速上手\" class=\"headerlink\" title=\"第2章：Spark快速上手\"></a><strong><strong><strong>第</strong></strong></strong><strong>2</strong><strong><strong><strong>章：Spark快速上手</strong></strong></strong></h2><p>在大数据早期的课程中我们已经学习了MapReduce框架的原理及基本使用，并了解了其底层数据处理的实现方式。接下来，就让我们走进Spark的世界，了解一下它是如何带领我们完成数据处理的。</p>\n<h3 id=\"2-1-创建Maven项目\"><a href=\"#2-1-创建Maven项目\" class=\"headerlink\" title=\"2.1 创建Maven项目\"></a><strong><strong><strong>2.1</strong></strong> <strong><strong>创建Maven项目</strong></strong></strong></h3><h4 id=\"2-1-1-增加Scala插件\"><a href=\"#2-1-1-增加Scala插件\" class=\"headerlink\" title=\"2.1.1** 增加Scala插件**\"></a><strong><strong><strong>2</strong></strong></strong><strong>.1.1</strong>** <strong><strong>增加Scala插件</strong></strong>**</h4><p>Spark由Scala语言开发的，所以本课件接下来的开发所使用的语言也为Scala，咱们当前使用的Spark版本为2.4.5，默认采用的Scala编译版本为2.12，所以后续开发时。我们依然采用这个版本。开发前请保证IDEA开发工具中含有Scala开发插件。</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/eb09651d4137b2ba9e9d9db85e4f8627.png\"></p>\n<h4 id=\"2-1-2-增加依赖关系\"><a href=\"#2-1-2-增加依赖关系\" class=\"headerlink\" title=\"2.1.2** 增加依赖关系**\"></a><strong><strong><strong>2</strong></strong></strong><strong>.1.2</strong>** <strong><strong>增加依赖关系</strong></strong>**</h4><p>修改Maven项目中的POM文件，增加Spark框架的依赖关系。本课件基于Spark2.4.5版本，使用时请注意对应版本。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>&lt;dependencies&gt;</p>\n<p>        &lt;!– <a href=\"https://mvnrepository.com/artifact/org.apache.spark/spark-core\">https://mvnrepository.com/artifact/org.apache.spark/spark-core</a> --&gt;</p>\n<p>        &lt;dependency&gt;</p>\n<p>            &lt;groupId&gt;org.apache.spark&lt;&#x2F;groupId&gt;</p>\n<p>            &lt;artifactId&gt;spark-core_2.12&lt;&#x2F;artifactId&gt;</p>\n<p>            &lt;version&gt;2.4.5&lt;&#x2F;version&gt;</p>\n<p>        &lt;&#x2F;dependency&gt;</p>\n<p>    &lt;&#x2F;dependencies&gt;</p>\n<p>    &lt;build&gt;</p>\n<p>        &lt;plugins&gt;</p>\n<p>            &lt;!– 该插件用于将 Scala 代码编译成 class 文件 --&gt;</p>\n<p>            &lt;plugin&gt;</p>\n<p>                &lt;groupId&gt;net.alchim31.maven&lt;&#x2F;groupId&gt;</p>\n<p>                &lt;artifactId&gt;scala-maven-plugin&lt;&#x2F;artifactId&gt;</p>\n<p>                &lt;version&gt;3.2.2&lt;&#x2F;version&gt;</p>\n<p>                &lt;executions&gt;</p>\n<p>                    &lt;execution&gt;</p>\n<p>                        &lt;!– 声明绑定到 maven 的 compile 阶段 --&gt;</p>\n<p>                        &lt;goals&gt;</p>\n<p>                            &lt;goal&gt;testCompile&lt;&#x2F;goal&gt;</p>\n<p>                        &lt;&#x2F;goals&gt;</p>\n<p>                    &lt;&#x2F;execution&gt;</p>\n<p>                &lt;&#x2F;executions&gt;</p>\n<p>            &lt;&#x2F;plugin&gt;</p>\n<p>            &lt;plugin&gt;</p>\n<p>                &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</p>\n<p>                &lt;artifactId&gt;maven-assembly-plugin&lt;&#x2F;artifactId&gt;</p>\n<p>                &lt;version&gt;3.1.0&lt;&#x2F;version&gt;</p>\n<p>                &lt;configuration&gt;</p>\n<p>                    &lt;descriptorRefs&gt;</p>\n<p>                        &lt;descriptorRef&gt;jar-with-dependencies&lt;&#x2F;descriptorRef&gt;</p>\n<p>                    &lt;&#x2F;descriptorRefs&gt;</p>\n<p>                &lt;&#x2F;configuration&gt;</p>\n<p>                &lt;executions&gt;</p>\n<p>                    &lt;execution&gt;</p>\n<p>                        &lt;id&gt;make-assembly&lt;&#x2F;id&gt;</p>\n<p>                        &lt;phase&gt;package&lt;&#x2F;phase&gt;</p>\n<p>                        &lt;goals&gt;</p>\n<p>                            &lt;goal&gt;single&lt;&#x2F;goal&gt;</p>\n<p>                        &lt;&#x2F;goals&gt;</p>\n<p>                    &lt;&#x2F;execution&gt;</p>\n<p>                &lt;&#x2F;executions&gt;</p>\n<p>            &lt;&#x2F;plugin&gt;</p>\n<p>        &lt;&#x2F;plugins&gt;</p>\n<p>    &lt;&#x2F;build&gt;</p></blockquote>\n<h4 id=\"2-1-3-WordCount\"><a href=\"#2-1-3-WordCount\" class=\"headerlink\" title=\"2.1.3 WordCount****\"></a><strong><strong><strong>2</strong></strong></strong><strong>.1.3 WordCount</strong>****</h4><p>为了能直观地感受Spark框架的效果，接下来我们实现一个大数据学科中最常见的教学案例WordCount。</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">/**</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> * spark实现单词计数</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> */</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">object</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">WordCountSpark</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #89DDFF\">def</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">main</span><span style=\"color: #BABED8\">(</span><span style=\"color: #BABED8; font-style: italic\">args</span><span style=\"color: #BABED8\">: </span><span style=\"color: #FFCB6B\">Array</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">])</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Unit</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #676E95; font-style: italic\">//创建spark运行配置对象</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> spark</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SparkConf</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SparkConf</span><span style=\"color: #BABED8\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      .setMaster(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">local[*]</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      .setAppName(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">WordCountSparkApps</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #676E95; font-style: italic\">//创建spark上下文对象</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> sc</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SparkContext</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SparkContext</span><span style=\"color: #BABED8\">(spark)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #676E95; font-style: italic\">//读文件数据</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> wordsRDD</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.textFile(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">data/word.txt</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #676E95; font-style: italic\">//讲文件中的数据进行分词</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> word</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> wordsRDD.flatMap(_.split(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">,</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #676E95; font-style: italic\">//转换数据结构word ----&gt;(word,1)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> word2</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[(</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">)] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> word.map((_, </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #676E95; font-style: italic\">//将转换结构后的数据按照相同的单词进行分组聚合</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> word2CountRDD</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[(</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">)] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> word2.reduceByKey(_ </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> _)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #676E95; font-style: italic\">//将数据聚合结果采集到内存中</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> word2Count</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Array</span><span style=\"color: #BABED8\">[(</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">)] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> word2CountRDD.collect()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #676E95; font-style: italic\">//打印结果</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    word2Count.foreach(println)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #676E95; font-style: italic\">//关闭spark连接</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    sc.stop()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>执行过程中，会产生大量的执行日志，如果为了能够更好的查看程序的执行结果，可以在项目的resources目录中创建log4j.properties文件，并添加日志配置信息：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>log4j.rootCategory&#x3D;ERROR, console</p>\n<p>log4j.appender.console&#x3D;org.apache.log4j.ConsoleAppender</p>\n<p>log4j.appender.console.target&#x3D;System.err</p>\n<p>log4j.appender.console.layout&#x3D;org.apache.log4j.PatternLayout</p>\n<p>log4j.appender.console.layout.ConversionPattern&#x3D;%d{yy&#x2F;MM&#x2F;dd</p>\n<p>HH:mm:ss} %p %c{1}: %m%n</p>\n<p># Set the default spark-shell log level to ERROR. When running the spark-shell,</p>\n<p>the</p>\n<p># log level for this class is used to overwrite the root logger’s log level, so</p>\n<p>that</p>\n<p># the user can have different defaults for the shell and regular Spark apps.</p>\n<p>log4j.logger.org.apache.spark.repl.Main&#x3D;ERROR</p>\n<p># Settings to quiet third party logs that are too verbose</p>\n<p>log4j.logger.org.spark_project.jetty&#x3D;ERROR</p>\n<p>log4j.logger.org.spark_project.jetty.util.component.AbstractLifeCycle&#x3D;ERROR</p>\n<p>log4j.logger.org.apache.spark.repl.SparkIMain$exprTyper&#x3D;ERROR</p>\n<p>log4j.logger.org.apache.spark.repl.SparkILoop$SparkILoopInterpreter&#x3D;ERROR</p>\n<p>log4j.logger.org.apache.parquet&#x3D;ERROR</p>\n<p>log4j.logger.parquet&#x3D;ERROR</p>\n<p># SPARK-9183: Settings to avoid annoying messages when looking up nonexistent</p>\n<p>UDFs in SparkSQL with Hive support</p>\n<p>log4j.logger.org.apache.hadoop.hive.metastore.RetryingHMSHandler&#x3D;FATAL</p>\n<p>log4j.logger.org.apache.hadoop.hive.ql.exec.FunctionRegistry&#x3D;ERROR</p></blockquote>\n<h4 id=\"2-1-4-异常处理\"><a href=\"#2-1-4-异常处理\" class=\"headerlink\" title=\"2.1.4** 异常处理**\"></a><strong><strong><strong>2</strong></strong></strong><strong>.1.4</strong>** <strong><strong>异常处理</strong></strong>**</h4><p>如果本机操作系统是Windows，在程序中使用了Hadoop相关的东西，比如写入文件到HDFS，则会遇到如下异常：</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/0058f6ec5e8796ceac2d7c067a130302.png\"></p>\n<p> 出现这个问题的原因，并不是程序的错误，而是windows系统用到了hadoop相关的服务，解决办法是通过配置关联到windows的系统依赖就可以了。</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/029aa3d779415b30e148c1755526592d.png\"></p>\n<p>在IDEA中配置RunConfiguration，添加HADOOP_HOME变量或者在windows上配置环境变量：</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/3c4ebb90cd2586b70e8263c6db518741.png\"></p>\n<h2 id=\"第3章：Spark运行环境\"><a href=\"#第3章：Spark运行环境\" class=\"headerlink\" title=\"第3章：Spark运行环境\"></a><strong><strong><strong>第</strong></strong></strong><strong>3</strong><strong><strong><strong>章：Spark运行环境</strong></strong></strong></h2><p>Spark作为一个数据处理框架和计算引擎，被设计在所有常见的集群环境中运行, 在国内工作中主流的环境为Yarn，不过逐渐容器式环境也慢慢流行起来。接下来，我们就分别看看不同环境下Spark的运行。</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/38e9ec5fe0a81a7c4030753cfc8f557d.png\"></p>\n<h3 id=\"3-1-Local模式\"><a href=\"#3-1-Local模式\" class=\"headerlink\" title=\"3.1 Local模式\"></a><strong><strong><strong>3.1</strong></strong> <strong><strong>Local模式</strong></strong></strong></h3><p>所谓的Local模式，就是不需要其他任何节点资源就可以在本地执行 Spark 代码的环境，一般用于教学，调试，演示等，之前在IDEA中运行代码的环境我们称之为开发环境，不太一样。</p>\n<h4 id=\"3-1-1-上传并解压缩文件\"><a href=\"#3-1-1-上传并解压缩文件\" class=\"headerlink\" title=\"3.1.1 上传并解压缩文件\"></a><strong><strong><strong>3.1.1</strong></strong> <strong><strong>上传并解压缩文件</strong></strong></strong></h4><p>将spark-2.4.5-bin-hadoop2.6.tgz文件上传到Linux并解压缩，放置在指定位置，路径中不要包含中文或空格。</p>\n<p>（1）上传文件至&#x2F;usr&#x2F;local&#x2F;packages中：</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/ff9243e8cf1013c172770ea999c46389.png\"></p>\n<p>（2）解压缩到指定目录：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[root@master local]# tar -zxvf spark-2.4.5-bin-hadoop2.6.tgz -C &#x2F;usr&#x2F;local&#x2F;soft&#x2F;</p></blockquote>\n<p>（3）重命名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[root@master soft]# mv spark-2.4.5-bin-hadoop2.6&#x2F; spark-local</p></blockquote>\n<h4 id=\"3-1-2-启动Local环境\"><a href=\"#3-1-2-启动Local环境\" class=\"headerlink\" title=\"3.1.2 启动Local环境\"></a><strong><strong><strong>3.1.2</strong></strong> <strong><strong>启动Local环境</strong></strong></strong></h4><p>（1）进入解压缩（spark-local）目录，执行以下命令：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[root@master spark-local]# bin&#x2F;spark-shell</p></blockquote>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/f0797f802fe362c0615140932f3142a6.png\"></p>\n<p>（2）启动成功后，可以输入网址进行Web UI监控页面访问：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"http://master:4040/\">http://master:4040</a></p></blockquote>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/001e4fd404b9b7dc8270fa0433b3e92a.png\"></p>\n<h4 id=\"3-1-3-命令行工具\"><a href=\"#3-1-3-命令行工具\" class=\"headerlink\" title=\"3.1.3** 命令行工具**\"></a><strong><strong><strong>3</strong></strong></strong><strong>.1.3</strong>** <strong><strong>命令行工具</strong></strong>**</h4><p>在解压缩文件夹（spark-local）下的data目录中，添加word.txt文件。在命令行工具中执行如下代码指令（和IDEA中代码简化版一致）。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>sc.textFile(“data&#x2F;word.txt”).flatMap(_.split(“,”)).map((_,1)).reduceByKey(_+_).collect</p></blockquote>\n<h4 id=\"3-1-4-退出本地模式\"><a href=\"#3-1-4-退出本地模式\" class=\"headerlink\" title=\"3.1.4** 退出本地模式**\"></a><strong><strong><strong>3</strong></strong></strong><strong>.1.4</strong>** <strong><strong>退出本地模式</strong></strong>**</h4><p>按键Ctrl+C或输入Scala指令：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>scala&gt; :quit</p></blockquote>\n<h4 id=\"3-1-5-提交应用\"><a href=\"#3-1-5-提交应用\" class=\"headerlink\" title=\"3.1.5** 提交应用**\"></a><strong><strong><strong>3</strong></strong></strong><strong>.1.5</strong>** <strong><strong>提交应用</strong></strong>**</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>bin&#x2F;spark-submit \\</p>\n<p>--class org.apache.spark.examples.SparkPi \\</p>\n<p>--master local[1] \\</p>\n<p>.&#x2F;examples&#x2F;jars&#x2F;spark-examples_2.11-2.4.5.jar \\</p>\n<p>10</p></blockquote>\n<p>参数解释：</p>\n<p>（1）–class表示要执行程序的主类，此处可以更换为我们自己写的应用程序</p>\n<p>（2）–master local[2]部署模式，默认为本地模式，数字表示分配的虚拟CPU核数量</p>\n<p>（3）spark-examples_2.11-2.4.5.jar运行的应用类所在的jar包，实际使用时，可以设定为我们自己打的jar包</p>\n<p>（4）数字10表示程序的入口参数，用于设定当前应用的任务数量</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/25a7e170f88daed2f23b7e68815b4caa.png\"></p>\n<h3 id=\"3-2-Standalone模式\"><a href=\"#3-2-Standalone模式\" class=\"headerlink\" title=\"3.2** Standalone模式**\"></a><strong><strong><strong>3</strong></strong></strong><strong>.2</strong>** <strong><strong>Standalone模式</strong></strong>**</h3><p>local本地模式毕竟只是用来进行练习演示的，真实工作中还是要将应用提交到对应的集群中去执行，这里我们来看看只使用Spark自身节点运行的集群模式，也就是我们所谓的独立部署（Standalone）模式。Spark的Standalone模式体现了经典的master-slave模式。集群规划:</p>\n<table align=\"center\" border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"background-color:#a5a5a5;width:103.7pt;\"><p style=\"margin-left:.0001pt;text-align:left;\"></p></td><td style=\"background-color:#a5a5a5;width:103.7pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">master</p></td><td style=\"background-color:#a5a5a5;width:103.7pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">node1</p></td><td style=\"background-color:#a5a5a5;width:103.7pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">node2</p></td></tr><tr><td style=\"vertical-align:top;width:103.7pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">Spark</p></td><td style=\"vertical-align:top;width:103.7pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">Worker&nbsp;Master</p></td><td style=\"vertical-align:top;width:103.7pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">Worker</p></td><td style=\"vertical-align:top;width:103.7pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">Worker</p></td></tr></tbody></table>\n\n<h4 id=\"3-2-1-上传并解压缩文件\"><a href=\"#3-2-1-上传并解压缩文件\" class=\"headerlink\" title=\"3.2.1** 上传并解压缩文件**\"></a><strong><strong><strong>3</strong></strong></strong><strong>.2.1</strong>** <strong><strong>上传并解压缩文件</strong></strong>**</h4><p>将spark-2.4.5-bin-hadoop2.6.tgz文件上传到Linux并解压缩，放置在指定位置，路径中不要包含中文或空格。</p>\n<p>（1）上传文件至&#x2F;usr&#x2F;local&#x2F;packages中：</p>\n<p>（2）解压缩到指定目录：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[root@master local]# tar -zxvf spark-2.4.5-bin-hadoop2.6.tgz -C &#x2F;usr&#x2F;local&#x2F;soft&#x2F;</p></blockquote>\n<p>（3）重命名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[root@master soft]# mv spark-2.4.5-bin-hadoop2.6&#x2F; spark-standalone</p></blockquote>\n<h4 id=\"3-2-2-修改配置文件\"><a href=\"#3-2-2-修改配置文件\" class=\"headerlink\" title=\"3.2.2** 修改配置文件**\"></a><strong><strong><strong>3</strong></strong></strong><strong>.2.2</strong>** <strong><strong>修改配置文件</strong></strong>**</h4><p>（1）进入解压缩路径（spark-standalone）的conf目录，修改slaves.template文件名为slaves：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[root@master conf]# mv slaves.template slaves</p></blockquote>\n<p>（2）修改slaves文件，添加work节点：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[root@master conf]# vim slaves</p>\n<p>master</p>\n<p>node1</p>\n<p>node2</p></blockquote>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/fd05ac4cf114b40f843cc6f30bb9d440.png\">  </p>\n<p>（3）修改spark-env.sh.template文件名为spark-env.sh：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[root@master conf]# mv spark-env.sh.template spark-env.sh</p></blockquote>\n<p>（4）修改spark-env.sh文件，添加JAVA_HOME环境变量和集群对应的master节点：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[root@master conf]# vim spark-env.sh</p>\n<p>export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;soft&#x2F;jdk1.8.0_171</p>\n<p>PARK_MASTER_HOST&#x3D;master</p>\n<p>SPARK_MASTER_PORT&#x3D;7077</p></blockquote>\n<p><strong><strong>注意：7077端口，相当于hadoop3内部通信的8020端口，此处的端口需要确认自己的Hadoop配置。</strong></strong></p>\n<p>（5）分发spark-standalone目录</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[root@master soft]# scp -r spark-standalone&#x2F; node1:`pwd`</p>\n<p>[root@master soft]# scp -r spark-standalone&#x2F; node2:`pwd`</p></blockquote>\n<h4 id=\"3-2-3-启动集群\"><a href=\"#3-2-3-启动集群\" class=\"headerlink\" title=\"3.2.3** 启动集群**\"></a><strong><strong><strong>3</strong></strong></strong><strong>.2.3</strong>** <strong><strong>启动集群</strong></strong>**</h4><p>（1）执行以下命令：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[root@master spark-standalone]# sbin&#x2F;start-all.sh</p></blockquote>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/7ae35effa0851ab9051c4813bc8210b1.png\"></p>\n<p>（2）查看三台服务器运行进程</p>\n<p>master：</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/69d2ef20359e86878aaad927e1079cc6.png\"></p>\n<p>node1：</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/ec244f25f912dc2e4f9018c36bd7b9a2.png\"></p>\n<p>node2：</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/927cc5b72e8931eaeac3a92c870fbf83.png\"></p>\n<p>（3）查看Master资源监控Web UI界面:<a href=\"http://master:8080/\">http://master:8080</a></p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/6c33ade43a7d7dc754d7cb9eed70cdaf.png\"></p>\n<h4 id=\"3-2-4-提交应用\"><a href=\"#3-2-4-提交应用\" class=\"headerlink\" title=\"3.2.4** 提交应用**\"></a><strong><strong><strong>3</strong></strong></strong><strong>.2.4</strong>** <strong><strong>提交应用</strong></strong>**</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>bin&#x2F;spark-submit \\</p>\n<p>--class org.apache.spark.examples.SparkPi \\</p>\n<p>--master spark:&#x2F;&#x2F;master:7077 \\</p>\n<p>.&#x2F;examples&#x2F;jars&#x2F;spark-examples_2.11-2.4.5.jar \\</p>\n<p>10</p></blockquote>\n<p>参数解释：</p>\n<p>（1）–class 表示要执行程序的主类</p>\n<p>（2）–master spark:&#x2F;&#x2F;master:7077 独立部署模式，连接到Spark集群</p>\n<p>（3）spark-examples_2.11-2.4.5.jar运行类所在的jar包</p>\n<p>（4）数字10表示程序的入口参数，用于设定当前应用的任务数量</p>\n<p>执行任务时，会产生多个 Java 进程：</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/e8df75239090bcc781c7c99f493783aa.png\"></p>\n<p>执行任务时，默认采用服务器集群节点的总核数，每个节点内存1024M。</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/73b672f7c2410c34bf7d7bca294c2609.png\"></p>\n<h4 id=\"3-2-5-提交参数说明\"><a href=\"#3-2-5-提交参数说明\" class=\"headerlink\" title=\"3.2.5** 提交参数说明**\"></a><strong><strong><strong>3</strong></strong></strong><strong>.2.5</strong>** <strong><strong>提交参数说明</strong></strong>**</h4><p>在提交应用中，一般会同时一些提交参数</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>bin&#x2F;spark-submit \\</p>\n<p>--class &lt;main-class&gt;</p>\n<p>--master &lt;master-url&gt; \\</p>\n<p>… # other options</p>\n<p>&lt;application-jar&gt; \\</p>\n<p>[application-arguments]</p></blockquote>\n<table align=\"center\" border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"background-color:#4472c4;width:113.15pt;\"><p style=\"margin-left:.0001pt;text-align:center;\">参数</p></td><td style=\"background-color:#4472c4;width:163.35pt;\"><p style=\"margin-left:.0001pt;text-align:center;\">解释</p></td><td style=\"background-color:#4472c4;width:138.3pt;\"><p style=\"margin-left:.0001pt;text-align:center;\">可选值举例</p></td></tr><tr><td style=\"width:113.15pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">--class</p></td><td style=\"vertical-align:top;width:163.35pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">Spark程序中包含主函数的类</p></td><td style=\"width:138.3pt;\"><p style=\"margin-left:.0001pt;text-align:left;\"></p></td></tr><tr><td style=\"width:113.15pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">--master</p></td><td style=\"vertical-align:top;width:163.35pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">Spark程序运行的模式(环境)</p></td><td style=\"width:138.3pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">模式：local[*]、spark://master:7077、Yarn</p></td></tr><tr><td style=\"width:113.15pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">--executor-memory 1G</p></td><td style=\"vertical-align:top;width:163.35pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">指定每个executor可用内存为1G</p></td><td rowspan=\"5\" style=\"width:138.3pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">符合集群内存配置即可，具体情况具体分析。</p></td></tr><tr><td style=\"width:113.15pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">--total-executor-cores 2</p></td><td style=\"vertical-align:top;width:163.35pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">指定所有executor使用的cpu核数为2个</p></td></tr><tr><td style=\"width:113.15pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">--executor-cores</p></td><td style=\"vertical-align:top;width:163.35pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">指定每个executor使用的cpu核数</p></td></tr><tr><td style=\"width:113.15pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">application-jar</p></td><td style=\"vertical-align:top;width:163.35pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">打包好的应用jar，包含依赖。这个URL在集群中全局可见。比如 hdfs://共享存储系统，如果是file://path，那么所有的节点的path都包含同样的jar</p></td></tr><tr><td style=\"width:113.15pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">application-arguments</p></td><td style=\"vertical-align:top;width:163.35pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">传给main()方法的参数</p></td></tr></tbody></table>\n\n<h4 id=\"3-2-6-配置历史服务\"><a href=\"#3-2-6-配置历史服务\" class=\"headerlink\" title=\"3.2.6** 配置历史服务**\"></a><strong><strong><strong>3</strong></strong></strong><strong>.2.6</strong>** <strong><strong>配置历史服务</strong></strong>**</h4><p>由于spark-shell停止掉后，集群监控master:4040页面就看不到历史任务的运行情况，所以开发时都配置历史服务器记录任务运行情况。</p>\n<p>（1）修改spark-defaults.conf.template文件名为spark-defaults.conf</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[root@master conf]# mv spark-defaults.conf.template spark-defaults.conf</p></blockquote>\n<p>（2）修改spark-default.conf文件，配置日志存储路径</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[root@master conf]# vim spark-defaults.conf</p>\n<p>spark.eventLog.enabled          true</p>\n<p>spark.eventLog.dir              hdfs:&#x2F;&#x2F;master:9000&#x2F;directory</p></blockquote>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/851785e5a9d79afa76847a7ac88791c7.png\"></p>\n<p><strong><strong>注意：需要启动hadoop集群，HDFS上的directory目录需要提前存在。</strong></strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>hadoop fs -mkdir &#x2F;directory</p></blockquote>\n<p>（3）修改spark-env.sh文件, 添加日志配置</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>export SPARK_HISTORY_OPTS&#x3D;”</p>\n<p>-Dspark.history.ui.port&#x3D;18080</p>\n<p>-Dspark.history.fs.logDirectory&#x3D;hdfs:&#x2F;&#x2F;master:9000&#x2F;directory</p>\n<p>-Dspark.history.retainedApplications&#x3D;30”</p></blockquote>\n<p>参数含义：</p>\n<p>（1）参数1含义：WEB UI访问的端口号为18080</p>\n<p>（2）参数2含义：指定历史服务器日志存储路径</p>\n<p>（3）参数3含义：指定保存Application历史记录的个数，如果超过这个值，旧的应用程序信息将被删除，这个是内存中的应用数，而不是页面上显示的应用数。</p>\n<p>（4）分发配置文件</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[root@master spark-standalone]# scp -r conf&#x2F; node1:`pwd`</p>\n<p>[root@master spark-standalone]# scp -r conf&#x2F; node2:`pwd`</p></blockquote>\n<p>（5）重新启动集群和历史服务</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>sbin&#x2F;start-all.sh</p>\n<p>sbin&#x2F;start-history-server.sh</p></blockquote>\n<p>（6）重新执行任务</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>bin&#x2F;spark-submit \\</p>\n<p>--class org.apache.spark.examples.SparkPi \\</p>\n<p>--master spark:&#x2F;&#x2F;master:7077 \\</p>\n<p>.&#x2F;examples&#x2F;jars&#x2F;spark-examples_2.11-2.4.5.jar \\</p>\n<p>10</p></blockquote>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/e7c2b6322e1eafa00c53767e0cdcd938.png\"></p>\n<p>（7）查看历史服务：<a href=\"http://master:18080/\">http://master:18080</a></p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/76a19c17ba3475b84afd7e8eac878830.png\"></p>\n<h4 id=\"3-2-7-配置高可用（HA）\"><a href=\"#3-2-7-配置高可用（HA）\" class=\"headerlink\" title=\"3.2.7** 配置高可用（HA）**\"></a><strong><strong><strong>3.2</strong></strong></strong><strong>.7</strong>** <strong><strong>配置高可用（HA）</strong></strong>**</h4><p>所谓的高可用是因为当前集群中的 Master 节点只有一个，所以会存在单点故障问题。所以为了解决单点故障问题，需要在集群中配置多个 Master 节点，一旦处于活动状态的 Master发生故障时，由备用 Master 提供服务，保证作业可以继续执行。这里的高可用一般采用Zookeeper 设置。</p>\n<p>集群规划：</p>\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"background-color:#4472c4;width:103.7pt;\"><p style=\"margin-left:.0001pt;text-align:center;\"></p></td><td style=\"background-color:#4472c4;width:103.7pt;\"><p style=\"margin-left:.0001pt;text-align:center;\">master</p></td><td style=\"background-color:#4472c4;width:103.7pt;\"><p style=\"margin-left:.0001pt;text-align:center;\">node1</p></td><td style=\"background-color:#4472c4;width:103.7pt;\"><p style=\"margin-left:.0001pt;text-align:center;\">node2</p></td></tr><tr><td style=\"width:103.7pt;\"><p style=\"margin-left:.0001pt;text-align:center;\">spark</p></td><td style=\"width:103.7pt;\"><p style=\"margin-left:.0001pt;text-align:center;\">Master</p><p style=\"margin-left:.0001pt;text-align:center;\">Zookeeper</p><p style=\"margin-left:.0001pt;text-align:center;\">Worker</p></td><td style=\"width:103.7pt;\"><p style=\"margin-left:.0001pt;text-align:center;\">Master</p><p style=\"margin-left:.0001pt;text-align:center;\">Zookeeper</p><p style=\"margin-left:.0001pt;text-align:center;\">Worker</p></td><td style=\"width:103.7pt;\"><p style=\"margin-left:.0001pt;text-align:center;\">Zookeeper</p><p style=\"margin-left:.0001pt;text-align:center;\">Worker</p></td></tr></tbody></table>\n\n<p>（1）停止集群</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[root@master spark-standalone]# sbin&#x2F;stop-all.sh</p></blockquote>\n<p>（2）启动Zookeeper</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>bin&#x2F;zkServer.sh start</p></blockquote>\n<p>注意：三台都需要启动。</p>\n<p>（3）修改spark-env.sh文件添加如下配置</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>#PARK_MASTER_HOST&#x3D;master</p>\n<p>#SPARK_MASTER_PORT&#x3D;7077</p>\n<p>#Master 监控页面默认访问端口为 8080，但是可能会和 Zookeeper 冲突，所以改成 8989，也可以自定义，访问 UI 监控页面时请注意</p>\n<p>SPARK_MASTER_WEBUI_PORT&#x3D;8989</p>\n<p>export SPARK_DAEMON_JAVA_OPTS&#x3D;”</p>\n<p>-Dspark.deploy.recoveryMode&#x3D;ZOOKEEPER</p>\n<p>-Dspark.deploy.zookeeper.url&#x3D;master,node1,node2</p>\n<p>-Dspark.deploy.zookeeper.dir&#x3D;&#x2F;spark”</p></blockquote>\n<p>（4）分发配置文件</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[root@master spark-standalone]# scp -r conf&#x2F; node1:`pwd`</p>\n<p>[root@master spark-standalone]# scp -r conf&#x2F; node2:`pwd`</p></blockquote>\n<p>（5）启动集群</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[root@master spark-standalone]# sbin&#x2F;start-all.sh</p></blockquote>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/6638bf39a7474c4713f4255c7b748ff1.png\"></p>\n<p>（6）启动node1的单独Master节点，此时node1节点Master状态处于备用状态。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[root@node1 spark-standalone]# sbin&#x2F;start-master.sh</p></blockquote>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/1c7026d5506ecf73fc5fbb44ca57441d.png\"></p>\n<p>（7）提交应用到高可用集群</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>bin&#x2F;spark-submit \\</p>\n<p>--class org.apache.spark.examples.SparkPi \\</p>\n<p>--master spark:&#x2F;&#x2F;master:7077,node1:7077 \\</p>\n<p>.&#x2F;examples&#x2F;jars&#x2F;spark-examples_2.11-2.4.5.jar \\</p>\n<p>10</p></blockquote>\n<p>（8）停止master的Master资源监控进程</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/c8fb29bb2a31029742ec5ffe48485508.png\"></p>\n<p>（9）查看node1的Master资源监控Web UI，稍等一段时间后，node1节点的Master状态提升为活动状态</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/c994bd87e64a7387528a82e160da5026.png\"></p>\n<h3 id=\"3-3-Yarn模式\"><a href=\"#3-3-Yarn模式\" class=\"headerlink\" title=\"3.3 Yarn模式\"></a><strong><strong><strong>3.3</strong></strong> <strong><strong>Yarn模式</strong></strong></strong></h3><p>独立部署（Standalone）模式由Spark自身提供计算资源，无需其他框架提供资源。这种方式降低了和其他第三方资源框架的耦合性，独立性非常强。但是你也要记住，Spark主要是计算框架，而不是资源调度框架，所以本身提供的资源调度并不是它的强项，所以还是和其他专业的资源调度框架集成会更靠谱一些。所以接下来我们来学习在强大的Yarn环境下Spark是如何工作的（其实是因为在国内工作中，Yarn使用的非常多）。</p>\n<h4 id=\"3-3-1-上传并解压缩文件\"><a href=\"#3-3-1-上传并解压缩文件\" class=\"headerlink\" title=\"3.3.1 上传并解压缩文件\"></a><strong><strong><strong>3</strong></strong></strong><strong>.3</strong><strong><strong><strong>.1 上传并解压缩文件</strong></strong></strong></h4><p>将spark-2.4.5-bin-hadoop2.6.tgz文件上传到Linux并解压缩，放置在指定位置，路径中不要包含中文或空格。</p>\n<p>（1）上传文件至&#x2F;usr&#x2F;local&#x2F;packages中：</p>\n<p>（2）解压缩到指定目录：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[root@master local]# tar -zxvf spark-2.4.5-bin-hadoop2.6.tgz -C &#x2F;usr&#x2F;local&#x2F;soft&#x2F;</p></blockquote>\n<p>（3）重命名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[root@master soft]# mv spark-2.4.5-bin-hadoop2.6&#x2F; spark-yarn</p></blockquote>\n<h4 id=\"3-3-2-修改配置文件\"><a href=\"#3-3-2-修改配置文件\" class=\"headerlink\" title=\"3.3.2** 修改配置文件**\"></a><strong><strong><strong>3</strong></strong></strong><strong>.3.2</strong>** <strong><strong>修改配置文件</strong></strong>**</h4><p>（1）修改hadoop配置文件&#x2F;usr&#x2F;local&#x2F;soft&#x2F;hadoop-2.7.6&#x2F;etc&#x2F;hadoop&#x2F;yarn-site.xml, 并分发</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>&lt;!–是否启动一个线程检查每个任务正使用的物理内存量，如果任务超出分配值，则直接将其杀掉，默认是true --&gt;</p>\n<p>    &lt;property&gt;</p>\n<p>        &lt;name&gt;yarn.nodemanager.pmem-check-enabled&lt;&#x2F;name&gt;</p>\n<p>        &lt;value&gt;false&lt;&#x2F;value&gt;</p>\n<p>    &lt;&#x2F;property&gt;</p>\n<p>    &lt;!–是否启动一个线程检查每个任务正使用的虚拟内存量，如果任务超出分配值，则直接将其杀掉，默认是true --&gt;</p>\n<p>    &lt;property&gt;</p>\n<p>        &lt;name&gt;yarn.nodemanager.vmem-check-enabled&lt;&#x2F;name&gt;</p>\n<p>        &lt;value&gt;false&lt;&#x2F;value&gt;</p>\n<p>    &lt;&#x2F;property&gt;</p></blockquote>\n<p>分发：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[root@master hadoop]# scp -r yarn-site.xml node1:`pwd`</p>\n<p>[root@master hadoop]# scp -r yarn-site.xml node2:`pwd`</p></blockquote>\n<p>（2）修改conf&#x2F;spark-env.sh，添加JAVA_HOME和YARN_CONF_DIR配置</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[root@master conf]# mv spark-env.sh.template spark-env.sh</p>\n<p>export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;soft&#x2F;jdk1.8.0_171</p>\n<p>YARN_CONF_DIR&#x3D;&#x2F;usr&#x2F;local&#x2F;soft&#x2F;hadoop-2.7.6&#x2F;etc&#x2F;hadoop</p></blockquote>\n<h4 id=\"3-3-3-启动Hadoop集群\"><a href=\"#3-3-3-启动Hadoop集群\" class=\"headerlink\" title=\"3.3.3** 启动Hadoop集群**\"></a><strong><strong><strong>3</strong></strong></strong><strong>.3.3</strong>** <strong><strong>启动Hadoop集群</strong></strong>**</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[root@master conf]# star-all.sh</p></blockquote>\n<h4 id=\"3-3-4-提交应用\"><a href=\"#3-3-4-提交应用\" class=\"headerlink\" title=\"3.3.4** 提交应用**\"></a><strong><strong><strong>3</strong></strong></strong><strong>.3.4</strong>** <strong><strong>提交应用</strong></strong>**</h4><p>spark on yarn cluster模式，上线使用，不会再本地打印日志，减少io：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>bin&#x2F;spark-submit \\</p>\n<p>--class org.apache.spark.examples.SparkPi \\</p>\n<p>--master yarn \\</p>\n<p>--deploy-mode cluster \\</p>\n<p>.&#x2F;examples&#x2F;jars&#x2F;spark-examples_2.11-2.4.5.jar \\</p>\n<p>10</p></blockquote>\n<p>获取yarn程序执行日志，执行成功之后才能获取到：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>yarn logs -applicationId application_1665713361275_0003</p></blockquote>\n<p>杀死yarn任务：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>yarn application -kill application_1626660789491_0012</p></blockquote>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/b2b291a4f0f724478b2962a38d36c681.png\"></p>\n<p>查看<a href=\"http://master:8088页面，点击History，查看历史页面\">http://master:8088页面，点击History，查看历史页面</a></p>\n<h4 id=\"3-3-5-配置历史服务器\"><a href=\"#3-3-5-配置历史服务器\" class=\"headerlink\" title=\"3.3.5** 配置历史服务器**\"></a><strong><strong><strong>3</strong></strong></strong><strong>.3.5</strong>** <strong><strong>配置历史服务器</strong></strong>**</h4><p>（1）修改spark-defaults.conf.template文件名为spark-defaults.conf</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[root@master conf]# mv spark-defaults.conf.template spark-defaults.conf</p></blockquote>\n<p>（2）修改spark-default.conf文件，配置日志存储路径</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>spark.eventLog.enabled           true</p>\n<p>spark.eventLog.dir               hdfs:&#x2F;&#x2F;master:9000&#x2F;directory</p></blockquote>\n<p><strong><strong>注意：需要启动hadoop集群，HDFS上的目录需要提前存在。</strong></strong></p>\n<p>（3）修改spark-env.sh文件, 添加日志配置</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>export SPARK_HISTORY_OPTS&#x3D;”</p>\n<p>-Dspark.history.ui.port&#x3D;18080</p>\n<p>-Dspark.history.fs.logDirectory&#x3D;hdfs:&#x2F;&#x2F;master:9000&#x2F;directory</p>\n<p>-Dspark.history.retainedApplications&#x3D;30”</p></blockquote>\n<p>①参数1含义：WEB UI访问的端口号为18080；</p>\n<p>②参数2含义：指定历史服务器日志存储路径；</p>\n<p>③参数3含义：指定保存Application历史记录的个数，如果超过这个值，旧的应用程序信息将被删除，这个是内存中的应用数，而不是页面上显示的应用数；</p>\n<p>（4）修改spark-defaults.conf</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>spark.yarn.historyServer.address&#x3D;master:18080</p>\n<p>spark.history.ui.port&#x3D;18080</p></blockquote>\n<p>（5）启动历史服务</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[root@master spark-yarn]# sbin&#x2F;start-history-server.sh</p></blockquote>\n<p>（6）提交应用</p>\n<p>spark on yarn client模式,日志在本地输出，一般用于上线前测试：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>bin&#x2F;spark-submit \\</p>\n<p>--class org.apache.spark.examples.SparkPi \\</p>\n<p>--master yarn \\</p>\n<p>--deploy-mode client \\</p>\n<p>.&#x2F;examples&#x2F;jars&#x2F;spark-examples_2.11-2.4.5.jar \\</p>\n<p>10</p></blockquote>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/18dc00383580a0fefef65cb4a8281891.png\">  </p>\n<h2 id=\"第4章：Spark运行架构\"><a href=\"#第4章：Spark运行架构\" class=\"headerlink\" title=\"第4章：Spark运行架构\"></a><strong><strong><strong>第</strong></strong></strong><strong>4</strong><strong><strong><strong>章：Spark运行架构</strong></strong></strong></h2><h3 id=\"4-1-运行架构\"><a href=\"#4-1-运行架构\" class=\"headerlink\" title=\"4.1** 运行架构**\"></a><strong><strong><strong>4</strong></strong></strong><strong>.1</strong>** <strong><strong>运行架构</strong></strong>**</h3><p>Spark框架的核心是一个计算引擎，整体来说，它采用了标准master-slave的结构。如下图所示，它展示了一个 Spark 执行时的基本结构。图形中的Driver表示 master，负责管理整个集群中的作业任务调度。图形中的Executor则是 slave，负责实际执行任务。</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/47a84cb1b6942c58ec7881477c5a3e78.png\"></p>\n<h3 id=\"4-2-核心组件\"><a href=\"#4-2-核心组件\" class=\"headerlink\" title=\"4.2** 核心组件**\"></a><strong><strong><strong>4</strong></strong></strong><strong>.2</strong>** <strong><strong>核心组件</strong></strong>**</h3><p>由上图可以看出，对于Spark框架有两个核心组件：</p>\n<h4 id=\"4-2-1-Driver\"><a href=\"#4-2-1-Driver\" class=\"headerlink\" title=\"4.2.1 Driver\"></a><strong><strong><strong>4.2.1 Driver</strong></strong></strong></h4><p>Spark驱动器节点，用于执行Spark任务中的main方法，负责实际代码的执行工作。Driver在Spark作业执行时主要负责：</p>\n<p>①将用户程序转化为作业（job）；</p>\n<p>②在Executor之间调度任务(task)；</p>\n<p>③跟踪Executor的执行情况；</p>\n<p>④通过UI展示查询运行情况；</p>\n<p>实际上，我们无法准确地描述Driver的定义，因为在整个的编程过程中没有看到任何有关Driver的字眼。所以简单理解，所谓的Driver就是驱使整个应用运行起来的程序，也称之为Driver类。</p>\n<h4 id=\"4-2-2-Executor\"><a href=\"#4-2-2-Executor\" class=\"headerlink\" title=\"4.2.2 Executor\"></a><strong><strong><strong>4.2.2 Executor</strong></strong></strong></h4><p>Spark Executor是集群中工作节点（Worker）中的一个JVM进程，负责在Spark作业中运行具体任务（Task），任务彼此之间相互独立。Spark应用启动时，Executor节点被同时启动，并且始终伴随着整个Spark应用的生命周期而存在。如果有 Executor节点发生了故障或崩溃，Spark应用也可以继续执行，会将出错节点上的任务调度到其他Executor 节点上继续运行。</p>\n<p>Executor有两个核心功能：</p>\n<p>①负责运行组成Spark应用的任务，并将结果返回给驱动器进程；</p>\n<p>②它们通过自身的块管理器（Block Manager）为用户程序中要求缓存的RDD提供内存式存储。RDD是直接缓存在Executor进程内的，因此任务可以在运行时充分利用缓存数据加速运算。</p>\n<h4 id=\"4-2-3-Master-Worker\"><a href=\"#4-2-3-Master-Worker\" class=\"headerlink\" title=\"4.2.3 Master&amp;Worker\"></a><strong><strong><strong>4.2.3 Master&amp;Worker</strong></strong></strong></h4><p>Spark集群的独立部署环境中，不需要依赖其他的资源调度框架，自身就实现了资源调度的功能，所以环境中还有其他两个核心组件：Master和Worker，这里的Master是一个进程，主要负责资源的调度和分配，并进行集群的监控等职责，类似于Yarn环境中的RM, 而Worker呢，也是进程，一个Worker运行在集群中的一台服务器上，由Master分配资源对数据进行并行的处理和计算，类似于Yarn环境中NM。</p>\n<h4 id=\"4-2-4-ApplicationMaster\"><a href=\"#4-2-4-ApplicationMaster\" class=\"headerlink\" title=\"4.2.4 ApplicationMaster\"></a><strong><strong><strong>4.2.4 ApplicationMaster</strong></strong></strong></h4><p>Hadoop用户向YARN集群提交应用程序时,提交程序中应该包含ApplicationMaster，用于向资源调度器申请执行任务的资源容器Container，运行用户自己的程序任务job，监控整个任务的执行，跟踪整个任务的状态，处理任务失败等异常情况。说的简单点就是，ResourceManager（资源）和Driver（计算）之间的解耦合靠的就是ApplicationMaster。</p>\n<h3 id=\"4-3-核心概念\"><a href=\"#4-3-核心概念\" class=\"headerlink\" title=\"4.3** 核心概念**\"></a><strong><strong><strong>4</strong></strong></strong><strong>.3</strong>** <strong><strong>核心概念</strong></strong>**</h3><h4 id=\"4-3-1-Executor与Core\"><a href=\"#4-3-1-Executor与Core\" class=\"headerlink\" title=\"4.3.1** Executor与Core**\"></a><strong><strong><strong>4</strong></strong></strong><strong>.3.1</strong>** <strong><strong>Executor与Core</strong></strong>**</h4><p>Spark Executor是集群中运行在工作节点（Worker）中的一个JVM进程，是整个集群中的专门用于计算的节点。在提交应用中，可以提供参数指定计算节点的个数，以及对应的资源。这里的资源一般指的是工作节点Executor的内存大小和使用的虚拟CPU核（Core）数量。</p>\n<p>应用程序相关启动参数如下：</p>\n<table align=\"center\" border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"background-color:#4472c4;width:172.45pt;\"><p style=\"margin-left:.0001pt;text-align:center;\">名称</p></td><td style=\"background-color:#4472c4;width:203.2pt;\"><p style=\"margin-left:.0001pt;text-align:center;\">说明</p></td></tr><tr><td style=\"vertical-align:top;width:172.45pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">--num-executors</p></td><td style=\"vertical-align:top;width:203.2pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">配置Executor的数量</p></td></tr><tr><td style=\"vertical-align:top;width:172.45pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">--executor-memory</p></td><td style=\"vertical-align:top;width:203.2pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">配置每个Executor的内存大小</p></td></tr><tr><td style=\"vertical-align:top;width:172.45pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">--executor-cores</p></td><td style=\"vertical-align:top;width:203.2pt;\"><p style=\"margin-left:.0001pt;text-align:left;\">配置每个Executor的虚拟CPU core数量</p></td></tr></tbody></table>\n\n<h4 id=\"4-3-2-并行度（Parallelism）\"><a href=\"#4-3-2-并行度（Parallelism）\" class=\"headerlink\" title=\"4.3.2** 并行度（Parallelism）**\"></a><strong><strong><strong>4</strong></strong></strong><strong>.3.2</strong>** <strong><strong>并行度（Parallelism）</strong></strong>**</h4><p>在分布式计算框架中一般都是多个任务同时执行，由于任务分布在不同的计算节点进行计算，所以能够真正地实现多任务并行执行，记住，这里是并行，而不是并发。这里我们将整个集群并行执行任务的数量称之为<strong><strong>并行度</strong></strong>。那么一个作业到底并行度是多少呢？这个取决于框架的默认配置。应用程序也可以在运行过程中动态修改。</p>\n<h4 id=\"4-3-3-有向无环图（DAG）\"><a href=\"#4-3-3-有向无环图（DAG）\" class=\"headerlink\" title=\"4.3.3** 有向无环图（DAG）**\"></a><strong><strong><strong>4</strong></strong></strong><strong>.3.3</strong>** <strong><strong>有向无环图（DAG）</strong></strong>**</h4><p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/307b99b268e49bb4ba10f92cfb0cbbc2.png\"></p>\n<p>大数据计算引擎框架我们根据使用方式的不同一般会分为四类，其中第一类就是Hadoop所承载的MapReduce，它将计算分为两个阶段，分别为Map阶段和Reduce阶段。对于上层应用来说，就不得不想方设法去拆分算法，甚至于不得不在上层应用实现多个Job的串联，以完成一个完整的算法，例如迭代计算。由于这样的弊端，催生了支持DAG框架的产生。因此，支持DAG的框架被划分为第二代计算引擎。如Tez以及更上层的Oozie。这里我们不去细究各种DAG实现之间的区别，不过对于当时的Tez和Oozie来说，大多还是批处理的任务。接下来就是以Spark为代表的第三代的计算引擎。第三代计算引擎的特点主要是Job内部的DAG支持（不跨越Job），以及实时计算。</p>\n<p>这里所谓的有向无环图，并不是真正意义的图形，而是由Spark程序直接映射成的数据流的高级抽象模型。简单理解就是将整个程序计算的执行过程用图形表示出来,这样更直观，更便于理解，可以用于表示程序的拓扑结构。</p>\n<p>DAG（Directed Acyclic Graph）有向无环图是由点和线组成的拓扑图形，该图形具有方向，不会闭环。</p>\n<h3 id=\"4-4-提交流程\"><a href=\"#4-4-提交流程\" class=\"headerlink\" title=\"4.4** 提交流程**\"></a><strong><strong><strong>4</strong></strong></strong><strong>.4</strong>** <strong><strong>提交流程</strong></strong>**</h3><p>所谓的提交流程，其实就是我们开发人员根据需求写的应用程序通过Spark客户端提交给Spark运行环境执行计算的流程。在不同的部署环境中，这个提交过程基本相同，但是又有细微的区别，我们这里不进行详细的比较，但是因为国内工作中，将Spark引用部署到Yarn环境中会更多一些，所以本提交流程是基于Yarn环境的。</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/2350aa013aa2cdf1fd0a87a7ff9ee9fd.png\"></p>\n<p>Spark应用程序提交到Yarn环境中执行的时候，一般会有两种部署执行的方式：Client和Cluster。<strong><strong>两种模式主要区别在于：Driver程序的运行节点位置。</strong></strong></p>\n<h4 id=\"4-4-1-Yarn-Clinet模式\"><a href=\"#4-4-1-Yarn-Clinet模式\" class=\"headerlink\" title=\"4.4.1** Yarn**Clinet模式\"></a><strong><strong><strong>4</strong></strong></strong><strong>.4.1</strong>** <strong><strong>Yarn</strong>**<strong><strong>Clinet模式</strong></strong></strong></h4><p>Client模式将用于监控和调度的Driver模块在客户端执行，而不是在Yarn中，所以一般用于测试。</p>\n<p>（1）Driver在任务提交的本地机器上运行</p>\n<p>（2）Driver启动后会和ResourceManager通讯申请启动ApplicationMaster</p>\n<p>（3）ResourceManager分配container，在合适的NodeManager上启动ApplicationMaster，负责向ResourceManager申请Executor内存</p>\n<p>（4）ResourceManager接到ApplicationMaster的资源申请后会分配container，然后ApplicationMaster在资源分配指定的NodeManager上启动Executor进程</p>\n<p>（5）Executor进程启动后会向Driver反向注册，Executor全部注册完成后Driver开始执行main函数</p>\n<p>（6）之后执行到Action算子时，触发一个Job，并根据宽依赖开始划分stage，每个stage生成对应的TaskSet，之后将task分发到各个Executor上执行。</p>\n<h4 id=\"4-4-2-Yarn-Cluster模式\"><a href=\"#4-4-2-Yarn-Cluster模式\" class=\"headerlink\" title=\"4.4.2 Yarn Cluster模式\"></a><strong><strong><strong>4.4.2</strong></strong> <strong><strong>Yarn Cluster模式</strong></strong></strong></h4><p>Cluster模式将用于监控和调度的Driver模块启动在Yarn集群资源中执行。一般应用于实际生产环境。</p>\n<p>（1）在YARN Cluster模式下，任务提交后会和ResourceManager通讯申请启动ApplicationMaster</p>\n<p>（2）随后ResourceManager分配container，在合适的NodeManager上启动ApplicationMaster，此时的ApplicationMaster就是Driver。</p>\n<p>（3）Driver启动后向ResourceManager申请Executor内存，ResourceManager接到ApplicationMaster的资源申请后会分配container，然后在合适的NodeManager上启动Executor进程</p>\n<p>（4）Executor进程启动后会向Driver反向注册，Executor全部注册完成后Driver开始执行main函数</p>\n<p>（5）之后执行到Action算子时，触发一个Job，并根据宽依赖开始划分stage，每个stage生成对应的TaskSet，之后将task分发到各个Executor上执行。</p>\n<h2 id=\"第5章：Spark核心编程\"><a href=\"#第5章：Spark核心编程\" class=\"headerlink\" title=\"第5章：Spark核心编程\"></a><strong><strong><strong>第</strong></strong></strong><strong>5</strong><strong><strong><strong>章：Spark核心编程</strong></strong></strong></h2><p>Spark计算框架为了能够进行高并发和高吞吐的数据处理，封装了三大数据结构，用于处理不同的应用场景。三大数据结构分别是：</p>\n<p>（1）RDD: 弹性分布式数据集</p>\n<p>（2）累加器：分布式共享只写变量</p>\n<p>（3）广播变量：分布式共享只读变量</p>\n<h3 id=\"5-1-RDD\"><a href=\"#5-1-RDD\" class=\"headerlink\" title=\"5.1 RDD\"></a><strong><strong><strong>5.1</strong></strong> <strong><strong>RDD</strong></strong></strong></h3><h4 id=\"5-1-1-什么是RDD\"><a href=\"#5-1-1-什么是RDD\" class=\"headerlink\" title=\"5.1.1** 什么是RDD**\"></a><strong><strong><strong>5</strong></strong></strong><strong>.1.1</strong>** <strong><strong>什么是RDD</strong></strong>**</h4><p>RDD（Resilient Distributed Dataset）叫做弹性分布式数据集，是Spark中最基本的数据处理模型。代码中是一个抽象类，它代表一个弹性的、不可变、可分区、里面的元素可并行计算的集合。</p>\n<p>1、弹性</p>\n<p>（1）存储的弹性：内存与磁盘的自动切换；</p>\n<p>（2）容错的弹性：数据丢失可以自动恢复；</p>\n<p>（3）计算的弹性：计算出错重试机制；</p>\n<p>（4）分片的弹性：可根据需要重新分片。</p>\n<p>2、分布式：数据存储在大数据集群不同节点上</p>\n<p>3、数据集：RDD封装了计算逻辑，并不保存数据</p>\n<p>4、数据抽象：RDD是一个抽象类，需要子类具体实现</p>\n<p>5、不可变：RDD封装了计算逻辑，是不可以改变的，想要改变，只能产生新的RDD，在新的RDD里面封装计算逻辑可分区、并行计算</p>\n<h4 id=\"5-1-2-核心属性\"><a href=\"#5-1-2-核心属性\" class=\"headerlink\" title=\"5.1.2** 核心属性**\"></a><strong><strong><strong>5</strong></strong></strong><strong>.1.2</strong>** <strong><strong>核心属性</strong></strong>**</h4><p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/0348fa1c4c102d890e806980e35236fd.png\"></p>\n<p>1、分区列表</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/640fadf513d0159a21c834d3c394d39f.png\"></p>\n<p>RDD数据结构中存在分区列表，用于执行任务时并行计算，是实现分布式计算的重要属性。</p>\n<p>2、分区计算函数</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/7415ddda9e95cf3a65374fef6ef59cfd.png\"></p>\n<p>Spark在计算时，是使用分区函数对每一个分区进行计算。</p>\n<p>3、RDD之间的依赖关系</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/551bb3983dad1e4d0cf063457d2ae71a.png\"></p>\n<p>RDD是计算模型的封装，当需求中需要将多个计算模型进行组合时，就需要将多个RDD建立依赖关系。</p>\n<p>4、分区器（可选）</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/51f1e21d6da93ba8fbc1dd04151b19d7.png\"></p>\n<p>当数据为KV类型数据时，可以通过设定分区器自定义数据的分区。</p>\n<p>5、首选位置（可选）</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/0941ffd2867bde6258a3ce025e53f7a8.png\"></p>\n<p>计算数据时，可以根据计算节点的状态选择不同的节点位置进行计算。</p>\n<h4 id=\"5-1-3-执行原理\"><a href=\"#5-1-3-执行原理\" class=\"headerlink\" title=\"5.1.3** 执行原理**\"></a><strong><strong><strong>5</strong></strong></strong><strong>.1.3</strong>** <strong><strong>执行原理</strong></strong>**</h4><p>从计算的角度来讲，数据处理过程中需要计算资源（内存&amp;CPU）和计算模型（逻辑）。执行时，需要将计算资源和计算模型进行协调和整合。</p>\n<p>Spark框架在执行时，先申请资源，然后将应用程序的数据处理逻辑分解成一个一个的计算任务。然后将任务发到已经分配资源的计算节点上,按照指定的计算模型进行数据计算。最后得到计算结果。</p>\n<p>RDD是Spark框架中用于数据处理的核心模型，接下来我们看看，在Yarn环境中，RDD的工作原理:</p>\n<p>1、启动Yarn集群环境</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/23b28843ad1e37e504e700b1df120bf4.png\"></p>\n<p>2、Spark通过申请资源创建调度节点和计算节点</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/26b015f602f89fba4b66b529ee134ed5.png\"></p>\n<p>3、Spark框架根据需求将计算逻辑根据分区划分成不同的任务</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/31a3aa4573c61bfd247c2d487ddb1f2f.png\"></p>\n<p>4、调度节点将任务根据计算节点状态发送到对应的计算节点进行计算</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/0e04a87a8c25cb6221f21558ce450f8f.png\"></p>\n<p>从以上流程可以看出RDD在整个流程中主要用于将逻辑进行封装，并生成Task发送给Executor节点执行计算，接下来我们就一起看看Spark框架中RDD是具体是如何进行数据处理的。</p>\n<h4 id=\"5-1-4-基础编程\"><a href=\"#5-1-4-基础编程\" class=\"headerlink\" title=\"5.1.4** 基础编程**\"></a><strong><strong><strong>5</strong></strong></strong><strong>.1.4</strong>** <strong><strong>基础编程</strong></strong>**</h4><p><strong><strong><strong>5</strong></strong></strong><strong>.1.4.1</strong>****** RDD创建******</p>\n<p>在Spark中创建RDD的创建方式可以分为四种：</p>\n<p>（1）从集合（内存）中创建RDD</p>\n<p>从集合中创建 RDD，Spark主要提供了两个方法：parallelize和makeRDD</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> conf</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SparkConf</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SparkConf</span><span style=\"color: #BABED8\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      .setMaster(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">local[*]</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      .setAppName(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">DemoSparkAPPs</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> context</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SparkContext</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SparkContext</span><span style=\"color: #BABED8\">(conf)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> value</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> context.parallelize(</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      </span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> value1</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> context.makeRDD(</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      </span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    value.collect().foreach(println)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    value1.collect().foreach(println)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    context.stop()</span></span></code></pre></div><p>从底层代码实现来讲，makeRDD方法其实就是parallelize方法：</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/bc82f3a1c84566e81acc8d642307be0b.png\"></p>\n<p>（2）从外部存储（文件）创建RDD</p>\n<p>由外部存储系统的数据集创建RDD包括：本地的文件系统，所有Hadoop支持的数据集，比如HDFS、HBase等。</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> conf</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SparkConf</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SparkConf</span><span style=\"color: #BABED8\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      .setMaster(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">local[*]</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      .setAppName(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Demo01SparkAPPs</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> context</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SparkContext</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SparkContext</span><span style=\"color: #BABED8\">(conf)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> fileRDD</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> context.textFile(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">data/word.txt</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    fileRDD.collect().foreach(println)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    context.stop()</span></span></code></pre></div><p>3、从其他RDD创建</p>\n<p>主要是通过一个 RDD 运算完后，再产生新的 RDD。</p>\n<p>4、直接创建 RDD（new）</p>\n<p>使用new的方式直接构造RDD，一般由Spark框架自身使用。</p>\n<p><strong><strong><strong>5.1.4.2</strong></strong> <strong><strong>RDD并行度与分区</strong></strong></strong></p>\n<p>默认情况下，Spark可以将一个作业切分多个任务后，发送给Executor节点并行计算，而能够并行计算的任务数量我们称之为并行度。这个数量可以在构建RDD时指定。记住，这里的并行执行的任务数量，并不是指的切分任务的数量，不要混淆了。</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> conf</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SparkConf</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SparkConf</span><span style=\"color: #BABED8\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      .setMaster(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">local[*]</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      .setAppName(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">DemoSparkAPPs</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> context</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SparkContext</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SparkContext</span><span style=\"color: #BABED8\">(conf)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> value</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> context.parallelize(</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      </span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> context.makeRDD(</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      </span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> fileRDD</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> context.textFile(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">data/word.txt</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    dataRDD.collect().foreach(println)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    fileRDD.collect().foreach(println)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    context.stop()</span></span></code></pre></div><p>读取内存数据时，数据可以按照并行度的设定进行数据的分区操作，数据分区规则的Spark核心源码如下：</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">def</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">positions</span><span style=\"color: #BABED8\">(</span><span style=\"color: #BABED8; font-style: italic\">length</span><span style=\"color: #BABED8\">: </span><span style=\"color: #FFCB6B\">Long</span><span style=\"color: #BABED8\">, </span><span style=\"color: #BABED8; font-style: italic\">numSlices</span><span style=\"color: #BABED8\">: </span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">)</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Iterator</span><span style=\"color: #BABED8\">[(</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">)] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> (</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #BABED8\"> until numSlices).iterator.map </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> start </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> ((i </span><span style=\"color: #89DDFF\">*</span><span style=\"color: #BABED8\"> length) </span><span style=\"color: #89DDFF\">/</span><span style=\"color: #BABED8\"> numSlices).toInt</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> end </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> (((i </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">) </span><span style=\"color: #89DDFF\">*</span><span style=\"color: #BABED8\"> length) </span><span style=\"color: #89DDFF\">/</span><span style=\"color: #BABED8\"> numSlices).toInt</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> (start, end)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>读取文件数据时，数据是按照Hadoop文件读取的规则进行切片分区，而切片规则和数据读取的规则有些差异，具体Spark核心源码如下</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">public </span><span style=\"color: #FFCB6B\">InputSplit</span><span style=\"color: #BABED8\">[] getSplits(</span><span style=\"color: #FFCB6B\">JobConf</span><span style=\"color: #BABED8\"> job, int numSplits)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> throws </span><span style=\"color: #FFCB6B\">IOException</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> long totalSize </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #BABED8\">; </span><span style=\"color: #676E95; font-style: italic\">// compute total size</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> (</span><span style=\"color: #FFCB6B\">FileStatus</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">file</span><span style=\"color: #BABED8\">: files) </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// check we have valid files</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> (file.isDirectory()) </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">throw</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">IOException</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Not a file: </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> file.getPath());</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> totalSize </span><span style=\"color: #89DDFF\">+=</span><span style=\"color: #BABED8\"> file.getLen();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> long goalSize </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> totalSize </span><span style=\"color: #89DDFF\">/</span><span style=\"color: #BABED8\"> (numSplits </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">?</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> numSplits);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> long minSize </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Math</span><span style=\"color: #BABED8\">.max(job.getLong(org.apache.hadoop.mapreduce.lib.input.</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">FileInputFormat</span><span style=\"color: #BABED8\">.</span><span style=\"color: #FFCB6B\">SPLIT_MINSIZE</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">), minSplitSize);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> ...</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> (</span><span style=\"color: #FFCB6B\">FileStatus</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">file</span><span style=\"color: #BABED8\">: files) </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> ...</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> (isSplitable(fs, path)) </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> long blockSize </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> file.getBlockSize();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> long splitSize </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> computeSplitSize(goalSize, minSize, blockSize);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> ...</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">protected</span><span style=\"color: #BABED8\"> long computeSplitSize(long goalSize, long minSize,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> long blockSize) </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Math</span><span style=\"color: #BABED8\">.max(minSize, </span><span style=\"color: #FFCB6B\">Math</span><span style=\"color: #BABED8\">.min(goalSize, blockSize));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p><strong><strong><strong>5</strong></strong></strong><strong>.1.4.3</strong>** <strong><strong>RDD转换算子</strong></strong>**</p>\n<p>RDD根据数据处理方式的不同将算子整体上分为Value类型、双Value类型和Key-Value类型。</p>\n<p><strong><strong>1、value类型</strong></strong></p>\n<p>（1）map</p>\n<p>①函数签名：</p>\n<p>def map[U:ClassTag](f:T&#x3D;&gt;U):RDD[U]</p>\n<p>②函数说明</p>\n<p>将处理的数据<strong><strong>逐条</strong></strong>进行映射转换，这里的转换可以是类型的转换，也可以是值的转换。</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD1</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD.map(</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      num </span><span style=\"color: #89DDFF\">=&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        num </span><span style=\"color: #89DDFF\">*</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">2</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD2</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD1.map(</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      num </span><span style=\"color: #89DDFF\">=&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> num</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    )</span></span></code></pre></div><p>③小功能：从服务器日志数据apache.log中获取用户请求URL资源路径。</p>\n<p>（2）mapPartitions</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def mapPartitions[U: ClassTag](</p>\n<p> f: Iterator[T] &#x3D;&gt; Iterator[U],</p>\n<p> preservesPartitioning: Boolean &#x3D; false): RDD[U]</p></blockquote>\n<p>②函数说明</p>\n<p>将待处理的数据<strong><strong>以分区为单位</strong></strong>发送到计算节点进行处理，这里的处理是指可以进行任意的处理，哪怕是过滤数据。</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD1</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD.mapPartitions(</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> datas </span><span style=\"color: #89DDFF\">=&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> datas.filter(_</span><span style=\"color: #89DDFF\">==</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">)</span></span></code></pre></div><p>③小功能：获取每个数据分区的最大值</p>\n<p>思考一个问题：map和mapPartitions的区别？</p>\n<p>a：数据处理角度</p>\n<p>Map算子是分区内一个数据一个数据的执行，类似于串行操作。而mapPartitions算子是以分区为单位进行批处理操作。</p>\n<p>b：功能的角度</p>\n<p>Map算子主要目的将数据源中的数据进行转换和改变。但是不会减少或增多数据。MapPartitions算子需要传递一个迭代器，返回一个迭代器，没有要求的元素的个数保持不变，所以可以增加或减少数据。</p>\n<p>c：性能的角度</p>\n<p>Map算子因为类似于串行操作，所以性能比较低，而是mapPartitions算子类似于批处理，所以性能较高。但是mapPartitions算子会长时间占用内存，那么这样会导致内存可能不够用，出现内存溢出的错误。所以在内存有限的情况下，不推荐使用。使用map操作。</p>\n<p>（3）mapPartitionsWithIndex</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def mapPartitionsWithIndex[U: ClassTag](</p>\n<p> f: (Int, Iterator[T]) &#x3D;&gt; Iterator[U],</p>\n<p> preservesPartitioning: Boolean &#x3D; false): RDD[U]</p></blockquote>\n<p>②函数说明</p>\n<p>将待处理的数据以分区为单位发送到计算节点进行处理，这里的处理是指可以进行任意的处理，哪怕是过滤数据，在处理时同时可以获取当前分区索引。</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD.mapPartitionsWithIndex(</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> (index, datas) </span><span style=\"color: #89DDFF\">=&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> datas.map(index, _)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">)</span></span></code></pre></div><p>③小功能：获取第二个数据分区的数据</p>\n<p>（4）flatMap</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def flatMap[U: ClassTag](f: T &#x3D;&gt; TraversableOnce[U]): RDD[U]</p></blockquote>\n<p>②函数说明</p>\n<p>将处理的数据进行扁平化后再进行映射处理，所以算子也称之为扁平映射</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">),</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">),</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD.flatMap(</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> list </span><span style=\"color: #89DDFF\">=&gt;</span><span style=\"color: #BABED8\"> list</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">)</span></span></code></pre></div><p>③小功能：将 List(List(1,2),3,List(4,5))进行扁平化操作</p>\n<p>（5）glom</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def glom(): RDD[Array[T]]</p></blockquote>\n<p>②函数说明</p>\n<p>将同一个分区的数据直接转换为相同类型的内存数组进行处理，分区不变</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">),</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD1</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Array</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">]] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD.glom()</span></span></code></pre></div><p>③小功能：计算所有分区最大值求和（分区内取最大值，分区间最大值求和）</p>\n<p>（6）groupBy</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def groupBy[K](f: T &#x3D;&gt; K)(implicit kt: ClassTag[K]): RDD[(K, Iterable[T])]</p></blockquote>\n<p>②函数说明</p>\n<p>将数据根据指定的规则进行分组, 分区默认不变，但是数据会被打乱<strong><strong>重新组合</strong></strong>，我们将这样的操作称之为<strong><strong>shuffle</strong></strong>。极限情况下，数据可能被分在同一个分区中。</p>\n<p><strong><strong>一个组的数据在一个分区中，但是并不是说一个分区中只有一个</strong></strong></p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">),</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD.groupBy(</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> _</span><span style=\"color: #89DDFF\">%</span><span style=\"color: #F78C6C\">2</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">)</span></span></code></pre></div><p>③小功能：</p>\n<p>a：将 List(“Hello”, “hive”, “hbase”, “Hadoop”)根据单词首写字母进行分组。</p>\n<p>b：从服务器日志数据 apache.log 中获取每个时间段访问量。（7）filter</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def filter(f: T &#x3D;&gt; Boolean): RDD[T]</p></blockquote>\n<p>②函数说明</p>\n<p>将数据根据指定的规则进行筛选过滤，符合规则的数据保留，不符合规则的数据丢弃。当数据进行筛选过滤后，分区不变，但是分区内的数据可能不均衡，生产环境下，可能会出现<strong><strong>数据倾斜</strong></strong>。</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">),</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD.filter(_</span><span style=\"color: #89DDFF\">%</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #BABED8\">)</span></span></code></pre></div><p>③小功能：从服务器日志数据apache.log中获取2015年5月17日的请求路径</p>\n<p>（8）sample</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def sample(</p>\n<p> withReplacement: Boolean,</p>\n<p> fraction: Double,</p>\n<p> seed: Long &#x3D; Utils.random.nextLong): RDD[T]</p></blockquote>\n<p>②函数说明</p>\n<p>根据指定的规则从数据集中<strong><strong>抽取</strong></strong>数据</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">),</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 抽取数据不放回（伯努利算法）</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 伯努利算法：又叫 0、1 分布。例如扔硬币，要么正面，要么反面。</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 具体实现：根据种子和随机算法算出一个数和第二个参数设置几率比较，小于第二个参数要，大于不要</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 第一个参数：抽取的数据是否放回，false：不放回</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 第二个参数：抽取的几率，范围在[0,1]之间,0：全不取；1：全取；</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 第三个参数：随机数种子</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD.sample(</span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">0.5</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 抽取数据放回（泊松算法）</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 第一个参数：抽取的数据是否放回，true：放回；false：不放回</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 第二个参数：重复数据的几率，范围大于等于 0.表示每一个元素被期望抽取到的次数</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 第三个参数：随机数种子</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD.sample(</span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">)</span></span></code></pre></div><p>（9）distinct</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def distinct()(implicit ord: Ordering[T] &#x3D; null): RDD[T]</p>\n<p>def distinct(numPartitions: Int)(implicit ord: Ordering[T] &#x3D; null): RDD[T]</p></blockquote>\n<p>②函数说明</p>\n<p>将数据集中重复的数据去重</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">),</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD.distinct()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD.distinct(</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">)</span></span></code></pre></div><p>③思考一个问题：如果不用该算子，你有什么办法实现数据去重？</p>\n<p>（10）coalesce</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def coalesce(numPartitions: Int, shuffle: Boolean &#x3D; false,</p>\n<p> partitionCoalescer: Option[PartitionCoalescer] &#x3D; Option.empty)</p>\n<p> (implicit ord: Ordering[T] &#x3D; null)</p>\n<p> : RDD[T]</p></blockquote>\n<p>②函数说明</p>\n<p>根据数据量<strong><strong>缩减分区</strong></strong>，用于大数据集过滤后，提高小数据集的执行效率</p>\n<p>当 spark程序中，存在过多的小任务的时候，可以通过coalesce方法，收缩合并分区，减少分区的个数，减小任务调度成本。</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">),</span><span style=\"color: #F78C6C\">6</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD.coalesce(</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">)</span></span></code></pre></div><p>③小功能：思考一个问题：我想要扩大分区，怎么办？</p>\n<p>（11）repartition</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def repartition(numPartitions: Int)(implicit ord: Ordering[T] &#x3D; null): RDD[T]</p></blockquote>\n<p>②函数说明</p>\n<p>该操作内部其实执行的是coalesce操作，参数shuffle的默认值为true。无论是将分区数多的RDD转换为分区数少的RDD，还是将分区数少的RDD 转换为分区数多的RDD，repartition操作都可以完成，因为无论如何都会经shuffle过程。</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">),</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD.repartition(</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">)</span></span></code></pre></div><p>③思考一个问题：coalesce 和 repartition 区别？</p>\n<p>（12）sortBy</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def sortBy[K](</p>\n<p> f: (T) &#x3D;&gt; K,</p>\n<p>ascending: Boolean &#x3D; true,</p>\n<p> numPartitions: Int &#x3D; this.partitions.length)</p>\n<p> (implicit ord: Ordering[K], ctag: ClassTag[K]): RDD[T]</p></blockquote>\n<p>②函数说明</p>\n<p>该操作用于排序数据。在排序之前，可以将数据通过f函数进行处理，之后按照f函数处理的结果进行排序，默认为升序排列。排序后新产生的RDD的分区数与原RDD的分区数一致。中间存在shuffle的过程、</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">),</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD.sortBy(num</span><span style=\"color: #89DDFF\">=&gt;</span><span style=\"color: #BABED8\">num, </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">)</span></span></code></pre></div><p><strong><strong>2、双Value类型</strong></strong></p>\n<p>（13）intersection</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def intersection(other: RDD[T]): RDD[T]</p></blockquote>\n<p>②函数说明</p>\n<p>对源 RDD 和参数 RDD 求交集后返回一个新的 RDD</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">5</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">6</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD1.intersection(dataRDD2)</span></span></code></pre></div><p>③思考一个问题：如果两个 RDD 数据类型不一致怎么办？</p>\n<p>（14）union</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def union(other: RDD[T]): RDD[T]</p></blockquote>\n<p>②函数说明</p>\n<p>对源RDD和参数RDD求并集后返回一个新的RDD</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">5</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">6</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD1.union(dataRDD2)</span></span></code></pre></div><p>③思考一个问题：如果两个RDD数据类型不一致怎么办？</p>\n<p>（15）subtract</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def subtract(other: RDD[T]): RDD[T]</p></blockquote>\n<p>②函数说明</p>\n<p>以一个RDD元素为主，去除两个RDD中重复元素，将其他元素保留下来。求差集。</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">5</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">6</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD1.subtract(dataRDD2)</span></span></code></pre></div><p>③思考一个问题：如果两个RDD数据类型不一致怎么办？</p>\n<p>（16）zip</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def zip[U: ClassTag](other: RDD[U]): RDD[(T, U)]</p></blockquote>\n<p>②函数说明</p>\n<p>将两个RDD中的元素，以键值对的形式进行合并。其中，键值对中的Key为第1个 RDD中的元素，Value为第2个RDD中的相同位置的元素。</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">5</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">6</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD1.zip(dataRDD2)</span></span></code></pre></div><p>③思考一个问题：如果两个 RDD 数据类型不一致怎么办？</p>\n<p>  思考一个问题：如果两个 RDD 数据分区不一致怎么办？</p>\n<p>思考一个问题：如果两个 RDD 分区数据数量不一致怎么办？</p>\n<p><strong><strong>k</strong>****<strong>ey - Value 类型</strong></strong></p>\n<p>（17）partitionBy</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def partitionBy(partitioner: Partitioner): RDD[(K, V)]</p></blockquote>\n<p>②函数说明</p>\n<p>将数据按照指定 Partitioner 重新进行分区。Spark 默认的分区器是 HashPartitioner</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> rdd</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[(</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">)] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.makeRDD(</span><span style=\"color: #FFCB6B\">Array</span><span style=\"color: #BABED8\">((</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">aaa</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">),(</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">,</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">bbb</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">),(</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">ccc</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)),</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">org</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #FFCB6B\">apache</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #FFCB6B\">spark</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #FFCB6B\">HashPartitioner</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> rdd2</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[(</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">)] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">rdd.partitionBy(</span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">HashPartitioner</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">))</span></span></code></pre></div><p>③思考一个问题：如果重分区的分区器和当前 RDD 的分区器一样怎么办？</p>\n<p>思考一个问题：Spark 还有其他分区器吗？</p>\n<p>思考一个问题：如果想按照自己的方法进行数据分区怎么办？</p>\n<p>思考一个问题：哪那么多问题？</p>\n<p>（18）reduceByKey</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def reduceByKey(func: (V, V) &#x3D;&gt; V): RDD[(K, V)]</p>\n<p>def reduceByKey(func: (V, V) &#x3D;&gt; V, numPartitions: Int): RDD[(K, V)]</p></blockquote>\n<p>②函数说明</p>\n<p>可以将数据按照相同的 Key 对 Value 进行聚合</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">((</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">),(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">b</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">),(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">c</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">)))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD1.reduceByKey(_</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\">_)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD3 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD1.reduceByKey(_</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\">_, </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">)</span></span></code></pre></div><p>小功能：WordCount</p>\n<p>（19）groupByKey</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def groupByKey(): RDD[(K, Iterable[V])]</p>\n<p>def groupByKey(numPartitions: Int): RDD[(K, Iterable[V])]</p>\n<p>def groupByKey(partitioner: Partitioner): RDD[(K, Iterable[V])]</p></blockquote>\n<p>②函数说明</p>\n<p>将数据源的数据根据 key 对 value 进行分组</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">((</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">),(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">b</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">),(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">c</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">)))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD1.groupByKey()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD3 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD1.groupByKey(</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD4 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD1.groupByKey(</span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">HashPartitioner</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">))</span></span></code></pre></div><p>③思考一个问题：reduceByKey 和 groupByKey 的区别？</p>\n<p><strong><strong>从 shuffle 的角度</strong></strong>：reduceByKey 和 groupByKey 都存在 shuffle 的操作，但是 reduceByKey 可以在 shuffle 前对分区内相同 key 的数据进行预聚合（combine）功能，这样会减少落盘的 数据量，而 groupByKey 只是进行分组，不存在数据量减少的问题，reduceByKey 性能比较 高。</p>\n<p><strong><strong>从功能的角度：reduceByKey</strong></strong> 其实包含分组和聚合的功能。GroupByKey 只能分组，不能聚 合，所以在分组聚合的场合下，推荐使用 reduceByKey，如果仅仅是分组而不需要聚合。那 么还是只能使用 groupByKey</p>\n<p>（20）aggregateByKey</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def aggregateByKey[U: ClassTag](zeroValue: U)(seqOp: (U, V) &#x3D;&gt; U,</p>\n<p>combOp: (U, U) &#x3D;&gt; U): RDD[(K, U)]</p></blockquote>\n<p>②函数说明</p>\n<p>将数据根据不同的规则进行分区内计算和分区间计算</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">((</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">),(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">b</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">),(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">c</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">)))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD1.aggregateByKey(</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #BABED8\">)(_</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\">_,_</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\">_)</span></span></code></pre></div><p>❖ 取出每个分区内相同 key 的最大值然后分区间相加</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// TODO : 取出每个分区内相同 key 的最大值然后分区间相加</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// aggregateByKey 算子是函数柯里化，存在两个参数列表</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 1. 第一个参数列表中的参数表示初始值</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 2. 第二个参数列表中含有两个参数</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">//  2.1 第一个参数表示分区内的计算规则</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">//  2.2 第二个参数表示分区间的计算规则</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> rdd </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">),(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">),(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">c</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">),</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">b</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">),(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">c</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">5</span><span style=\"color: #BABED8\">),(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">c</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">6</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">),</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 0:(&quot;a&quot;,1),(&quot;a&quot;,2),(&quot;c&quot;,3) =&gt; (a,10)(c,10) =&gt; (a,10)(b,10)(c,20)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 1:(&quot;b&quot;,4),(&quot;c&quot;,5),(&quot;c&quot;,6) =&gt; (b,10)(c,10)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> resultRDD </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">rdd.aggregateByKey(</span><span style=\"color: #F78C6C\">10</span><span style=\"color: #BABED8\">)(</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">(x, y) </span><span style=\"color: #89DDFF\">=&gt;</span><span style=\"color: #BABED8\"> math.max(x,y),</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">(x, y) </span><span style=\"color: #89DDFF\">=&gt;</span><span style=\"color: #BABED8\"> x </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> y</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">resultRDD.collect().foreach(println)</span></span></code></pre></div><p>思考一个问题：分区内计算规则和分区间计算规则相同怎么办？（WordCount）</p>\n<p>（21）foldByKey</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def foldByKey(zeroValue: V)(func: (V, V) &#x3D;&gt; V): RDD[(K, V)]</p></blockquote>\n<p>②函数说明</p>\n<p>当分区内计算规则和分区间计算规则相同时，aggregateByKey 就可以简化为 foldByKey</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">((</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">),(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">b</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">),(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">c</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">)))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD1.foldByKey(</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #BABED8\">)(_</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\">_)</span></span></code></pre></div><p>（22）combineByKey</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def combineByKey[C](</p>\n<p>createCombiner: V &#x3D;&gt; C,</p>\n<p>mergeValue: (C, V) &#x3D;&gt; C,</p>\n<p>mergeCombiners: (C, C) &#x3D;&gt; C): RDD[(K, C)]</p></blockquote>\n<p>②函数说明</p>\n<p>最通用的对 key-value 型 rdd 进行聚集操作的聚集函数（aggregation function）。类似于 aggregate()，combineByKey()允许用户返回值的类型与输入不一致。</p>\n<p>小练习：将数据 List((“a”, 88), (“b”, 95), (“a”, 91), (“b”, 93), (“a”, 95), (“b”, 98))求每个 key 的平 均值</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> list</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">[(</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">)] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">((</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">88</span><span style=\"color: #BABED8\">), (</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">b</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">95</span><span style=\"color: #BABED8\">), (</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">91</span><span style=\"color: #BABED8\">), (</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">b</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">93</span><span style=\"color: #BABED8\">),</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">95</span><span style=\"color: #BABED8\">), (</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">b</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">98</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> input</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[(</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">)] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.makeRDD(list, </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> combineRdd</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[(</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">, (</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">))] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> input.combineByKey(</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">(_, </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">),</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">(</span><span style=\"color: #BABED8; font-style: italic\">acc</span><span style=\"color: #BABED8\">: (</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">), v) </span><span style=\"color: #89DDFF\">=&gt;</span><span style=\"color: #BABED8\"> (acc._1 </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> v, acc._2 </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">),</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">(</span><span style=\"color: #BABED8; font-style: italic\">acc1</span><span style=\"color: #BABED8\">: (</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">), </span><span style=\"color: #BABED8; font-style: italic\">acc2</span><span style=\"color: #BABED8\">: (</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">)) </span><span style=\"color: #89DDFF\">=&gt;</span><span style=\"color: #BABED8\"> (acc1._1 </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> acc2._1, acc1._2 </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> acc2._2))</span></span></code></pre></div><p>思考一个问题：reduceByKey、foldByKey、aggregateByKey、combineByKey 的区别？</p>\n<p>reduceByKey: 相同 key 的第一个数据不进行任何计算，分区内和分区间计算规则相同 FoldByKey: 相同 key 的第一个数据和初始值进行分区内计算，分区内和分区间计算规则相同</p>\n<p>AggregateByKey：相同 key 的第一个数据和初始值进行分区内计算，分区内和分区间计算规 则可以不相同</p>\n<p>CombineByKey:当计算时，发现数据结构不满足要求时，可以让第一个数据转换结构。分区 内和分区间计算规则不相同。</p>\n<p>（23）sortByKey</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def sortByKey(ascending: Boolean &#x3D; true, numPartitions: Int &#x3D; self.partitions.length)</p>\n<p>: RDD[(K, V)]</p></blockquote>\n<p>②函数说明</p>\n<p>在一个(K,V)的 RDD 上调用，K 必须实现 Ordered 接口(特质)，返回一个按照 key 进行排序的</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">((</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">),(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">b</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">),(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">c</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">)))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> sortRDD1</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[(</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">)] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD1.sortByKey(</span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> sortRDD1</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[(</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">)] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD1.sortByKey(</span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">)</span></span></code></pre></div><p>（24）join</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def join[W](other: RDD[(K, W)]): RDD[(K, (V, W))]</p></blockquote>\n<p>②函数说明</p>\n<p>在类型为(K,V)和(K,W)的 RDD 上调用，返回一个相同 key 对应的所有元素连接在一起的 (K,(V,W))的 RDD</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> rdd</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[(</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">)] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.makeRDD(</span><span style=\"color: #FFCB6B\">Array</span><span style=\"color: #BABED8\">((</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">), (</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">b</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">), (</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">c</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> rdd1</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[(</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">)] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.makeRDD(</span><span style=\"color: #FFCB6B\">Array</span><span style=\"color: #BABED8\">((</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">), (</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">5</span><span style=\"color: #BABED8\">), (</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">6</span><span style=\"color: #BABED8\">)))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">rdd.join(rdd1).collect().foreach(println)</span></span></code></pre></div><p>思考一个问题：如果 key 存在不相等呢？</p>\n<p>（25）leftOuterJoin</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def leftOuterJoin[W](other: RDD[(K, W)]): RDD[(K, (V, Option[W]))]</p></blockquote>\n<p>②函数说明</p>\n<p>类似于 SQL 语句的左外连接</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">((</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">),(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">b</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">),(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">c</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">)))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">((</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">),(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">b</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">),(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">c</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">)))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> rdd</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[(</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">, (</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Option</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">]))] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> dataRDD1.leftOuterJoin(dataRDD2)</span></span></code></pre></div><p>（26）cogroup</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def cogroup[W](other: RDD[(K, W)]): RDD[(K, (Iterable[V], Iterable[W]))]</p></blockquote>\n<p>②函数说明</p>\n<p>在类型为(K,V)和(K,W)的 RDD 上调用，返回一个(K,(Iterable,Iterable))类型的 RDD</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">((</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">),(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">),(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">c</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">)))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> dataRDD2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sparkContext.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">((</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">),(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">c</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">),(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">c</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">)))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> value</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[(</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">, (</span><span style=\"color: #FFCB6B\">Iterable</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">], </span><span style=\"color: #FFCB6B\">Iterable</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">]))] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">dataRDD1.cogroup(dataRDD2)</span></span></code></pre></div><p><strong><strong><strong>5.1.4.5 RDD 行动算子</strong></strong></strong></p>\n<p>（1）reduce</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def reduce(f: (T, T) &#x3D;&gt; T): T</p></blockquote>\n<p>②函数说明</p>\n<p>聚集 RDD 中的所有元素，先聚合分区内数据，再聚合分区间数据</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> rdd</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 聚合数据</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> reduceResult</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> rdd.reduce(_</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\">_)</span></span></code></pre></div><p>（2）collect</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def collect(): Array[T]</p></blockquote>\n<p>②函数说明</p>\n<p>在驱动程序中，以数组 Array 的形式返回数据集的所有元素</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> rdd</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 收集数据到</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">Driver</span><span style=\"color: #BABED8\"> rdd.collect().foreach(println)</span></span></code></pre></div><p>（3）count</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def count(): Long</p></blockquote>\n<p>②函数说明</p>\n<p>返回 RDD 中元素的个数</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> rdd</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// 返回 RDD 中元素的个数</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> countResult</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Long</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> rdd.count()</span></span></code></pre></div><p>（4）first</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def first(): T</p></blockquote>\n<p>②函数说明</p>\n<p>返回 RDD 中的第一个元素</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> rdd</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 返回 RDD 中元素的个数</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> firstResult</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> rdd.first() println(firstResult)</span></span></code></pre></div><p>（5）take</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def take(num: Int): Array[T]</p></blockquote>\n<p>②函数说明</p>\n<p>返回该 RDD 排序后的前 n 个元素组成的数组</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> rdd</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 返回 RDD 中元素的个数</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> takeResult</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Array</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> rdd.take(</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">println(takeResult.mkString(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">,</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">))</span></span></code></pre></div><p>（6）takeOrdered</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def takeOrdered(num: Int)(implicit ord: Ordering[T]): Array[T]</p></blockquote>\n<p>②函数说明</p>\n<p>返回该 RDD 排序后的前 n 个元素组成的数组</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> rdd</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 返回 RDD 中元素的个数</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> result</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Array</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> rdd.takeOrdered(</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">)</span></span></code></pre></div><p>（7）aggregate</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def aggregate[U: ClassTag](zeroValue: U)(seqOp: (U, T)</p>\n<p>=&gt; U, combOp: (U, U) &#x3D;&gt; U): U</p></blockquote>\n<p>②函数说明</p>\n<p>分区的数据通过初始值和分区内的数据进行聚合，然后再和初始值进行分区间的数据聚合</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> rdd</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">), </span><span style=\"color: #F78C6C\">8</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 将该 RDD 所有元素相加得到结果</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">//val result: Int = rdd.aggregate(0)(_ + _, _ + _)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> result</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> rdd.aggregate(</span><span style=\"color: #F78C6C\">10</span><span style=\"color: #BABED8\">)(_ </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> _, _ </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> _)</span></span></code></pre></div><p>（8）fold</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def fold(zeroValue: T)(op: (T, T) &#x3D;&gt; T): T</p></blockquote>\n<p>②函数说明</p>\n<p>折叠操作，aggregate 的简化版操作</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> rdd</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> foldResult</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> rdd.fold(</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #BABED8\">)(_</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\">_)</span></span></code></pre></div><p>（9）countByKey</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def countByKey(): Map[K, Long]</p></blockquote>\n<p>②函数说明</p>\n<p>统计每种 key 的个数</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> rdd</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[(</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">)] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">((</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">), (</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">),</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">), (</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">b</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">), (</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">c</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">), (</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">c</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 统计每种 key 的个数</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> result</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> collection.</span><span style=\"color: #FFCB6B\">Map</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Long</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> rdd.countByKey()</span></span></code></pre></div><p>（10）save 相关算子</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def saveAsTextFile(path: String): Unit</p>\n<p>def saveAsObjectFile(path: String): Unit</p>\n<p>def saveAsSequenceFile(</p>\n<p>path: String,</p>\n<p>codec: Option[Class[ _ &lt;: CompressionCodec]] &#x3D; None) : Unit</p></blockquote>\n<p>②函数说明</p>\n<p>将数据保存到不同格式的文件中</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">//保存和读取的路径都可以是本地也可是hdfs</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 保存成 Text 文件</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">rdd.saveAsTextFile(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">output</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 序列化成对象保存到文件</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">rdd.saveAsObjectFile(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">output1</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 保存成 Sequencefile 文件</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">rdd.map((_,</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">)).saveAsSequenceFile(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">output2</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">rdd.saveAsTextFile(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hdfs://master:9000/user/rdd</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">rdd.saveAsObjectFile(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hdfs://master:9000/user/rdd</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">rdd.saveAsSequenceFile(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hdfs://master:9000/user/rdd</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span></code></pre></div><p>（11）foreach</p>\n<p>①函数签名：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>def foreach(f: T &#x3D;&gt; Unit): Unit &#x3D; withScope {<!-- --></p>\n<p>val cleanF &#x3D; sc.clean(f)</p>\n<p>sc.runJob(this, (iter: Iterator[T]) &#x3D;&gt; iter.foreach(cleanF))</p>\n<p>} </p></blockquote>\n<p>②函数说明</p>\n<p>分布式遍历 RDD 中的每一个元素，调用指定函数</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> rdd</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 收集后打印</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">rdd.map(num</span><span style=\"color: #89DDFF\">=&gt;</span><span style=\"color: #BABED8\">num).collect().foreach(println)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">println(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">****************</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 分布式打印</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">rdd.foreach(println)</span></span></code></pre></div><p><strong><strong><strong>5.1.4.6 RDD 序列化</strong></strong></strong></p>\n<p>1) 闭包检查</p>\n<p>从计算的角度, 算子以外的代码都是在 Driver 端执行, 算子里面的代码都是在 Executor 端执行。那么在 scala 的函数式编程中，就会导致算子内经常会用到算子外的数据，这样就 形成了闭包的效果，如果使用的算子外的数据无法序列化，就意味着无法传值给 Executor 端执行，就会发生错误，所以需要在执行任务计算前，检测闭包内的对象是否可以进行序列 化，这个操作我们称之为闭包检测。Scala2.12 版本后闭包编译方式发生了改变</p>\n<p>2) 序列化方法和属性</p>\n<p>从计算的角度, 算子以外的代码都是在 Driver 端执行, 算子里面的代码都是在 Executor 端执行，看如下代码：</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">object</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">serializable02_function</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">def</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">main</span><span style=\"color: #BABED8\">(</span><span style=\"color: #BABED8; font-style: italic\">args</span><span style=\"color: #BABED8\">: </span><span style=\"color: #FFCB6B\">Array</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">])</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Unit</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//1.创建 SparkConf 并设置 App 名称</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> conf</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SparkConf</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">SparkConf</span><span style=\"color: #BABED8\">().setAppName(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">SparkCoreTest</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">).setMaster(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">local[*]</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//2.创建 SparkContext，该对象是提交 Spark App 的入口</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> sc</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SparkContext</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SparkContext</span><span style=\"color: #BABED8\">(conf)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//3.创建一个 RDD</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> rdd</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.makeRDD(</span><span style=\"color: #FFCB6B\">Array</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hello world</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hello spark</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hive</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">atguigu</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//3.1 创建一个 Search 对象</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> search </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Search</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hello</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//3.2 函数传递，打印：ERROR Task not serializable</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> search.getMatch1(rdd).collect().foreach(println)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//3.3 属性传递，打印：ERROR Task not serializable</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> search.getMatch2(rdd).collect().foreach(println)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//4.关闭连接</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> sc.stop()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Search</span><span style=\"color: #BABED8\">(query</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">) </span><span style=\"color: #89DDFF\">extends</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Serializable</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">def</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">isMatch</span><span style=\"color: #BABED8\">(</span><span style=\"color: #BABED8; font-style: italic\">s</span><span style=\"color: #BABED8\">: </span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">)</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Boolean</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> s.contains(query)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// 函数序列化案例</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">def</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">getMatch1</span><span style=\"color: #BABED8\"> (</span><span style=\"color: #BABED8; font-style: italic\">rdd</span><span style=\"color: #BABED8\">: </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">])</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//rdd.filter(this.isMatch)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> rdd.filter(isMatch)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 属性序列化案例</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">def</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">getMatch2</span><span style=\"color: #BABED8\">(</span><span style=\"color: #BABED8; font-style: italic\">rdd</span><span style=\"color: #BABED8\">: </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">])</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//rdd.filter(x =&gt; x.contains(this.query))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> rdd.filter(x </span><span style=\"color: #89DDFF\">=&gt;</span><span style=\"color: #BABED8\"> x.contains(query))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//val q = query</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//rdd.filter(x =&gt; x.contains(q))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>3) Kryo 序列化框架</p>\n<p>参考地址: <a href=\"https://github.com/EsotericSoftware/kryo\">https://github.com/EsotericSoftware/kryo</a></p>\n<p>Java 的序列化能够序列化任何的类。但是比较重（字节多），序列化后，对象的提交也 比较大。Spark 出于性能的考虑，Spark2.0 开始支持另外一种 Kryo 序列化机制。Kryo 速度 是 Serializable 的 10 倍。当 RDD 在 Shuffle 数据的时候，简单数据类型、数组和字符串类型 已经在 Spark 内部使用 Kryo 来序列化。</p>\n<p> 注意：即使使用 Kryo 序列化，也要继承 Serializable 接口。</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">object</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">serializable_Kryo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">def</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">main</span><span style=\"color: #BABED8\">(</span><span style=\"color: #BABED8; font-style: italic\">args</span><span style=\"color: #BABED8\">: </span><span style=\"color: #FFCB6B\">Array</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">])</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Unit</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> conf</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SparkConf</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SparkConf</span><span style=\"color: #BABED8\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> .setAppName(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">SerDemo</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> .setMaster(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">local[*]</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// 替换默认的序列化机制</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> .set(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">spark.serializer</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">org.apache.spark.serializer.KryoSerializer</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// 注册需要使用 kryo 序列化的自定义类</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> .registerKryoClasses(</span><span style=\"color: #FFCB6B\">Array</span><span style=\"color: #BABED8\">(</span><span style=\"color: #82AAFF\">classOf</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Searcher</span><span style=\"color: #BABED8\">]))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> sc </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SparkContext</span><span style=\"color: #BABED8\">(conf)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> rdd</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.makeRDD(</span><span style=\"color: #FFCB6B\">Array</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hello world</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hello atguigu</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">atguigu</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hahah</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">), </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> searcher </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Searcher</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hello</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> result</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> searcher.getMatchedRDD1(rdd)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> result.collect.foreach(println)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">case</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Searcher</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> query</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">) </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">def</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">isMatch</span><span style=\"color: #BABED8\">(</span><span style=\"color: #BABED8; font-style: italic\">s</span><span style=\"color: #BABED8\">: </span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">) </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> s.contains(query)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">def</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">getMatchedRDD1</span><span style=\"color: #BABED8\">(</span><span style=\"color: #BABED8; font-style: italic\">rdd</span><span style=\"color: #BABED8\">: </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">]) </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> rdd.filter(isMatch)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">def</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">getMatchedRDD2</span><span style=\"color: #BABED8\">(</span><span style=\"color: #BABED8; font-style: italic\">rdd</span><span style=\"color: #BABED8\">: </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">]) </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> q </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> query</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> rdd.filter(_.contains(q))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p><strong><strong><strong>5.1.4.7 RDD 依赖关系</strong></strong></strong></p>\n<p><strong><strong>1) RDD 血缘关系</strong></strong></p>\n<p>RDD 只支持粗粒度转换，即在大量记录上执行的单个操作。将创建 RDD 的一系列 Lineage （血统）记录下来，以便恢复丢失的分区。RDD 的 Lineage 会记录 RDD 的元数据信息和转 换行为，当该 RDD 的部分分区数据丢失时，它可以根据这些信息来重新运算和恢复丢失的 数据分区。</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> fileRDD</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.textFile(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">input/1.txt</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">println(fileRDD.toDebugString)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">println(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">----------------------</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> wordRDD</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> fileRDD.flatMap(_.split(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">println(wordRDD.toDebugString)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">println(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">----------------------</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> mapRDD</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[(</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">)] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> wordRDD.map((_,</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">println(mapRDD.toDebugString)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">println(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">----------------------</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> resultRDD</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[(</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">)] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> mapRDD.reduceByKey(_</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\">_)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">println(resultRDD.toDebugString)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">resultRDD.collect()</span></span></code></pre></div><p><strong><strong>2) RDD 依赖关系</strong></strong></p>\n<p>这里所谓的依赖关系，其实就是两个相邻 RDD 之间的关系</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> sc</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SparkContext</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SparkContext</span><span style=\"color: #BABED8\">(conf)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> fileRDD</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.textFile(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">input/1.txt</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">println(fileRDD.dependencies)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">println(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">----------------------</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> wordRDD</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> fileRDD.flatMap(_.split(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">println(wordRDD.dependencies)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">println(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">----------------------</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> mapRDD</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[(</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">)] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> wordRDD.map((_,</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">println(mapRDD.dependencies)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">println(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">----------------------</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> resultRDD</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[(</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">)] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> mapRDD.reduceByKey(_</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\">_)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">println(resultRDD.dependencies)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">resultRDD.collect()</span></span></code></pre></div><p><strong><strong>3) RDD 窄依赖</strong></strong> </p>\n<p>窄依赖表示每一个父(上游)RDD 的 Partition 最多被子（下游）RDD 的一个 Partition 使用， 窄依赖我们形象的比喻为独生子女。</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">OneToOneDependency</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #BABED8\">](</span><span style=\"color: #BABED8; font-style: italic\">rdd</span><span style=\"color: #BABED8\">: </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #BABED8\">]) </span><span style=\"color: #89DDFF\">extends</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">NarrowDependency</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #BABED8\">](rdd)</span></span></code></pre></div><p><strong><strong>4) RDD 宽依赖</strong></strong></p>\n<p>宽依赖表示同一个父（上游）RDD 的 Partition 被多个子（下游）RDD 的 Partition 依赖，会 引起 Shuffle，总结：宽依赖我们形象的比喻为多生。</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">ShuffleDependency</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">K</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">ClassTag</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">V</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">ClassTag</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">C</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">ClassTag</span><span style=\"color: #BABED8\">](</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #BABED8\">transient </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> _rdd</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[_ </span><span style=\"color: #89DDFF\">&lt;:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Product2</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">K</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">V</span><span style=\"color: #BABED8\">]],</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> partitioner</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Partitioner</span><span style=\"color: #BABED8\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> serializer</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Serializer</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">SparkEnv</span><span style=\"color: #BABED8\">.get.serializer,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> keyOrdering</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Option</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Ordering</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">K</span><span style=\"color: #BABED8\">]] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">None</span><span style=\"color: #BABED8\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> aggregator</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Option</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Aggregator</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">K</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">V</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">C</span><span style=\"color: #BABED8\">]] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">None</span><span style=\"color: #BABED8\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> mapSideCombine</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Boolean</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">extends</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Dependency</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">Product2</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">K</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">V</span><span style=\"color: #BABED8\">]]</span></span></code></pre></div><p><strong><strong>5) RDD 阶段划分</strong></strong></p>\n<p>DAG（Directed Acyclic Graph）有向无环图是由点和线组成的拓扑图形，该图形具有方向， 不会闭环。例如，DAG 记录了 RDD 的转换过程和任务的阶段。</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/05f015673ba2d749f2776baa8078aebb.png\"></p>\n<p><strong><strong>6) RDD 任务划分</strong></strong></p>\n<p>RDD 任务切分中间分为：Application、Job、Stage 和 Task</p>\n<p>⚫ Application：初始化一个 SparkContext 即生成一个 Application；</p>\n<p>⚫ Job：一个 Action 算子就会生成一个 Job；</p>\n<p>⚫ Stage：Stage 等于宽依赖(ShuffleDependency)的个数加 1；</p>\n<p>⚫ Task：一个 Stage 阶段中，最后一个 RDD 的分区个数就是 Task 的个数。</p>\n<p>注意：Application-&gt;Job-&gt;Stage-&gt;Task 每一层都是 1 对 n 的关系。</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/1d17abe614a84d95dae387e26b6ffeb1.png\"></p>\n<p><strong><strong><strong>5.1.4.8 RDD 持久化</strong></strong></strong></p>\n<p><strong><strong>1) RDD Cache 缓存</strong></strong></p>\n<p> RDD 通过 Cache 或者 Persist 方法将前面的计算结果缓存，默认情况下会把数据以缓存 在 JVM 的堆内存中。但是并不是这两个方法被调用时立即缓存，而是触发后面的 action 算 子时，该 RDD 将会被缓存在计算节点的内存中，并供后面重用。</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// cache 操作会增加血缘关系，不改变原有的血缘关系</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">println(wordToOneRdd.toDebugString)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 数据缓存。</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">wordToOneRdd.cache()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 可以更改存储级别</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">//mapRdd.persist(StorageLevel.MEMORY_AND_DISK_2)存储级别</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">object</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">StorageLevel</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> NONE </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">StorageLevel</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> DISK_ONLY </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">StorageLevel</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> DISK_ONLY_2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">StorageLevel</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> MEMORY_ONLY </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">StorageLevel</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> MEMORY_ONLY_2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">StorageLevel</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> MEMORY_ONLY_SER </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">StorageLevel</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> MEMORY_ONLY_SER_2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">StorageLevel</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> MEMORY_AND_DISK </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">StorageLevel</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> MEMORY_AND_DISK_2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">StorageLevel</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> MEMORY_AND_DISK_SER </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">StorageLevel</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> MEMORY_AND_DISK_SER_2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">StorageLevel</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> OFF_HEAP </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">StorageLevel</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">true</span><span style=\"color: #BABED8\">, </span><span style=\"color: #89DDFF\">false</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">)</span></span></code></pre></div><p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/b64bcac3ac108b14d3626e42cb415fbd.png\"></p>\n<p>缓存有可能丢失，或者存储于内存的数据由于内存不足而被删除，RDD 的缓存容错机 制保证了即使缓存丢失也能保证计算的正确执行。通过基于 RDD 的一系列转换，丢失的数 据会被重算，由于 RDD 的各个 Partition 是相对独立的，因此只需要计算丢失的部分即可， 并不需要重算全部 Partition。</p>\n<p>Spark 会自动对一些 Shuffle 操作的中间数据做持久化操作(比如：reduceByKey)。这样 做的目的是为了当一个节点 Shuffle 失败了避免重新计算整个输入。但是，在实际使用的时 候，如果想重用数据，仍然建议调用 persist 或 cache。</p>\n<p><strong><strong>2) RDD CheckPoint 检查点</strong></strong></p>\n<p>所谓的检查点其实就是通过将 RDD 中间结果写入磁盘 由于血缘依赖过长会造成容错成本过高，这样就不如在中间阶段做检查点容错，如果检查点 之后有节点出现问题，可以从检查点开始重做血缘，减少了开销。 对 RDD 进行 checkpoint 操作并不会马上被执行，必须执行 Action 操作才能触发。</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 设置检查点路径</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">sc.setCheckpointDir(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">./checkpoint1</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 创建一个 RDD，读取指定位置文件:hello atguigu atguigu</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> lineRdd</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.textFile(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">input/1.txt</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 业务逻辑</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> wordRdd</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> lineRdd.flatMap(line </span><span style=\"color: #89DDFF\">=&gt;</span><span style=\"color: #BABED8\"> line.split(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> wordToOneRdd</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[(</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Long</span><span style=\"color: #BABED8\">)] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> wordRdd.map </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> word </span><span style=\"color: #89DDFF\">=&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> (word, </span><span style=\"color: #FFCB6B\">System</span><span style=\"color: #BABED8\">.currentTimeMillis())</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 增加缓存,避免再重新跑一个 job 做 checkpoint</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">wordToOneRdd.cache()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 数据检查点：针对 wordToOneRdd 做检查点计算</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">wordToOneRdd.checkpoint()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 触发执行逻辑</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">wordToOneRdd.collect().foreach(println)</span></span></code></pre></div><p><strong><strong>3) 缓存和检查点区别</strong></strong></p>\n<p>1）Cache 缓存只是将数据保存起来，不切断血缘依赖。Checkpoint 检查点切断血缘依赖。</p>\n<p>2）Cache 缓存的数据通常存储在磁盘、内存等地方，可靠性低。Checkpoint 的数据通常存 储在 HDFS 等容错、高可用的文件系统，可靠性高。</p>\n<p>3）建议对 checkpoint()的 RDD 使用 Cache 缓存，这样 checkpoint 的 job 只需从 Cache 缓存 中读取数据即可，否则需要再从头计算一次 RDD。</p>\n<p><strong><strong><strong>5.1.4.9 RDD 分区器</strong></strong></strong></p>\n<p>Spark 目前支持 Hash 分区和 Range 分区，和用户自定义分区。Hash 分区为当前的默认 分区。分区器直接决定了 RDD 中分区的个数、RDD 中每条数据经过 Shuffle 后进入哪个分 区，进而决定了 Reduce 的个数。</p>\n<p>➢ 只有 Key-Value 类型的 RDD 才有分区器，非 Key-Value 类型的 RDD 分区的值是 None</p>\n<p>➢ 每个 RDD 的分区 ID 范围：0 ~ (numPartitions - 1)，决定这个值是属于那个分区的。</p>\n<p><strong><strong>1)Hash 分区</strong></strong>：对于给定的 key，计算其 hashCode,并除以分区个数取余</p>\n<p><strong><strong>2) Range 分区：</strong></strong></p>\n<p>将一定范围内的数据映射到一个分区中，尽量保证每个分区数据均匀，而 且分区间有序</p>\n<p><strong><strong><strong>5.1.4.10 RDD 文件读取与保存</strong></strong></strong></p>\n<p>Spark 的数据读取及数据保存可以从两个维度来作区分：文件格式以及文件系统。 文件格式分为：text 文件、csv 文件、sequence 文件以及 Object 文件； 文件系统分为：本地文件系统、HDFS、HBASE 以及数据库</p>\n<p>➢ text 文件</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 读取输入文件</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> inputRDD</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.textFile(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">input/1.txt</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 保存数据</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">inputRDD.saveAsTextFile(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">output</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">) </span></span></code></pre></div><p>➢ sequence 文件</p>\n<p>SequenceFile 文件是 Hadoop 用来存储二进制形式的 key-value 对而设计的一种平面文件(Flat File)。在 SparkContext 中，可以调用 sequenceFile[keyClass, valueClass](path)。</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 保存数据为 SequenceFile</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">dataRDD.saveAsSequenceFile(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">output</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 读取 SequenceFile 文件</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">sc.sequenceFile[</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">,</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">](</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">output</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">).collect().foreach(println)</span></span></code></pre></div><p>➢ object 对象文件</p>\n<p>对象文件是将对象序列化后保存的文件，采用 Java 的序列化机制。可以通过 objectFile[T: ClassTag](path)函数接收一个路径，读取对象文件，返回对应的 RDD，也可以通过调用 saveAsObjectFile()实现对对象文件的输出。因为是序列化所以要指定类型。</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 保存数据</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">dataRDD.saveAsObjectFile(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">output</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 读取数据</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">sc.objectFile[</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">](</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">output</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">).collect().foreach(println)</span></span></code></pre></div><h3 id=\"5-2-累加器\"><a href=\"#5-2-累加器\" class=\"headerlink\" title=\"5.2 累加器\"></a><strong><strong><strong>5.2 累加器</strong></strong></strong></h3><h4 id=\"5-2-1-实现原理\"><a href=\"#5-2-1-实现原理\" class=\"headerlink\" title=\"5.2.1 实现原理\"></a><strong><strong><strong>5.2.1 实现原理</strong></strong></strong></h4><p>累加器用来把 Executor 端变量信息聚合到 Driver 端。在 Driver 程序中定义的变量，在 Executor 端的每个 Task 都会得到这个变量的一份新的副本，每个 task 更新这些副本的值后， 传回 Driver 端进行 merge。</p>\n<h4 id=\"5-2-2-基础编程\"><a href=\"#5-2-2-基础编程\" class=\"headerlink\" title=\"5.2.2 基础编程\"></a><strong><strong><strong>5.2.2 基础编程</strong></strong></strong></h4><p><strong><strong><strong>5.2.2.1 系统累加器</strong></strong></strong></p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> rdd </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">5</span><span style=\"color: #BABED8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 声明累加器</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">var</span><span style=\"color: #BABED8\"> sum </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.longAccumulator(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">sum</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">rdd.foreach(</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> num </span><span style=\"color: #89DDFF\">=&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// 使用累加器</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> sum.add(num)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 获取累加器的值</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">println(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">sum = </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> sum.value)</span></span></code></pre></div><p><strong><strong><strong>5.2.2.2 自定义累加器</strong></strong></strong></p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 自定义累加器</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 1. 继承 AccumulatorV2，并设定泛型</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 2. 重写累加器的抽象方法</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">WordCountAccumulator</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">extends</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">AccumulatorV2</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">, mutable.</span><span style=\"color: #FFCB6B\">Map</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">Long</span><span style=\"color: #BABED8\">]]</span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">var</span><span style=\"color: #BABED8\"> map </span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> mutable.</span><span style=\"color: #FFCB6B\">Map</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Long</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> mutable.</span><span style=\"color: #FFCB6B\">Map</span><span style=\"color: #BABED8\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 累加器是否为初始状态</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">override</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">def</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">isZero</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Boolean</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> map.isEmpty</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 复制累加器</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">override</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">def</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">copy</span><span style=\"color: #BABED8\">()</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">AccumulatorV2</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">, mutable.</span><span style=\"color: #FFCB6B\">Map</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Long</span><span style=\"color: #BABED8\">]] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">WordCountAccumulator</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 重置累加器</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">override</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">def</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">reset</span><span style=\"color: #BABED8\">()</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Unit</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> map.clear()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 向累加器中增加数据 (In)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">override</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">def</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">add</span><span style=\"color: #BABED8\">(</span><span style=\"color: #BABED8; font-style: italic\">word</span><span style=\"color: #BABED8\">: </span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">)</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Unit</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// 查询 map 中是否存在相同的单词</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// 如果有相同的单词，那么单词的数量加 1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// 如果没有相同的单词，那么在 map 中增加这个单词</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> map(word) </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> map.getOrElse(word, </span><span style=\"color: #F78C6C\">0L</span><span style=\"color: #BABED8\">) </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1L</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 合并累加器</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">override</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">def</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">merge</span><span style=\"color: #BABED8\">(</span><span style=\"color: #BABED8; font-style: italic\">other</span><span style=\"color: #BABED8\">: </span><span style=\"color: #FFCB6B\">AccumulatorV2</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">, mutable.</span><span style=\"color: #FFCB6B\">Map</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Long</span><span style=\"color: #BABED8\">]])</span><span style=\"color: #89DDFF\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">Unit</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> map1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> map</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> map2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> other.value</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// 两个 Map 的合并</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> map </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> map1.foldLeft(map2)(</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> ( innerMap, kv ) </span><span style=\"color: #89DDFF\">=&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> innerMap(kv._1) </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> innerMap.getOrElse(kv._1, </span><span style=\"color: #F78C6C\">0L</span><span style=\"color: #BABED8\">) </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> kv._2</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> innerMap</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 返回累加器的结果 （Out）</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">override</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">def</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">value</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> mutable.</span><span style=\"color: #FFCB6B\">Map</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Long</span><span style=\"color: #BABED8\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> map</span></span></code></pre></div><h3 id=\"5-3-广播变量\"><a href=\"#5-3-广播变量\" class=\"headerlink\" title=\"5.3 广播变量\"></a><strong><strong><strong>5.3 广播变量</strong></strong></strong></h3><p><strong><strong><strong>5.3.1 实现原理</strong></strong></strong></p>\n<p> 广播变量用来高效分发较大的对象。向所有工作节点发送一个较大的只读值，以供一个 或多个 Spark 操作使用。比如，如果你的应用需要向所有节点发送一个较大的只读查询表， 广播变量用起来都很顺手。在多个并行操作中使用同一个变量，但是 Spark 会为每个任务 分别发送。</p>\n<p>****** 5.3.2 基础编程******</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> rdd1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.makeRDD(</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">( (</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\">), (</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">b</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\">), (</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">c</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">3</span><span style=\"color: #BABED8\">), (</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">d</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">) ),</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> list </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">( (</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">,</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">), (</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">b</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">5</span><span style=\"color: #BABED8\">), (</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">c</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">6</span><span style=\"color: #BABED8\">), (</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">d</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">, </span><span style=\"color: #F78C6C\">7</span><span style=\"color: #BABED8\">) )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 声明广播变量</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> broadcast</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Broadcast</span><span style=\"color: #BABED8\">[</span><span style=\"color: #FFCB6B\">List</span><span style=\"color: #BABED8\">[(</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">)]] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> sc.broadcast(list)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">val</span><span style=\"color: #BABED8\"> resultRDD</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RDD</span><span style=\"color: #BABED8\">[(</span><span style=\"color: #FFCB6B\">String</span><span style=\"color: #BABED8\">, (</span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">, </span><span style=\"color: #FFCB6B\">Int</span><span style=\"color: #BABED8\">))] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> rdd1.map </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">case</span><span style=\"color: #BABED8\"> (key, num) </span><span style=\"color: #89DDFF\">=&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">var</span><span style=\"color: #BABED8\"> num2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// 使用广播变量</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> ((k, v) </span><span style=\"color: #89DDFF\">&lt;-</span><span style=\"color: #BABED8\"> broadcast.value) </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> (k </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> key) </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> num2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> v</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> (key, (num, num2))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>Article link： <a href=\"https://tqgoblin.site/post/csdn/Spark%E8%AF%A6%E8%A7%A3/\">https://tqgoblin.site/post/csdn/Spark详解/</a> <div align=left> Author：<a href=\"https://www.tqgoblin.site\"> Stephen </a> </div></p>\n","text":" 目录 第1章：Spark概述 1.1 Spark是什么 1.2 Spark and Hadoop 1.3 Spark on Hadoop 1.4 Spark核...","permalink":"/post/csdn/Spark详解","photos":[],"count_time":{"symbolsCount":"52k","symbolsTime":"48 mins."},"categories":[{"name":"大数据","slug":"大数据","count":7,"path":"api/categories/大数据.json"}],"tags":[{"name":"spark","slug":"spark","count":3,"path":"api/tags/spark.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC1%E7%AB%A0%EF%BC%9ASpark%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">第1章：Spark概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-Spark%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">1.1** Spark是什么**</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-Sparkand-Hadoop\"><span class=\"toc-text\">1.2** Sparkand Hadoop******</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-Sparkon-Hadoop\"><span class=\"toc-text\">1.3** Sparkon Hadoop**</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-Spark%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">1.4** Spark核心模块**</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC2%E7%AB%A0%EF%BC%9ASpark%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B\"><span class=\"toc-text\">第2章：Spark快速上手</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">2.1 创建Maven项目</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-1-%E5%A2%9E%E5%8A%A0Scala%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">2.1.1** 增加Scala插件**</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-2-%E5%A2%9E%E5%8A%A0%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">2.1.2** 增加依赖关系**</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-3-WordCount\"><span class=\"toc-text\">2.1.3 WordCount****</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-4-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86\"><span class=\"toc-text\">2.1.4** 异常处理**</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC3%E7%AB%A0%EF%BC%9ASpark%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">第3章：Spark运行环境</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-Local%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">3.1 Local模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-1-%E4%B8%8A%E4%BC%A0%E5%B9%B6%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">3.1.1 上传并解压缩文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-2-%E5%90%AF%E5%8A%A8Local%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">3.1.2 启动Local环境</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-3-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">3.1.3** 命令行工具**</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-4-%E9%80%80%E5%87%BA%E6%9C%AC%E5%9C%B0%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">3.1.4** 退出本地模式**</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-5-%E6%8F%90%E4%BA%A4%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">3.1.5** 提交应用**</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-Standalone%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">3.2** Standalone模式**</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-1-%E4%B8%8A%E4%BC%A0%E5%B9%B6%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">3.2.1** 上传并解压缩文件**</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-2-%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">3.2.2** 修改配置文件**</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-3-%E5%90%AF%E5%8A%A8%E9%9B%86%E7%BE%A4\"><span class=\"toc-text\">3.2.3** 启动集群**</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-4-%E6%8F%90%E4%BA%A4%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">3.2.4** 提交应用**</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-5-%E6%8F%90%E4%BA%A4%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">3.2.5** 提交参数说明**</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-6-%E9%85%8D%E7%BD%AE%E5%8E%86%E5%8F%B2%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">3.2.6** 配置历史服务**</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-7-%E9%85%8D%E7%BD%AE%E9%AB%98%E5%8F%AF%E7%94%A8%EF%BC%88HA%EF%BC%89\"><span class=\"toc-text\">3.2.7** 配置高可用（HA）**</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-Yarn%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">3.3 Yarn模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-1-%E4%B8%8A%E4%BC%A0%E5%B9%B6%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">3.3.1 上传并解压缩文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-2-%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">3.3.2** 修改配置文件**</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-3-%E5%90%AF%E5%8A%A8Hadoop%E9%9B%86%E7%BE%A4\"><span class=\"toc-text\">3.3.3** 启动Hadoop集群**</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-4-%E6%8F%90%E4%BA%A4%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">3.3.4** 提交应用**</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-5-%E9%85%8D%E7%BD%AE%E5%8E%86%E5%8F%B2%E6%9C%8D%E5%8A%A1%E5%99%A8\"><span class=\"toc-text\">3.3.5** 配置历史服务器**</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC4%E7%AB%A0%EF%BC%9ASpark%E8%BF%90%E8%A1%8C%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">第4章：Spark运行架构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E8%BF%90%E8%A1%8C%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">4.1** 运行架构**</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">4.2** 核心组件**</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-1-Driver\"><span class=\"toc-text\">4.2.1 Driver</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-2-Executor\"><span class=\"toc-text\">4.2.2 Executor</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-3-Master-Worker\"><span class=\"toc-text\">4.2.3 Master&amp;Worker</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-4-ApplicationMaster\"><span class=\"toc-text\">4.2.4 ApplicationMaster</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">4.3** 核心概念**</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-1-Executor%E4%B8%8ECore\"><span class=\"toc-text\">4.3.1** Executor与Core**</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-2-%E5%B9%B6%E8%A1%8C%E5%BA%A6%EF%BC%88Parallelism%EF%BC%89\"><span class=\"toc-text\">4.3.2** 并行度（Parallelism）**</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-3-%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE%EF%BC%88DAG%EF%BC%89\"><span class=\"toc-text\">4.3.3** 有向无环图（DAG）**</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">4.4** 提交流程**</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-4-1-Yarn-Clinet%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">4.4.1** Yarn**Clinet模式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-4-2-Yarn-Cluster%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">4.4.2 Yarn Cluster模式</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC5%E7%AB%A0%EF%BC%9ASpark%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">第5章：Spark核心编程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-RDD\"><span class=\"toc-text\">5.1 RDD</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-1-%E4%BB%80%E4%B9%88%E6%98%AFRDD\"><span class=\"toc-text\">5.1.1** 什么是RDD**</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-2-%E6%A0%B8%E5%BF%83%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">5.1.2** 核心属性**</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-3-%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">5.1.3** 执行原理**</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-4-%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">5.1.4** 基础编程**</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-%E7%B4%AF%E5%8A%A0%E5%99%A8\"><span class=\"toc-text\">5.2 累加器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-1-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">5.2.1 实现原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-2-%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">5.2.2 基础编程</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-%E5%B9%BF%E6%92%AD%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">5.3 广播变量</span></a></li></ol></li></ol>","author":{"name":"Stephen","slug":"blog-author","avatar":"../img/logo.png","link":"/","description":"Love and Share","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"SparkSQL详解","uid":"2350649905fde260e7257127a691caec","slug":"csdn/SparkSQL详解","date":"2023-02-06T09:00:19.000Z","updated":"2025-02-17T01:58:21.584Z","comments":true,"path":"api/articles/csdn/SparkSQL详解.json","keywords":"Stephen web3","cover":[],"text":" 目录 SparkSQL概述 什么是Spark SQL Spark SQL特点 什么是DataFrame RDD与DataFrame区别： 什么是DataSet...","permalink":"/post/csdn/SparkSQL详解","photos":[],"count_time":{"symbolsCount":"27k","symbolsTime":"24 mins."},"categories":[{"name":"大数据","slug":"大数据","count":7,"path":"api/categories/大数据.json"}],"tags":[{"name":"spark","slug":"spark","count":3,"path":"api/tags/spark.json"}],"author":{"name":"Stephen","slug":"blog-author","avatar":"../img/logo.png","link":"/","description":"Love and Share","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Hive详解","uid":"2ea5b3e3cf982dd223319a88f2e53a29","slug":"csdn/Hive详解","date":"2023-02-06T03:50:49.000Z","updated":"2025-02-17T01:58:21.589Z","comments":true,"path":"api/articles/csdn/Hive详解.json","keywords":"Stephen web3","cover":[],"text":" 目录 第1章 Hive基本概念 1.1 什么是Hive 1.2 Hive的优缺点 1.2.1 优点 1.2.2 缺点 1.3 Hive架构原理 1.4 Hiv...","permalink":"/post/csdn/Hive详解","photos":[],"count_time":{"symbolsCount":"80k","symbolsTime":"1:13"},"categories":[{"name":"大数据","slug":"大数据","count":7,"path":"api/categories/大数据.json"}],"tags":[{"name":"hive","slug":"hive","count":1,"path":"api/tags/hive.json"}],"author":{"name":"Stephen","slug":"blog-author","avatar":"../img/logo.png","link":"/","description":"Love and Share","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}