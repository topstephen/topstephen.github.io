{"title":"Docker","uid":"a48e6dda0c21e40880cba7e763278b04","slug":"csdn/Docker","date":"2021-03-26T08:52:57.000Z","updated":"2025-02-17T03:37:04.096Z","comments":true,"path":"api/articles/csdn/Docker.json","keywords":"Stephen web3","cover":[],"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"简介与概述\"><a href=\"#简介与概述\" class=\"headerlink\" title=\"简介与概述\"></a><strong><strong><strong>简介与概述</strong></strong></strong></h3><p>1.Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。</p>\n<p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p>\n<p>2.  Docker的主要目标是‘build ，ship and run any app，anywhere’，也就是说通过对应用程序组件的封装，分发，部署，运行等生命周期的管理。使用户的app（可以是一个web应用程序或者数据库应用等）<strong><strong>及其运行环境能够做到‘一次封装，到处运行’。</strong></strong></p>\n<p>3.Linux容器技术的出现解决了这个问题。而docker就是基于他的基础上发展过来的。将应用运行到docker容器上面，而docker容器在任何操作系统上都是一致的，这就是实现跨平台跨服务器。只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作。</p>\n<ol>\n<li>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</li>\n</ol>\n<p>5.Docker 从 17.03 版本之后分为 CE（Community Edition: 社区版） 和 EE（Enterprise Edition: 企业版），我们用社区版就可以了。</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/aac89d6d732d9ac214b7f3613fffbe58.png\"></p>\n<p>Docker实际上就是一个虚拟化轻量级linux服务器，可以解决我们在开发环境中运行配置问题。</p>\n<h4 id=\"为什么需要使用docker\"><a href=\"#为什么需要使用docker\" class=\"headerlink\" title=\"为什么需要使用docker\"></a><strong><strong><strong>为什么需要使用docker</strong></strong></strong></h4><p>Docker：虚拟化容器技术</p>\n<p>Docker主要解决我们开发环境配置迁移的问题。</p>\n<p>1.我们现在开发了一个javaweb项目，需要依赖很多环境配置 比如：Tomcat、JDK环境、Nginx、Redis环境等。</p>\n<p>2.本地需要安装这些环境Tomcat、JDK环境、Nginx、Redis环境等，在打war包给运维部署在linux服务器，运维人员也需要在linux服务器上安装Tomcat、JDK环境、Nginx、Redis环境。</p>\n<p>3.但是有时候可能会发生这些问题：我在本地运行环境没有问题，但是打包到Linux服务器运行总是遇到很多错误，大多数由于一些版本冲突影响。</p>\n<p>4.所以在这时候我们就可以使用docker部署和安装软件就非常方便，直接将该springboot项目制作成一个镜像文件，镜像文件中包含jdk版本 tomcat版本信息  直接部署linux即可，减少依赖冲突概率。</p>\n<p>看看linux安装mysql</p>\n<p><a href=\"https://blog.csdn.net/qq_42097051/article/details/113726893\" title=\"linux下在线安装mysql(完整版)_linux服务器在线安装mysql5.7_zhangsan分享之家的博客-CSDN博客\">linux下在线安装mysql(完整版)_linux服务器在线安装mysql5.7_zhangsan分享之家的博客-CSDN博客</a> 在不同的linux内核中安装</p>\n<p>Mysql很容易发生版本冲突的问题。</p>\n<p>在对比docker安装mysql</p>\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"vertical-align:top;width:414.8pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">docker pull mysql:5.7</p><p style=\"margin-left:.0001pt;text-align:justify;\">docker create --name mysql3308 -e MYSQL_ROOT_PASSWORD=root -p 3308:3306 mysql:5.7</p></td></tr><tr><td style=\"vertical-align:top;width:414.8pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\"></p></td></tr></tbody></table>\n\n<p>Docker最终解决了运行环境配置中的问题。—-镜像文件底层封装好了</p>\n<p>Springboot 核心思想—-</p>\n<h4 id=\"使用docker的好处\"><a href=\"#使用docker的好处\" class=\"headerlink\" title=\"使用docker的好处\"></a><strong><strong><strong>使用docker的好处</strong></strong></strong></h4><ol>\n<li>简化配置 安装创建非常的方便</li>\n<li>代码流水线（Code Pipeline）管理 传统项目部署可能需要经过很多环节，</li>\n</ol>\n<p>容易产生版本的依赖冲突问题，Docker给应用提供了一个从开发到上线均一致的环境，让代码的流水线变得简单不少</p>\n<ol>\n<li>Devops 开发与运维一体化减少沟通的成本 （docker或者是k8s实现）</li>\n<li>虚拟技术 快速部署</li>\n<li>弹性扩容</li>\n</ol>\n<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a><strong><strong><strong>应用场景</strong></strong></strong></h4><p>1.Web 应用的自动化打包和发布。</p>\n<p>2.自动化测试和持续集成、发布。</p>\n<p>3.在服务型环境中部署和调整数据库或其他的后台应用。</p>\n<p>4.从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。</p>\n<h4 id=\"容器与虚拟机区别\"><a href=\"#容器与虚拟机区别\" class=\"headerlink\" title=\"容器与虚拟机区别\"></a><strong><strong><strong>容器与虚拟机区别</strong></strong></strong></h4><p>什么是虚拟机：在一台物理机器上，利用虚拟化技术，虚拟出来多个操作系统，每个操作系统之间是隔离的。</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/f79ea0e45bea51c742a40009b0adcf78.png\"></p>\n<p>从下到上理解上图：</p>\n<p>最下面的一层就是物理机，可以是服务器，设置是一台个人电脑；</p>\n<p>电脑上需要安装操作系统，比如我们安装了win10的操作系统；</p>\n<p>再往上就是虚拟机软件了，比如我们常用的VirtualBox、VMWare，它们的作用是模拟计算机硬件；</p>\n<p>继续向上，就是虚拟机模拟出来的操作系统了；</p>\n<p>在虚拟的操作系统中，安装所需的软件、组件等。比如我们需要在虚拟操作系统中安装JDK、Tomcat等；</p>\n<p>最后就是具体的应用了，例如部署到Tomcat中。</p>\n<p>Docker ：Docker是开源的应用容器引擎</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/54eae92103800647035bab3b9581368b.png\"></p>\n<p> 依然从下往上看：</p>\n<p>最下面两层，概念同上。</p>\n<p>往上，可以看做Docker容器的管理器。</p>\n<p>依赖和应用都被打包成了Docker镜像。例如，JDK、Tomcat、应用都被打包在了一起，运行在Docker容器里，容器和容器间是隔离的。</p>\n<p>Docker和虚拟机的区别</p>\n<p>1.从两者的架构图上看，<strong><strong>虚拟机是在硬件级别进行虚拟化，模拟硬件搭建操作系统；而Docker是在操作系统的层面虚拟化，复用操作系统，运行Docker容器</strong></strong>。</p>\n<p>2.Docker的速度很快，秒级，而虚拟机的速度通常要按分钟计算。</p>\n<p>3.Docker所用的资源更少，性能更高。同样一个物理机器，Docker运行的镜像数量远多于虚拟机的数量。</p>\n<p>4.虚拟机实现了操作系统之间的隔离，Docker是进程之间的隔离，虚拟机隔离级别更高、安全性方面也更强。</p>\n<p>5.虚拟机和Docker各有优势，不存在谁替代掉谁的问题，很多企业都采用物理机上做虚拟机，虚拟机中跑Docker的方式。</p>\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"vertical-align:top;width:85.2pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">特性</p></td><td style=\"vertical-align:top;width:85.2pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">容器</p></td><td style=\"vertical-align:top;width:85.2pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">虚拟机</p></td></tr><tr><td style=\"vertical-align:top;width:85.2pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">启动速度</p></td><td style=\"vertical-align:top;width:85.2pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">秒级</p></td><td style=\"vertical-align:top;width:85.2pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">分钟级别</p></td></tr><tr><td style=\"vertical-align:top;width:85.2pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">硬盘使用</p></td><td style=\"vertical-align:top;width:85.2pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">一般为MB</p></td><td style=\"vertical-align:top;width:85.2pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">一般GB</p></td></tr><tr><td style=\"vertical-align:top;width:85.2pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">性能</p></td><td style=\"vertical-align:top;width:85.2pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">接近原生</p></td><td style=\"vertical-align:top;width:85.2pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">弱于</p></td></tr><tr><td style=\"vertical-align:top;width:85.2pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">系统支持量</p></td><td style=\"vertical-align:top;width:85.2pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">单机支持上千个容器</p></td><td style=\"vertical-align:top;width:85.2pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">一般几十个</p></td></tr><tr><td style=\"vertical-align:top;width:85.2pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">隔离性</p></td><td style=\"vertical-align:top;width:85.2pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">完全隔离</p></td><td style=\"vertical-align:top;width:85.2pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">完全隔离</p></td></tr></tbody></table>\n\n<h4 id=\"Docker官网\"><a href=\"#Docker官网\" class=\"headerlink\" title=\"Docker官网\"></a><strong><strong><strong>Docker官网</strong></strong></strong></h4><p><a href=\"https://docs.docker.com/\" title=\"Docker Docs: How to build, share, and run applications\">Docker Docs: How to build, share, and run applications</a></p>\n<p><a href=\"https://www.docker.com/\">https://www.docker.com/</a></p>\n<h3 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a><strong><strong><strong>Docker安装</strong></strong></strong></h3><p>Docker 要求 CentOS7 系统的内核版本在 3.10以上 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</p>\n<p>1、通过 uname -r 命令查看你当前的内核版本</p>\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"vertical-align:top;width:414.8pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">uname -r</p></td></tr></tbody></table>\n\n<ol>\n<li>使用 root 权限登录 Centos。确保 yum 包更新到最新。</li>\n</ol>\n<table border=\"1\" cellspacing=\"0\" style=\"margin-left:-.25pt;\"><tbody><tr><td style=\"vertical-align:top;width:415.05pt;\"><p><span style=\"background-color:#ffffff;\"><span style=\"color:#3d464d;\">yum -y update</span></span></p></td></tr><tr><td style=\"vertical-align:top;width:415.05pt;\"><p></p><p><img alt=\"\" height=\"644\" src=\"https://i-blog.csdnimg.cn/blog_migrate/54e8039701322f474554654f48beebf3.png\" width=\"977\"></p><p></p><p><span style=\"background-color:#ffffff;\"><span style=\"color:#3d464d;\">该过程大概需要维持10分钟左右</span></span></p></td></tr></tbody></table>\n\n<ol>\n<li>卸载旧版本(如果安装过旧版本的话)</li>\n</ol>\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"vertical-align:top;width:414.8pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#3d464d;\">yum remove docker docker-common docker-selinux docker-engine</span></span></p><p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"186\" src=\"https://i-blog.csdnimg.cn/blog_migrate/9e0d590eb84ca12a53ef13cbc6f6e5e4.png\" width=\"969\"></p><p></p><p style=\"margin-left:.0001pt;text-align:justify;\"></p></td></tr></tbody></table>\n\n<ol>\n<li>安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</li>\n</ol>\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"vertical-align:top;width:414.8pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#3d464d;\">yum install -y yum-utils device-mapper-persistent-data lvm2</span></span></p><p style=\"margin-left:.0001pt;text-align:justify;\"><img alt=\"\" height=\"339\" src=\"https://i-blog.csdnimg.cn/blog_migrate/fe5b8ac48cc9f60e035e1687f5b83cfb.png\" width=\"707\"></p><p style=\"margin-left:.0001pt;text-align:justify;\"></p></td></tr></tbody></table>\n\n<ol>\n<li>设置yum源</li>\n</ol>\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"vertical-align:top;width:414.8pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#3d464d;\">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span></span></p></td></tr></tbody></table>\n\n<ol>\n<li>可以查看所有仓库中所有docker版本，并选择特定版本安装</li>\n</ol>\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"vertical-align:top;width:414.8pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#3d464d;\">yum list docker-ce --showduplicates | sort -r</span></span></p></td></tr></tbody></table>\n\n<ol>\n<li>安装docker</li>\n</ol>\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"vertical-align:top;width:414.8pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#3d464d;\">sudo yum install -y docker-ce &nbsp;&nbsp;&nbsp;&nbsp;#由于repo中默认只开启stable仓库，故这里安装的是最新稳定版18.03.1</span></span></p></td></tr></tbody></table>\n\n<ol>\n<li>启动并加入开机启动</li>\n</ol>\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"vertical-align:top;width:414.8pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#3d464d;\">systemctl start docker</span></span></p><p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#3d464d;\">systemctl enable docker</span></span></p></td></tr></tbody></table>\n\n<ol>\n<li>验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</li>\n</ol>\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"vertical-align:top;width:414.8pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#3d464d;\">docker version</span></span></p></td></tr></tbody></table>\n\n<h3 id=\"Docker快速入门\"><a href=\"#Docker快速入门\" class=\"headerlink\" title=\"Docker快速入门\"></a><strong><strong><strong>Docker快速入门</strong></strong></strong></h3><h4 id=\"Docker核心名词\"><a href=\"#Docker核心名词\" class=\"headerlink\" title=\"Docker核心名词\"></a><strong><strong><strong>Docker核心名词</strong></strong></strong></h4><p>镜像文件</p>\n<p>容器</p>\n<p>仓库</p>\n<p>镜像:简单理解为就是一个安装包，里面包含容器所需要运行的的基础文件和配置信息</p>\n<p>，比如：redis镜像、mysql镜像等。</p>\n<p>镜像的来源方式：</p>\n<ol>\n<li>自己做镜像  比如（自己开发微服务项目）</li>\n<li>拉取别人制作好的镜像， 例如 nginx、mysql、redis等。</li>\n</ol>\n<p>容器: 容器就是镜像运行的实例，容器状态分为：初创建、运行、停止、暂停、删除， 一个镜像可以创建多个不同的容器。</p>\n<p>每个镜像文件都有自己独立ip信息—轻量级的linux服务器 虚拟化</p>\n<p>比如：镜像就是类  容器就是实例对象</p>\n<p>仓库: 仓库可以简单理解为，专门存储镜像文件仓库， 类似于 谷歌手机市场，统一在</p>\n<p>谷歌手机市场下载开发者的安装包。</p>\n<p>Docker 公开仓库地址： Docker hub</p>\n<p><a href=\"https://hub.docker.com/\" title=\"Docker\">Docker</a></p>\n<p>Docker官方仓库：<a href=\"https://hub.docker.com/\" title=\"Docker\">Docker</a> -—访问比较慢</p>\n<p>宿主机：当前win7操作系统</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/de07cd5b338b8482ef1d3fde5b5f0baf.png\"></p>\n<ol>\n<li>需要制作镜像文件（springboot项目）——类似于开发者开发安装应用程序打包</li>\n<li>需要将我们制作好的镜像文件提交到docker仓库中—–开发者将自己的app应用程序发布安卓手机助手中。</li>\n<li>本地需要拉去我们docker仓库中下载镜像文件，在交给我们容器运行—用户从app市场中下载安装包运行。</li>\n</ol>\n<p>1.在需要制作镜像文件，将该镜像文件发布到docker仓库</p>\n<p>docker仓库 dockerhub -—谷歌安卓手机市场   国内加速镜像</p>\n<p>阿里云、网易、科大（）—-360、小米、华为。</p>\n<ol>\n<li>从docker仓库下载镜像文件—–用户从手机市场中，下载软件。</li>\n<li>docker运行镜像文件—-容器—独立ip访问信息—–端口号码映射</li>\n</ol>\n<h4 id=\"Docker下载镜像原理\"><a href=\"#Docker下载镜像原理\" class=\"headerlink\" title=\"Docker下载镜像原理\"></a><strong><strong><strong>Docker下载镜像原理</strong></strong></strong></h4><p>Docker  pull 从远程docker 官方仓库下载 镜像，到本地，在使用容器运行该镜像。</p>\n<p>注意的是：docker官方镜像仓库地址部署在国外，下载镜像可能比较慢，建议配置国内加速镜像</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/ad5295b7e6ff891ee137feee80d5751e.png\"></p>\n<h4 id=\"Docker加载镜像配置\"><a href=\"#Docker加载镜像配置\" class=\"headerlink\" title=\"Docker加载镜像配置\"></a><strong><strong><strong>Docker加载镜像配置</strong></strong></strong></h4><p><a href=\"https://hub.docker.com/search?q=redis&type=image\" title=\"Docker\">Docker</a> -–在国外访问可能比较慢</p>\n<p>国内从 DockerHub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。Docker 官方和国内很多云服务商都提供了国内加速器服务，例如：</p>\n<p>科大镜像：<a href=\"https://docker.mirrors.ustc.edu.cn/\">https://docker.mirrors.ustc.edu.cn/</a></p>\n<p>网易：<a href=\"https://hub-mirror.c.163.com/\">https://hub-mirror.c.163.com/</a></p>\n<p>阿里云：https:&#x2F;&#x2F;&lt;你的ID&gt;.mirror.aliyuncs.com</p>\n<p>七牛云加速器：<a href=\"https://reg-mirror.qiniu.com/\">https://reg-mirror.qiniu.com</a></p>\n<p>当配置某一个加速器地址之后，若发现拉取不到镜像，请切换到另一个加速器地址。国内各大云服务商均提供了 Docker 镜像加速服务，建议根据运行 Docker 的云平台选择对应的镜像加速服务。</p>\n<h4 id=\"阿里云加速镜像配置\"><a href=\"#阿里云加速镜像配置\" class=\"headerlink\" title=\"阿里云加速镜像配置\"></a><strong><strong><strong>阿里云加速镜像配置</strong></strong></strong></h4><p>我的加速镜像：<a href=\"https://66mzqrih.mirror.aliyuncs.com/\">https://66mzqrih.mirror.aliyuncs.com</a> </p>\n<p>阿里云镜像获取地址：<a href=\"https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors%EF%BC%8C%E7%99%BB%E9%99%86%E5%90%8E%EF%BC%8C%E5%B7%A6%E4%BE%A7%E8%8F%9C%E5%8D%95%E9%80%89%E4%B8%AD%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E4%BD%A0%E7%9A%84%E4%B8%93%E5%B1%9E%E5%9C%B0%E5%9D%80%E4%BA%86%EF%BC%9A\">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors，登陆后，左侧菜单选中镜像加速器就可以看到你的专属地址了：</a></p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/8f39d6488e32b4a6357ed7c9fac0ed25.png\"></p>\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"vertical-align:top;width:426.1pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">sudo mkdir -p /etc/docker</p><p style=\"margin-left:.0001pt;text-align:justify;\">sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'</p><p style=\"margin-left:.0001pt;text-align:justify;\">{<!-- --></p><p style=\"margin-left:.0001pt;text-align:justify;\">&nbsp;&nbsp;\"registry-mirrors\": [\"https://66mzqrih.mirror.aliyuncs.com\"]</p><p style=\"margin-left:.0001pt;text-align:justify;\">}</p><p style=\"margin-left:.0001pt;text-align:justify;\">EOF</p><p style=\"margin-left:.0001pt;text-align:justify;\">sudo systemctl daemon-reload</p><p style=\"margin-left:.0001pt;text-align:justify;\">sudo systemctl restart docker</p></td></tr></tbody></table>\n\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/defa5018a8ecfec8ad9b63f62f10c934.png\"></p>\n<h4 id=\"如何查看加速镜像安装成功\"><a href=\"#如何查看加速镜像安装成功\" class=\"headerlink\" title=\"如何查看加速镜像安装成功\"></a><strong><strong><strong>如何查看加速镜像安装成功</strong></strong></strong></h4><p>输入：docker info</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/897d7ff2f3c9ee32878ea92602c904b9.png\"></p>\n<h3 id=\"Docker常用命令\"><a href=\"#Docker常用命令\" class=\"headerlink\" title=\"Docker常用命令\"></a><strong><strong><strong>Docker常用命令</strong></strong></strong></h3><p>docker --help  帮助命令</p>\n<h4 id=\"docker-–version\"><a href=\"#docker-–version\" class=\"headerlink\" title=\"docker –version\"></a><strong><strong><strong>docker –version</strong></strong></strong></h4><p>docker -version</p>\n<h4 id=\"docker-images\"><a href=\"#docker-images\" class=\"headerlink\" title=\"docker images\"></a><strong><strong><strong>docker images</strong></strong></strong></h4><p>查看本地images 镜像缓存</p>\n<p>docker images 查看本地镜像文件</p>\n<p>docker rmi -f kibana:5.6.9 -–删除镜像文件</p>\n<p>REPOSITORY 存储库名称</p>\n<p>Tag  镜像的标签  不写版本号码 默认下载最新latest镜像</p>\n<p>IMAGE ID  镜像id</p>\n<p>CREATED 创建时间</p>\n<p>SIZE 大小</p>\n<p>docker images -a</p>\n<p>docker images -q -–只显示镜像的id</p>\n<p>docker images --digests -–显示镜像的摘要信息</p>\n<p>docker images --no-trunc -–显示完整镜像信息</p>\n<p>docker rmi tomcat（镜像文件名称）</p>\n<h4 id=\"docker-search\"><a href=\"#docker-search\" class=\"headerlink\" title=\"docker search\"></a><strong><strong><strong>docker search</strong></strong></strong></h4><p>docker search mysql</p>\n<p><a href=\"https://hub.docker.com/\" title=\"Docker\">Docker</a></p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/b78bfa26c7e912e690a3ad7901910f60.png\"></p>\n<p> docker search -s 30 mysql  列出点赞数超过30以上。</p>\n<p><a href=\"https://github.com/docker-library/mysql/blob/d72fdef749b3b6c140e4b0d6a87f12737ed3554a/8.0/Dockerfile.debian\" title=\"latest\">latest</a> 表示为最新的镜像文件 mysql8.0版本</p>\n<h4 id=\"docker-pull\"><a href=\"#docker-pull\" class=\"headerlink\" title=\"docker pull\"></a><strong><strong><strong>docker pull</strong></strong></strong></h4><p>latest -—-tag 最新版本的镜像文件</p>\n<p>docker pull nginx:latest --默认的情况下 下载最新版本的镜像  可以通过</p>\n<p><a href=\"https://hub.docker.com//_/nginx/?tab=tags%5C&page=1%5C&ordering=last%5C_updated\">https://hub.docker.com/\\_/nginx\\?tab=tags\\&amp;page=1\\&amp;ordering=last\\_updated</a></p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/5e26b9e7347135b98d696e0c14d8d266.png\"></p>\n<h4 id=\"容器管理\"><a href=\"#容器管理\" class=\"headerlink\" title=\"容器管理\"></a><strong><strong><strong>容器管理</strong></strong></strong></h4><p><strong><strong><strong>查看容器信息</strong></strong></strong></p>\n<p>Docker  ps  获取到容器id</p>\n<p>docker inspect  1e07cc5cc78d</p>\n<p><strong><strong><strong>运行容器</strong></strong></strong></p>\n<p><strong><strong><strong>docker run</strong></strong></strong></p>\n<p>docker run -i（保持容器一直运行）-t（给容器一个伪终端）-d(后台运行，不直接进入容器) --name&#x3D;tomcat9.2（给启动容器起名字）-p 8080:8080(宿主:docker容器)tomcat:9.2(启动的容器)  【参数】(加入容器初始化命令)</p>\n<p>#通过 -it 启动的容器有两个特点 一创建就进入容器 exit退出容器 容器就会停止运行  -–交互式容器</p>\n<p>#通过 -id 创建的容器 docker exec -it tomcat9.2（–name起的名称）进入容器 exit退出容器 容器不会停止运行   -–守护式容器</p>\n<p>docker ps 查看正在运行的容器</p>\n<p>docker ps -a 查看运行和已经运行关闭大的容器</p>\n<p>docker stop tomcat8  关闭容器</p>\n<p>docker start tomcat8 启动容器</p>\n<p>docker rm tomcat8 删除容器</p>\n<p>docker inspect tomcat8 查看容器信息</p>\n<p>docker exec 参数  进入容器</p>\n<p><strong>docker run 运行原理</strong></p>\n<p>docker run mayikt</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/5501ad05d2a73df96078cbff4dfb3136.png\"></p>\n<p>简单描述：首先会先从本地获取获取mayikt镜像文件，如果本地没有该镜像文件则会去</p>\n<p>阿里云仓库查找该镜像文件，如果阿里云仓库也没有该镜像文件，则会报错找不到</p>\n<p>镜像文件。</p>\n<p>获取到镜像文件之后直接运行。</p>\n<p>详细描述：</p>\n<p>1.docker在本机缓存中  mayikt镜像文件，如果本地存在该镜像文件</p>\n<p>，则以该镜像文件作为模板在容器中运行。</p>\n<p>2.如果本地缓存中，没有mayikt镜像文件 则会从dockerhub 或者加速镜像中</p>\n<p>查找，如果查找不到的话，则返回错误找不到该镜像。</p>\n<ol>\n<li>如果能够查找到该镜像，则以该镜像作为模板运行。</li>\n</ol>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/69ecb20b8013416da6456d64262f5ff2.png\"></p>\n<p>每个容器都有自己独立的网络 ip信息 运行成功 就是一个轻量级linux操作系统</p>\n<p><strong>启动容器</strong></p>\n<p>docker start 容器id</p>\n<p><strong>停止容器</strong></p>\n<p>docker stop  容器id</p>\n<p><strong>删除容器</strong></p>\n<p>docker rm  容器id</p>\n<p><strong>进入容器中</strong></p>\n<p># 首先使用下面的命令，查看容器ID（CONTAINER ID）：</p>\n<p>docker ps -a</p>\n<p># 然后用下面的命令进入容器，就可以使用bash命令浏览容器里的文件：</p>\n<p>docker exec -it [CONTAINER ID] bash</p>\n<p># 有的镜像没有bash命令，可以用对应的shell，比如sh</p>\n<p>docker exec -it [CONTAINER ID] sh</p>\n<h4 id=\"Docker-镜像原理\"><a href=\"#Docker-镜像原理\" class=\"headerlink\" title=\"Docker 镜像原理\"></a><strong><strong><strong>Docker 镜像原理</strong></strong></strong></h4><p><strong><strong><strong>镜像是什么</strong></strong></strong></p>\n<p>基于docker安装tomcat服务器 是否需要配置jdk环境变量呢？</p>\n<p>docker安装tomcat:8 --jdk8 配置环境变量</p>\n<p>docker安装tomcat:9 --jdk9 配置环境变量</p>\n<p>如何封装配置环境依赖的呢？</p>\n<p>Dockerfile—文件</p>\n<p>Tomcat 100mb</p>\n<p>1.依赖于我们JDK 200mb</p>\n<p>2.Linux服务器centos 200mb</p>\n<p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境的开发软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p>\n<p>镜像文件的组成通过 Union fs</p>\n<p>运行我们tomcat镜像文件</p>\n<p>tomcat镜像文件</p>\n<ol>\n<li>依赖于我们JDK</li>\n<li>Linux服务器</li>\n</ol>\n<p>为什么运行tomcat镜像文件，不需要配置jdk环境变量。</p>\n<ol>\n<li>tomcat镜像文件包含jdk依赖镜像 tomcat8—–jdk8镜像文件</li>\n<li>底层dockerfile —–描述配置jdk环境</li>\n</ol>\n<p><strong><strong><strong>镜像加载的原理</strong></strong></strong></p>\n<p>Linux文件系统由bootfs和rootfs两部分组成</p>\n<p> bootfs：包含bootloader（引导加载程序）和 kernel（内核）</p>\n<p> rootfs： root文件系统，包含的就是典型 Linux 系统中的&#x2F;dev，&#x2F;proc，&#x2F;bin，&#x2F;etc等标准目录和文件</p>\n<p>不同的linux发行版，bootfs基本一样，而rootfs不同，如ubuntu，centos等</p>\n<p>Docker镜像底层实际上是有多个不同的联合文件系统组成的</p>\n<p>最底层：bootfs，并使用宿主机的bootfs-复用</p>\n<p>第二层：root文件系统rootfs,称为base image</p>\n<p>Union fs</p>\n<p>然后再往上可以叠加其他的镜像文件</p>\n<p>统一文件系统（Union File System）技术能够将不同的层整合成一个文件系统，为这些层提供了一个统一的视角，隐藏多层的存在，我们看来只是存在一个文件系统。</p>\n<p>所以当我们安装的tomcat镜像大小是600多MB 是因为里面还包含了jdk和centos的镜像</p>\n<p>而centos镜像复用了宿主机的bootfs 下载的只有rootfs 所以小很多</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/9717131a762b575083e509b25a02d349.png\"></p>\n<p>所以tomcat&gt;jdk（父镜像）-&gt;centos&gt; 所以整个向外暴露就是600MB</p>\n<p>镜像只读 当从一个镜像启动容器时， 所以docker会在镜像上面加载一个可读可写的文件系统作为容器运行。</p>\n<p><a href=\"https://hub.docker.com/_/tomcat\" title=\"Docker\">Docker</a></p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/8d24c4f0351f9ee224d8f409d10ae919.png\">  </p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/10a0cc87f3538fb3741a4fb85f8d2e69.png\"></p>\n<h4 id=\"Docker-Commit\"><a href=\"#Docker-Commit\" class=\"headerlink\" title=\"Docker Commit\"></a><strong><strong><strong>Docker Commit</strong></strong></strong></h4><p>主要作用：根据当前容器制作为镜像文件</p>\n<p>流程：</p>\n<ol>\n<li>从docker hub中下载一个tomcat8镜像文件；</li>\n<li>运行tomcat8镜像文件 在tomcatwebapps 目录中新增 mayikt文件夹 index.html</li>\n<li>将当前容器内容根据模板制作为镜像文件</li>\n</ol>\n<p>docker commit提交容器副本使之成为一个新的镜像</p>\n<p>命令：docker commit -m&#x3D;“提交的描述信息” -a&#x3D;“作者” 容器ID 要创建的目标镜像名:[标签名]</p>\n<ol>\n<li>安装一个tomcat8</li>\n</ol>\n<p>docker run -p 8081:8080   tomcat:8</p>\n<ol>\n<li>docker exec -it 3a06b4c779a8   bash</li>\n<li>cd webapps</li>\n<li>mkdir mayikt</li>\n<li>touch index.html</li>\n<li>echo “mayikt” &gt;&gt;index.html</li>\n</ol>\n<p>docker commit -m&#x3D;“提交的描述信息” -a&#x3D;“作者” 容器ID 要创建的目标镜像名:[标签名]</p>\n<p>1.根据当前容器作为模板制作为镜像文件</p>\n<p>docker commit -m&#x3D;”mayikt tomcat” -a&#x3D;”mayikt”  3a06b4c779a8 mayikt-tomcat:1.0</p>\n<p>2.在以当前自己制作的镜像文件运行</p>\n<p>docker run -p 8088:8080   mayikt-tomcat:1.0</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/310bf4fb924d72922d779e99b0ee0383.png\"></p>\n<h4 id=\"Docker数据卷\"><a href=\"#Docker数据卷\" class=\"headerlink\" title=\"Docker数据卷\"></a><strong><strong><strong>Docker数据卷</strong></strong></strong></h4><p><strong><strong><strong>基本的概念</strong></strong></strong></p>\n<p>数据卷就是宿主机上的一个文件或目录</p>\n<p>当容器目录和数据卷（宿主机）目录绑定，双方修改会立即同步操作</p>\n<p>一个数据卷可以被多个容器同时挂载</p>\n<p>数据卷作用：容器数据的持久化 外部机器和容器间接通信 容器之间数据交换</p>\n<p>使用 -v命令。</p>\n<p><strong><strong><strong>数据卷添加的方式</strong></strong></strong></p>\n<p>容器内与宿主机实现数据的共享</p>\n<p>数据卷–添加两种方式</p>\n<ol>\n<li>直接命令形式添加  docker run -it -v 宿主机绝对路径目录:容器内目录 镜像文件名称</li>\n<li>Dockerfile方式添加</li>\n</ol>\n<p><strong><strong><strong>安装Nginx实现负载均衡</strong></strong></strong></p>\n<p><strong>挂载nginx html文件</strong></p>\n<p><a href=\"https://hub.docker.com/search?q=nginx&type=image\" title=\"Docker\">Docker</a></p>\n<ol>\n<li>创建挂载目录</li>\n</ol>\n<p>mkdir -p &#x2F;data&#x2F;nginx&#x2F;{conf,conf.d,html,logs}</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/c83c555ad073c2de496b42e79f3e15f4.png\"></p>\n<ol>\n<li>启动docker容器</li>\n</ol>\n<p>docker run --name nginx81 -d -p 81:80 -v &#x2F;data&#x2F;nginx&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html nginx</p>\n<p>-v &#x2F;data&#x2F;nginx&#x2F;html 虚拟机目录 --挂载 容器目录 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</p>\n<p>上传一个 html 放入到  &#x2F;data&#x2F;nginx&#x2F;html</p>\n<p>docker run --name nginx81 -d -p 81:80 -v &#x2F;data&#x2F;nginx&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html nginx</p>\n<p>-v &#x2F;data&#x2F;nginx&#x2F;html: linux虚拟机目录</p>\n<p>&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html 容器中html目录</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/4c577319c12ce032bbaadb6312013fda.png\"></p>\n<p><strong>nginx .conf文件和日志文件</strong></p>\n<p>docker run --name nginx81 -d -p 81:80 -v &#x2F;data&#x2F;nginx&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html \\</p>\n<p>-v &#x2F;data&#x2F;nginx&#x2F;conf&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf \\</p>\n<p>-v &#x2F;data&#x2F;nginx&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx  nginx</p>\n<p>\\反斜杠  表示换行</p>\n<p>&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</p>\n<p>&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;conf</p>\n<p>&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;log</p>\n<p><strong><strong><strong>Docker实战部署软件</strong></strong></strong></p>\n<p><strong><strong><strong>安装Tomcat服务器</strong></strong></strong></p>\n<p>docker run -p 8081:8080   tomcat:8</p>\n<p>-p 8081 :8080    容器外部（linux虚拟机访问端口8081）:8080（容器端口号）</p>\n<p>docker ps  获取tomcat正在运行的容器id 进入到中</p>\n<p>docker exec -it 1210e05f1a59 bash</p>\n<p>docker run -p 8081:8080   tomcat:8</p>\n<p>-p 8081:8080  8081(linux虚拟机访问的端口号):8080(容器内部中端口号)</p>\n<p>docker run -p 8081:8080 -d   tomcat:8 后台启动 -–每次运行都会创建一个新的容器</p>\n<p>docker run --name mayikt-tomcat  -p 8081:8080 -d   tomcat:8</p>\n<p>--name: 指定容器名称</p>\n<p>-p:指定容器端口号</p>\n<p>-d:指定容器后台运行</p>\n<p>docker run --name mayikt-tomcat    tomcat</p>\n<p>docker run --name mayikt-tomcat1  -p 8081:8080  tomcat</p>\n<p>8081（容器外部或者linux虚拟机访问的端口号 宿主机）</p>\n<p>8080 容器内部的端口号</p>\n<p>docker run --name mayikt-tomcat2022  -p 8081:8080 -d   tomcat:8</p>\n<p>-d 后台启动</p>\n<p>前台启动与后台启动的区别</p>\n<p>前台启动会打印启动日志信息</p>\n<p>后台启动不会打印启动日志信息</p>\n<p><strong><strong><strong>安装Nginx实现静态服务</strong></strong></strong></p>\n<p>Docker run 运行容器</p>\n<p>--name nginx-test：容器名称。</p>\n<p>-p 8080:80  端口进行映射，将本地 8080 端口映射到容器内部的 80 端口。</p>\n<p>-d nginx： 设置容器在在后台一直运行。</p>\n<p>docker  ps -– 正在运行的容器</p>\n<p>docker ps -a 显示所有的容器 包括为运行的容器</p>\n<p>docker ps 容器id</p>\n<p>docker run --name nginx-mayikt -p 8080:80 nginx   默认前台启动</p>\n<p>docker run --name nginx-mayikt -p 8080:80 -d nginx   后台启动方式</p>\n<p>前台与后台启动区别：</p>\n<p>前台启动：会展示容器启动的日志信息—–</p>\n<p>后台启动：不会展示启动日志信息</p>\n<p>8080:80 8080 虚拟机本地端口 -–浏览器访问 80 容器内部端口</p>\n<p> Elk+kafka—</p>\n<p> systemctl stop firewalld </p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/e4c9b9c8e7adf0af4c7723738641af29.png\"></p>\n<p><strong><strong><strong>安装MySQL5.7</strong></strong></strong></p>\n<p>1.查询mysql版本</p>\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"vertical-align:top;width:414.8pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">docker search mysql</p></td></tr></tbody></table>\n\n<p>2.下载MySQL5.7版本</p>\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"vertical-align:top;width:414.8pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">docker pull mysql:5.7 &nbsp;(这里选择的是第一个mysql镜像， :5.7选择的5.7版本)</p></td></tr></tbody></table>\n\n<p>3.等待下载完成、创建MySQL容器</p>\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"vertical-align:top;width:414.8pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">docker create --name mysql3308 -e MYSQL_ROOT_PASSWORD=root -p 3308:3306 mysql:5.7</p></td></tr></tbody></table>\n\n<p> 创建容器名称为mysql3308，密码为root</p>\n<ol>\n<li>启动容器</li>\n</ol>\n<p>docker start mysql3308</p>\n<ol>\n<li>进入到容器</li>\n</ol>\n<p>docker exec -it mysql3308 bash</p>\n<ol>\n<li>mysql连接</li>\n</ol>\n<p>mysql -uroot –p</p>\n<p><strong><strong><strong>Docker运行底层原理</strong></strong></strong></p>\n<ol>\n<li>首先启动docker systemctl start docker</li>\n<li>Docker是一个CS架构的系统，docker守护进程运行在主机上，让后通过socket连接</li>\n</ol>\n<p>从客户端访问，守护进程从客户端接收命令管理运行在主机上的容器。</p>\n<p>ps aux | grep ‘docker’</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/48073c1275fdb33901b003b3b16b9d8f.png\"></p>\n<p>网站“bs”CS</p>\n<p><strong><strong><strong>数据卷volumes-from</strong></strong></strong></p>\n<p>容器间传递共享数据volumes-from</p>\n<h4 id=\"启动容器报错了如何解决？\"><a href=\"#启动容器报错了如何解决？\" class=\"headerlink\" title=\"启动容器报错了如何解决？\"></a><strong><strong><strong>启动容器报错了如何解决？</strong></strong></strong></h4><p>先改为前台启动如果没有问题的情况下，在修改为后台启动。</p>\n<h3 id=\"容器与容器局域网\"><a href=\"#容器与容器局域网\" class=\"headerlink\" title=\"容器与容器局域网\"></a><strong><strong><strong>容器与容器局域网</strong></strong></strong></h3><h3 id=\"DockerFile-解析\"><a href=\"#DockerFile-解析\" class=\"headerlink\" title=\"DockerFile 解析\"></a><strong><strong><strong>DockerFile 解析</strong></strong></strong></h3><p>一个镜像文件到底是如何创建？</p>\n<ol>\n<li><p>dockerfile 描述出镜像文件需要的一些依赖配置和环境变量 执行命令</p>\n</li>\n<li><p>将我们dockerfile 文件打包成一个镜像文件</p>\n</li>\n<li><p>直接使用我们的容器运行到该镜像文件。</p>\n</li>\n<li><p>需要手动编写一个dockerfile文件</p>\n</li>\n<li><p>将该dockerfile  docker build 自定义成一个镜像文件</p>\n</li>\n<li><p>docker run 运行容器</p>\n</li>\n</ol>\n<h4 id=\"Centos镜像文件\"><a href=\"#Centos镜像文件\" class=\"headerlink\" title=\"Centos镜像文件\"></a><strong><strong><strong>Centos镜像文件</strong></strong></strong></h4><p>docker run -it centos </p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/472b7a789eea5bd1133cbe57d2c3ea7c.png\"></p>\n<p><a href=\"https://github.com/CentOS/sig-cloud-instance-images/blob/b2d195220e1c5b181427c3172829c23ab9cd27eb/docker/Dockerfile\" title=\"sig-cloud-instance-images/Dockerfile at b2d195220e1c5b181427c3172829c23ab9cd27eb · CentOS/sig-cloud-instance-images · GitHub\">sig-cloud-instance-images&#x2F;Dockerfile at b2d195220e1c5b181427c3172829c23ab9cd27eb · CentOS&#x2F;sig-cloud-instance-images · GitHub</a></p>\n<h4 id=\"DockerFile编写规范\"><a href=\"#DockerFile编写规范\" class=\"headerlink\" title=\"DockerFile编写规范\"></a><strong><strong><strong>DockerFile编写规范</strong></strong></strong></h4><p>A.#描述注释</p>\n<p>B.指令必须要大写，后面至少需要带至少一个参数;</p>\n<p>C.指令是按照从上到下，顺序执行；</p>\n<h4 id=\"DockerFile指令\"><a href=\"#DockerFile指令\" class=\"headerlink\" title=\"DockerFile指令\"></a><strong><strong><strong>DockerFile指令</strong></strong></strong></h4><ol>\n<li>FROM 指定父镜像:  基于哪个镜像image构建  指定基础镜像，必须为第一个命令</li>\n<li>MAINTAINER :维护者</li>\n<li>RUN: 容器创建的时候执行一段命令   构建镜像时执行的命令</li>\n<li>ADD: 将本地文件添加到容器中，tar类型文件会自动解压(网络压缩资源不会被解压)，可以访问网络资源，类似wget</li>\n<li>COPY:功能类似ADD，但是是不会自动解压文件，也不能访问网络资源</li>\n<li>CMD:构建容器后调用，也就是在容器启动时才进行调用。 .sh执行文件</li>\n<li>ENV: 设置环境变量</li>\n<li>EXPOSE: 指定于外界交互的端口</li>\n<li>VOLUME  用于指定持久化目录</li>\n<li>WORKDIR 设置进入容器时的路径 默认访问的目录</li>\n</ol>\n<p>Tomcat—–jdk环境</p>\n<p>Tomcat docker File：</p>\n<p><a href=\"https://github.com/docker-library/tomcat/blob/385e8403a38fab7097d4c3fed2484caba7dfd099/8.5/jdk8/openjdk-slim-buster/Dockerfile\" title=\"tomcat/Dockerfile at 385e8403a38fab7097d4c3fed2484caba7dfd099 · docker-library/tomcat · GitHub\">tomcat&#x2F;Dockerfile at 385e8403a38fab7097d4c3fed2484caba7dfd099 · docker-library&#x2F;tomcat · GitHub</a></p>\n<p><a href=\"https://github.com/docker-library/redis/blob/231905d0841f52ee4f3a5b8b42d62cd6d14a1a93/6.2/Dock\">https://github.com/docker-library/redis/blob/231905d0841f52ee4f3a5b8b42d62cd6d14a1a93/6.2/Dock</a></p>\n<p>进入tomcat 容器—-&#x2F;data</p>\n<p>redis容器&#x2F;data</p>\n<p>&#x2F;</p>\n<h4 id=\"DockerFile案例\"><a href=\"#DockerFile案例\" class=\"headerlink\" title=\"DockerFile案例\"></a><strong><strong><strong>DockerFile案例</strong></strong></strong></h4><p>Base镜像(scratch) docker hub中的镜像都是通过base镜像中安装和配置需要的软件构建的。</p>\n<p><strong><strong><strong>构建自己</strong></strong></strong><strong>centos</strong><strong><strong><strong>镜像</strong></strong></strong></p>\n<p>docker run -it centos</p>\n<ol>\n<li>需求定制修改centos根目录；</li>\n<li>实现支持vim插件；</li>\n</ol>\n<p>yum -y install vim </p>\n<ol>\n<li>需要自己制作一个dockerfile文件</li>\n<li>继承docker hub中的centos</li>\n<li>在docker hubcentos 上加入以下两个功能</li>\n</ol>\n<p>A.进入容器中 默认访问目录&#x2F;usr</p>\n<p>B.实现支持vim插件</p>\n<p>需要将该dockerfile文件打包成一个镜像文件 交给我们容器执行</p>\n<p><a href=\"https://github.com/CentOS/sig-cloud-instance-images/blob/b2d195220e1c5b181427c3172829c23ab9cd27eb/docker/Dockerfile\">https://github.com/CentOS/sig-cloud-instance-images/blob/b2d195220e1c5b181427c3172829c23ab9cd27eb/docker/Dockerfile</a></p>\n<p>定制CentOS镜像</p>\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"vertical-align:top;width:426.1pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">FROM &nbsp;centos</p><p style=\"margin-left:.0001pt;text-align:justify;\">MAINTAINER mayikt-yushengjun</p><p style=\"margin-left:.0001pt;text-align:justify;\">ENV &nbsp;MYPATH /usr</p><p style=\"margin-left:.0001pt;text-align:justify;\">WORKDIR $MYPATH</p><p style=\"margin-left:.0001pt;text-align:justify;\">RUN yum -y install vim</p><p style=\"margin-left:.0001pt;text-align:justify;\">EXPOSE 80</p><p style=\"margin-left:.0001pt;text-align:justify;\">CMD /bin/bash</p></td></tr></tbody></table>\n\n<p>Dockerfile→使用docker 将该Dockerfile实现打包成镜像文件→</p>\n<p>容器运行该镜像文件。</p>\n<p>docker build—将该Dockerfile实现打包成镜像文件</p>\n<p>将该dockerfile文件上传到linux服务器中</p>\n<p>使用docker build -f Dockerfile -t mycs:1 .</p>\n<p>Dockerfile -—–配置文件</p>\n<p>mycs—-打包镜像文件名称</p>\n<p>1 tag 版本号码</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/55ae05054e1a6a10f7a78d5f71354d31.png\"></p>\n<p>docker run -it mycs:1 </p>\n<p><strong><strong><strong>将springboot项目打包部署</strong></strong></strong></p>\n<ol>\n<li>基于docker原生方式 部署我们的springboot项目</li>\n</ol>\n<p>Dockerfile</p>\n<p>2.dockercompose—– 容器编排技术</p>\n<p>springboot项目—-变成镜像文件—容器运行</p>\n<ol>\n<li>将我们springboot项目—打成一个jar包</li>\n</ol>\n<p>2.定义dockerfile文件—–描述出springboot项目 配置依赖和环境变量</p>\n<p>JDK</p>\n<p>注意：springboot内置嵌入我们的tomcat服务器 所以不需要额外的tomcat容器来</p>\n<p>运行。</p>\n<p>原生方式运行我们的jar包</p>\n<p>Java- jar指令</p>\n<ol>\n<li>需要先将我们外部jar，拷贝到容器中</li>\n<li>容器运行成功执行java -jar</li>\n</ol>\n<p>2.将该dockerfile文件打包成镜像文件-</p>\n<ol>\n<li>将springboot项目打包；</li>\n<li>制作dockerfile文件；</li>\n<li>继承我们的jdk环境</li>\n<li>将我们本地的jar包拷贝到容器中</li>\n<li>Java -jar</li>\n<li>将dockerfile文件打包成镜像文件；</li>\n<li>运行该镜像文件即可；</li>\n</ol>\n<p><strong><strong><strong>将springboot项目打包</strong></strong></strong></p>\n<p>mvn clean package </p>\n<p><strong><strong><strong>制作dockerfile文件</strong></strong></strong></p>\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"vertical-align:top;width:426.1pt;\"><p style=\"margin-left:.0001pt;text-align:left;\"><span style=\"background-color:#ffffff;\"><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\"># </span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">基础镜像使用</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">java</span></span></em><br><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">FROM </span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">java:</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#1750eb;\">8</span></span><br><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\"># </span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">作者</span></span></em><br><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">MAINTAINER </span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">www.mayikt.com</span></span><br><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\"># VOLUME </span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">指定了临时文件目录为</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">/tmp</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">。</span></span></em><br><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\"># </span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">其效果是在主机</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">&nbsp;/var/lib/docker </span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">目录下创建了一个临时文件，并链接到容器的</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">/tmp</span></span></em><br><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">VOLUME /</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">tmp</span></span><br><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\"># </span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">将</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">jar</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">包添加到容器中并更名为</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">mayikt.jar</span></span></em><br><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">ADD </span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">mayikt-thymeleaf-1</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#1750eb;\">.0</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">-</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">SNAPSHOT.jar mayikt.jar</span></span><br><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\"># </span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">运行</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">jar</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">包</span></span></em><br><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">RUN </span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">bash </span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">-</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">c </span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#067d17;\">'touch /mayikt.jar'</span></span><br><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">ENTRYPOINT </span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">[</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#067d17;\">\"java\"</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">,</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#067d17;\">\"-Djava.security.egd=file:/dev/./urandom\"</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">,</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#067d17;\">\"-jar\"</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">,</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#067d17;\">\"/mayikt.jar\"</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">]</span></span><br><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">#</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">暴露</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">8080</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">端口</span></span></em><br><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">EXPOSE </span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#1750eb;\">8080</span></span></span></p><p style=\"margin-left:.0001pt;text-align:justify;\"></p></td></tr></tbody></table>\n\n<p><strong><strong><strong>打包成镜像文件</strong></strong></strong></p>\n<p>docker build -f Dockerfile -t mayikt-member:1 .</p>\n<p>docker build -f Dockerfile -t mayikt-member:1 .</p>\n<p><strong><strong><strong>启动容器</strong></strong></strong></p>\n<p>docker run -p 8070:8080   mayikt-member:1</p>\n<p><strong><strong><strong>访问测试</strong></strong></strong></p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/b3bca6e5bff86f971929a0438d661798.png\"></p>\n<h3 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a><strong><strong><strong>Docker Compose</strong></strong></strong></h3><p>Sit pre prd环境</p>\n<h4 id=\"为什么需要使用Docker-Compose\"><a href=\"#为什么需要使用Docker-Compose\" class=\"headerlink\" title=\"为什么需要使用Docker Compose\"></a><strong><strong><strong>为什么需要使用Docker Compose</strong></strong></strong></h4><p>Docker Compose  容器编排技术</p>\n<p>容器编排技术</p>\n<p>1.现在我们有一个springboot项目，需要依赖Redis、mysql5.7、nginx。</p>\n<p>如果使用docker原生部署的话，则需要安装Redis、mysql5、nginx容器，在才可以启动我们springboot项目，这样的话部署项目的流程非常复杂，所以需要引入我们的</p>\n<p>Docker compose实现容器编排技术。</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/692d22802ba8032cf47bdcf7a582be16.png\"></p>\n<h4 id=\"基本的概念\"><a href=\"#基本的概念\" class=\"headerlink\" title=\"基本的概念\"></a><strong><strong><strong>基本的概念</strong></strong></strong></h4><p>Docker-Compose项目是<strong><strong>Docker官方的开源项目</strong></strong>，负责实现对Docker容器集群的快速编排。</p>\n<p>Docker-Compose将所管理的容器分为三层，分别是工程（project），服务（service）以及容器（container）。</p>\n<p>开发一个springboot项目—大工程</p>\n<ol>\n<li>依赖mysql</li>\n<li>依赖redis</li>\n<li>依赖zk</li>\n</ol>\n<p>等。</p>\n<p>需要在docker-compose.yml 配置项目工程依赖环境配置</p>\n<p>Docker-Compose运行目录下的所有文件（docker-compose.yml，extends文件或环境变量文件等）组成一个工程，若无特殊指定工程名即为当前目录名。一个工程当中可包含多个服务，每个服务中定义了容器运行的镜像，参数，依赖。一个服务当中可包括多个容器实例，Docker-Compose并没有解决负载均衡的问题，因此需要借助其它工具实现服务发现及负载均衡。</p>\n<p>Docker-Compose的工程配置文件默认为docker-compose.yml，可通过环境变量COMPOSE_FILE或-f参数自定义配置文件，其定义了多个有依赖关系的服务及每个服务运行的容器。</p>\n<p>Compose 中有两个重要的概念：</p>\n<p>服务 (service) ：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</p>\n<p>项目 (project) ：由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义。</p>\n<p>一个项目可以由多个服务（容器）关联而成，Compose 面向项目进行管理，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p>\n<p>Compose 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 Compose 来进行编排管理。</p>\n<p>Docker-Compose分成三层</p>\n<p>1.项目层 springboot项目依赖于我们的mysql redis、nginx等 一个项目是由多个容器组成的。</p>\n<p>2.服务层  运行一个镜像的实例 -–</p>\n<h4 id=\"Compose环境安装（离线安装）\"><a href=\"#Compose环境安装（离线安装）\" class=\"headerlink\" title=\"Compose环境安装（离线安装）\"></a><strong><strong><strong>Compose环境安装（离线安装）</strong></strong></strong></h4><ol>\n<li>访问docker compose  github 官网</li>\n</ol>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/f297c1669fba4e42bf80422c1db87290.png\"></p>\n<ol>\n<li><strong><strong>docker-compose-Linux-x86_64 上传到服务器中，然后执行如下命令将其移动到&#x2F;usr&#x2F;local&#x2F;bin&#x2F;目录中 并且更名为docker-compose</strong></strong></li>\n</ol>\n<p><strong><strong>mv docker-compose-Linux-x86_64 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</strong></strong></p>\n<ol>\n<li><strong><strong>执行如下命令：添加可执行的权限</strong></strong></li>\n</ol>\n<p><strong><strong>sudo chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</strong></strong></p>\n<ol>\n<li><strong><strong>验证docker-compose</strong></strong></li>\n</ol>\n<p><strong><strong>docker-compose -v</strong></strong></p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/600a5ffb958db52d66080a39011fdcc9.png\"></p>\n<h4 id=\"Compose常用命令\"><a href=\"#Compose常用命令\" class=\"headerlink\" title=\"Compose常用命令\"></a><strong><strong><strong>Compose常用命令</strong></strong></strong></h4><p>docker-compose -h                           # 查看帮助</p>\n<p>docker-compose up                           # 创建并运行所有容器</p>\n<p>docker-compose up -d                        # 创建并后台运行所有容器</p>\n<p>docker-compose -f docker-compose.yml up -d  # 指定模板</p>\n<p>docker-compose down                         # 停止并删除容器、网络、卷、镜像。</p>\n<p>docker-compose logs       # 查看容器输出日志</p>\n<p>docker-compose pull       # 拉取依赖镜像</p>\n<p>dokcer-compose config     # 检查配置</p>\n<p>dokcer-compose config -q  # 检查配置，有问题才有输出</p>\n<p>docker-compose restart   # 重启服务</p>\n<p>docker-compose start     # 启动服务</p>\n<p>docker-compose stop      # 停止服务</p>\n<h4 id=\"Compose入门案例\"><a href=\"#Compose入门案例\" class=\"headerlink\" title=\"Compose入门案例\"></a><strong><strong><strong>Compose入门案例</strong></strong></strong></h4><p><strong><strong>流程：</strong></strong></p>\n<ol>\n<li><strong><strong>需要定义一个docker-compose.yml文件—-工程</strong></strong></li>\n<li><strong><strong>需要在docker-compose文件配置依赖服务</strong></strong></li>\n<li><strong><strong>docker-compose up 执行该文件</strong></strong></li>\n<li>创建一个docker-c<strong><strong>ompose.yml；</strong></strong></li>\n<li><strong><strong>定制docker-compose 内容；</strong></strong></li>\n<li><strong><strong>运行 docker-compose up ；</strong></strong></li>\n</ol>\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"vertical-align:top;width:426.1pt;\"><p style=\"margin-left:.0001pt;text-align:left;\"><span style=\"background-color:#ffffff;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">version</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: </span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#067d17;\">'3.0'</span></span><br><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">services</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">:</span></span><br>&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">tomcat</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: </span></span><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">##</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">服务名称</span></span></em><br><em>&nbsp;&nbsp;&nbsp;&nbsp;</em><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">image</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: tomcat:8 </span></span><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">#</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">镜像文件名称</span></span></em><br><em>&nbsp;&nbsp;&nbsp;&nbsp;</em><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">ports</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">:</span></span><br><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">&nbsp;&nbsp;&nbsp;&nbsp;- 8080:8080</span></span></span></p></td></tr></tbody></table>\n\n<h4 id=\"Compose模板文件\"><a href=\"#Compose模板文件\" class=\"headerlink\" title=\"Compose模板文件\"></a><strong><strong><strong>Compose模板文件</strong></strong></strong></h4><table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"vertical-align:top;width:426.1pt;\"><p style=\"margin-left:.0001pt;text-align:left;\"><span style=\"background-color:#ffffff;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">version</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: </span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#067d17;\">'3.0'</span></span><br><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">services</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">:</span></span><br>&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">tomcat80</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: </span></span><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">##</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">服务名称</span></span></em><br><em>&nbsp;&nbsp;&nbsp;&nbsp;</em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">#container_name: tomcat8080 </span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">指定容器名称</span></span></em><br><em>&nbsp;&nbsp;&nbsp;&nbsp;</em><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">image</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: tomcat:8 </span></span><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">#</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">镜像文件名称</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">&nbsp;run images</span></span></em><br><em>&nbsp;&nbsp;&nbsp;&nbsp;</em><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">ports</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: &nbsp;</span></span><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">###</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">端口号的映射</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">&nbsp;-p</span></span></em><br><em>&nbsp;&nbsp;&nbsp;&nbsp;</em><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">- 8080:8080</span></span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">volumes</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: </span></span><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">## </span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">数据源 宿主机与容器数据共享</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">&nbsp;&nbsp;-v</span></span></em><br><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</em><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">- /usr/tomcat/webapps:/usr/local/tomcat/webapps</span></span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">networks</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: &nbsp;</span></span><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">###</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">定义网络的桥</span></span></em><br><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</em><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">- mayikt</span></span><br><br>&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">tomcat81</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: </span></span><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">##</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">服务名称</span></span></em><br><em>&nbsp;&nbsp;&nbsp;&nbsp;</em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">#container_name: tomcat8080 </span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">指定容器名称</span></span></em><br><em>&nbsp;&nbsp;&nbsp;&nbsp;</em><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">image</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: tomcat:8 </span></span><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">#</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">镜像文件名称</span></span></em><br><em>&nbsp;&nbsp;&nbsp;&nbsp;</em><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">ports</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: &nbsp;</span></span><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">###</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">端口号的映射</span></span></em><br><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</em><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">- 8081:8080</span></span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">volumes</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: </span></span><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">## </span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">数据源 宿主机与容器数据共享</span></span></em><br><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</em><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">- /usr/tomcat/webapps:/usr/local/tomcat/webapps</span></span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">networks</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">:</span></span><br><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- mayikt</span></span><br><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">networks</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: &nbsp;</span></span><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">## </span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">定义服务的桥</span></span></em><br><em>&nbsp;&nbsp;</em><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">mayikt</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">:</span></span></span></p><p style=\"margin-left:.0001pt;text-align:justify;\"></p></td></tr></tbody></table>\n\n<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4><p><strong><strong><strong>Compose常用命令</strong></strong></strong></p>\n<p><strong><strong>docker-compose ps</strong></strong>****  列出项目中所有的容器****</p>\n<p><strong><strong>docker-compose stop</strong></strong>**** 停止****<strong><strong>docker-compose</strong></strong></p>\n<p><strong><strong>docker-compose logs</strong></strong>****  查看容器中日志信息****</p>\n<p><strong><strong>docker-compose pull</strong></strong>****  拉取服务依赖的镜像****</p>\n<h4 id=\"Compose常用配置\"><a href=\"#Compose常用配置\" class=\"headerlink\" title=\"Compose常用配置\"></a><strong><strong><strong>Compose常用配置</strong></strong></strong></h4><p>Image 镜像名称；</p>\n<p>Build 根据docker file 打包 成镜像；</p>\n<p>Context  指定docker file文件位置；</p>\n<p>Commond 使用command可以覆盖容器启动后默认执行的命令；</p>\n<p>Container_name 容器名称；</p>\n<p>depends_on 指定依赖那个服务；</p>\n<p>Ports 映射的端口号；</p>\n<p>extra_hosts 会在&#x2F;etc&#x2F;hosts文件中添加一些记录；</p>\n<p>Volumes 持久化目录；</p>\n<p>volumes_from 从另外一个容器挂在数据卷；</p>\n<p>Dns 设置dns</p>\n<h4 id=\"Compose部署springboot项目\"><a href=\"#Compose部署springboot项目\" class=\"headerlink\" title=\"Compose部署springboot项目\"></a><strong><strong><strong>Compose部署springboot项目</strong></strong></strong></h4><p><strong><strong><strong>定义Compose文件</strong></strong></strong></p>\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"vertical-align:top;width:426.1pt;\"><p style=\"margin-left:.0001pt;text-align:left;\"><span style=\"background-color:#ffffff;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">version</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: </span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#067d17;\">\"3.0\"</span></span><br><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">services</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">:</span></span><br>&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">mysql</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: </span></span><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\"># mysql</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">服务</span></span></em><br><em>&nbsp;&nbsp;&nbsp;&nbsp;</em><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">image</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: mysql:5.7</span></span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">command</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: --default-authentication-plugin=mysql_native_password </span></span><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">#</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">解决外部无法访问</span></span></em><br><em>&nbsp;&nbsp;&nbsp;&nbsp;</em><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">ports</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">:</span></span><br><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- </span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#067d17;\">\"3306:3306\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">#</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">容器端口映射到宿主机的端口</span></span></em><br><em>&nbsp;&nbsp;&nbsp;&nbsp;</em><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">environment</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">:</span></span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">MYSQL_ROOT_PASSWORD</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: </span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#067d17;\">'root'</span></span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">MYSQL_ALLOW_EMPTY_PASSWORD</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: </span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#067d17;\">'no'</span></span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">MYSQL_DATABASE</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: </span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#067d17;\">'mayikt'</span></span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">MYSQL_USER</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: </span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#067d17;\">'mayikt'</span></span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">MYSQL_PASSWORD</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: </span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#067d17;\">'mayikt'</span></span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">networks</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">:</span></span><br><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- mayikt_web</span></span><br>&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">mayikt-web</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: </span></span><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">#</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">自己单独的</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">springboot</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">项目</span></span></em><br><em>&nbsp;&nbsp;&nbsp;&nbsp;</em><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">hostname</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: mayikt</span></span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">build</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: ./ &nbsp;&nbsp;&nbsp;&nbsp;</span></span><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">#</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">需要构建的</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">Dockerfile</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">文件</span></span></em><br><em>&nbsp;&nbsp;&nbsp;&nbsp;</em><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">ports</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">:</span></span><br><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- </span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#067d17;\">\"38000:8080\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">#</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">容器端口映射到宿主机的端口</span></span></em><br><em>&nbsp;&nbsp;&nbsp;&nbsp;</em><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">depends_on</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">#web</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">服务依赖</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">mysql</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">服务，要等</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">mysql</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">服务先启动</span></span></em><br><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</em><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">- mysql</span></span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">networks</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">:</span></span><br><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- mayikt_web</span></span><br><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">networks</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: &nbsp;</span></span><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">## </span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">定义服务的桥</span></span></em><br><em>&nbsp;&nbsp;</em><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">mayikt_web</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">:</span></span></span></p><p style=\"margin-left:.0001pt;text-align:justify;\"></p></td></tr></tbody></table>\n\n<p><strong><strong><strong>Spring项目配置</strong></strong></strong></p>\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"vertical-align:top;width:426.1pt;\"><p style=\"margin-left:.0001pt;text-align:left;\"><span style=\"background-color:#ffffff;\"><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">spring</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">:</span></span><br>&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">profiles</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">:</span></span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">active</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: prd</span></span><br>&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">datasource</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">:</span></span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">url</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: jdbc:mysql://mysql:3306/mayikt?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">username</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: root</span></span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">password</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: root</span></span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">driver-class-name</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: </span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#000000;\">com</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">.</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#000000;\">mysql</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">.</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#000000;\">jdbc</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">.</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#000000;\">Driver</span></span><br><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">server</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">:</span></span><br>&nbsp;&nbsp;<em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">###</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">端口号</span></span></em><br><em>&nbsp;&nbsp;</em><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">port</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: </span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#1750eb;\">8080</span></span><br>&nbsp;&nbsp;<span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">servlet</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">:</span></span><br>&nbsp;&nbsp;&nbsp;&nbsp;<em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">##</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">设置</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">springboot</span></span></em><em><span style=\"background-color:#ffffff;\"><span style=\"color:#8c8c8c;\">项目访问路径</span></span></em><br><em>&nbsp;&nbsp;&nbsp;&nbsp;</em><span style=\"background-color:#ffffff;\"><span style=\"color:#0033b3;\">context-path</span></span><span style=\"background-color:#ffffff;\"><span style=\"color:#080808;\">: /mayikt</span></span></span></p><p style=\"margin-left:.0001pt;text-align:justify;\"></p></td></tr></tbody></table>\n\n<p><strong><strong><strong>演示效果</strong></strong></strong></p>\n<p><a href=\"http://192.168.163.129:38000/mayikt/insertUser?userName=mayikt&amp;userAge=22\">http://192.168.163.129:38000/mayikt/insertUser?userName=mayikt&amp;userAge=22</a></p>\n<h4 id=\"Docker可视化工具使用\"><a href=\"#Docker可视化工具使用\" class=\"headerlink\" title=\"Docker可视化工具使用****\"></a><strong><strong><strong>Docker可视化工具</strong></strong></strong><strong>使用</strong>****</h4><p><strong><strong><strong>Portainer</strong></strong></strong></p>\n<p>Portainer是一款Docker可视化管理工具，允许我们在网页中方便的查看和管理Docker容器。</p>\n<p>要使用Portainer很简单，运行下面两条命令即可。这些命令会创建一个Portainer专用的卷，然后在8000和9000端口创建容器并运行。</p>\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/055fcb18c32f4b144e08628d7470db08.png\"></p>\n<p>启动：</p>\n<table border=\"1\" cellspacing=\"0\"><tbody><tr><td style=\"vertical-align:top;width:426.1pt;\"><p style=\"margin-left:.0001pt;text-align:justify;\">docker run -d -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</p></td></tr></tbody></table>\n\n<p><img src=\"https://i-blog.csdnimg.cn/blog_migrate/9861648948f47de4a2298e203fa972f8.png\"></p>\n<h3 id=\"CentOS-Docker-安装\"><a href=\"#CentOS-Docker-安装\" class=\"headerlink\" title=\"CentOS Docker 安装\"></a><strong><strong><strong>CentOS Docker 安装</strong></strong></strong></h3><p>docker rm $(docker ps -aq)</p>\n<p>docker stop $(docker ps -q) &amp; docker rm $(docker ps -aq) -–删除所有的容器</p>\n<p>docker rmi $(docker images -q)</p>\n<p>docker network ls</p>\n<h3 id=\"Linux关闭防火墙命令\"><a href=\"#Linux关闭防火墙命令\" class=\"headerlink\" title=\"Linux关闭防火墙命令\"></a><strong><strong><strong>Linux关闭防火墙命令</strong></strong></strong></h3><p>systemctl stop firewalld</p>\n<p><strong>注：此文章内容源于蚂蚁课堂余胜军老师的课程笔记</strong></p>\n<p>Article link： <a href=\"https://tqgoblin.site/post/csdn/Docker/\">https://tqgoblin.site/post/csdn/Docker/</a> <div align=left> Author：<a href=\"https://www.tqgoblin.site\"> Stephen </a> </div></p>\n","text":"简介与概述1.Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。 Docker 可以让开发者打包他们的应用以及依赖...","permalink":"/post/csdn/Docker","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"运维","slug":"运维","count":6,"path":"api/categories/运维.json"}],"tags":[{"name":"docker 容器","slug":"docker-容器","count":1,"path":"api/tags/docker-容器.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B%E4%B8%8E%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">简介与概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8docker\"><span class=\"toc-text\">为什么需要使用docker</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8docker%E7%9A%84%E5%A5%BD%E5%A4%84\"><span class=\"toc-text\">使用docker的好处</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">应用场景</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%B9%E5%99%A8%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">容器与虚拟机区别</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Docker%E5%AE%98%E7%BD%91\"><span class=\"toc-text\">Docker官网</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Docker%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">Docker安装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Docker%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">Docker快速入门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Docker%E6%A0%B8%E5%BF%83%E5%90%8D%E8%AF%8D\"><span class=\"toc-text\">Docker核心名词</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Docker%E4%B8%8B%E8%BD%BD%E9%95%9C%E5%83%8F%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">Docker下载镜像原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Docker%E5%8A%A0%E8%BD%BD%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">Docker加载镜像配置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%98%BF%E9%87%8C%E4%BA%91%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">阿里云加速镜像配置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F\"><span class=\"toc-text\">如何查看加速镜像安装成功</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">Docker常用命令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#docker-%E2%80%93version\"><span class=\"toc-text\">docker –version</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#docker-images\"><span class=\"toc-text\">docker images</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#docker-search\"><span class=\"toc-text\">docker search</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#docker-pull\"><span class=\"toc-text\">docker pull</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">容器管理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Docker-%E9%95%9C%E5%83%8F%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">Docker 镜像原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Docker-Commit\"><span class=\"toc-text\">Docker Commit</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Docker%E6%95%B0%E6%8D%AE%E5%8D%B7\"><span class=\"toc-text\">Docker数据卷</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8%E6%8A%A5%E9%94%99%E4%BA%86%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%EF%BC%9F\"><span class=\"toc-text\">启动容器报错了如何解决？</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%B9%E5%99%A8%E4%B8%8E%E5%AE%B9%E5%99%A8%E5%B1%80%E5%9F%9F%E7%BD%91\"><span class=\"toc-text\">容器与容器局域网</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DockerFile-%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">DockerFile 解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Centos%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">Centos镜像文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#DockerFile%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">DockerFile编写规范</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#DockerFile%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">DockerFile指令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#DockerFile%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">DockerFile案例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Docker-Compose\"><span class=\"toc-text\">Docker Compose</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8Docker-Compose\"><span class=\"toc-text\">为什么需要使用Docker Compose</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">基本的概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Compose%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%EF%BC%88%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%EF%BC%89\"><span class=\"toc-text\">Compose环境安装（离线安装）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Compose%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">Compose常用命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Compose%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">Compose入门案例</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Compose%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">Compose模板文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Compose%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">Compose常用配置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Compose%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">Compose部署springboot项目</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Docker%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">Docker可视化工具使用****</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CentOS-Docker-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">CentOS Docker 安装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Linux%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">Linux关闭防火墙命令</span></a></li></ol>","author":{"name":"Stephen","slug":"blog-author","avatar":"../img/logo.png","link":"/","description":"Love and Share","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"kubernetes环境搭建","uid":"0fca9df791e8d84a1257cd45f3a83b63","slug":"csdn/kubernetes环境搭建","date":"2021-05-20T10:16:24.000Z","updated":"2025-02-17T04:22:34.868Z","comments":true,"path":"api/articles/csdn/kubernetes环境搭建.json","keywords":"Stephen web3","cover":[],"text":"目录 kubernetes 环境搭建 环境说明 集群搭建方式 环境准备 初始化环境 安装kubernetes 安装docker 安装kubernetes组件 准...","permalink":"/post/csdn/kubernetes环境搭建","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[{"name":"运维","slug":"运维","count":6,"path":"api/categories/运维.json"}],"tags":[{"name":"运维 docker kubernetes","slug":"运维-docker-kubernetes","count":1,"path":"api/tags/运维-docker-kubernetes.json"}],"author":{"name":"Stephen","slug":"blog-author","avatar":"../img/logo.png","link":"/","description":"Love and Share","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"分布式日志采集（elk+kafka）","uid":"8da5616698516c85cde26f7cf0077841","slug":"csdn/分布式日志采集（elk+kafka）","date":"2021-03-24T15:15:22.000Z","updated":"2025-02-17T04:22:34.775Z","comments":true,"path":"api/articles/csdn/分布式日志采集（elk+kafka）.json","keywords":"Stephen web3","cover":[],"text":"目的 分布式系统的日志，每个服务器节点web服务都会产生各自的日志文件，如果想要整合或者排查日志，就需要到每个节点下逐一查看日志文件这样会比较麻烦。所以需要一个...","permalink":"/post/csdn/分布式日志采集（elk+kafka）","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"mq","slug":"mq","count":5,"path":"api/categories/mq.json"}],"tags":[{"name":"分布式 elk","slug":"分布式-elk","count":1,"path":"api/tags/分布式-elk.json"}],"author":{"name":"Stephen","slug":"blog-author","avatar":"../img/logo.png","link":"/","description":"Love and Share","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}