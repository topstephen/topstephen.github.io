{"title":"正整数分解质因数","uid":"d30ace39e1775eb881fa386d10463fa5","slug":"正整数分解质因数","date":"2018-04-13T05:48:00.000Z","updated":"2019-12-30T04:54:42.000Z","comments":true,"path":"api/articles/正整数分解质因数.json","keywords":"Stephen web3","cover":"https://stblogs.oss-cn-chengdu.aliyuncs.com/blog/bimg/248913-106.jpg","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h5 id=\"将一个正整数分解质因数。例如：输入90，打印出90-2-3-3-5\"><a href=\"#将一个正整数分解质因数。例如：输入90，打印出90-2-3-3-5\" class=\"headerlink\" title=\"将一个正整数分解质因数。例如：输入90，打印出90&#x3D;2*3*3*5\"></a>将一个正整数分解质因数。例如：输入90，打印出90&#x3D;2*3*3*5</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">    public class Solution &#123;\n        public static void main(String[] args) &#123;\n            Scanner sc &#x3D; new Scanner(System.in);\n            System.out.println(&quot;请输入要分解的正整数：&quot;);\n            int n &#x3D; sc.nextInt();\n            StringBuilder sb &#x3D; new StringBuilder();\n            sb.append(n + &quot;&#x3D;&quot;);\n            &#x2F;&#x2F;逻辑是：从2-n中找一个最小的且能被n整除的数k\n            &#x2F;&#x2F;如果找到了 就用 n&#x2F;k 的商作为新n  继续循环\n            &#x2F;&#x2F;如果n &#x3D;&#x3D; k 则说明是质数 或者商是质数 就循环结束直接输出\n            for (int i &#x3D; 2; i &lt; n + 1; i++) &#123;\n                while (n % i &#x3D;&#x3D; 0 &amp;&amp; n !&#x3D; i) &#123;\n                    n &#x3D; n &#x2F; i;\n                    sb.append(i + &quot;*&quot;);\n                &#125;\n    \n                if (n &#x3D;&#x3D; i) &#123;     &#x2F;&#x2F;如果上面的都不能整除说明是个质数\n                    sb.append(i);\n                    break;\n                &#125;\n            &#125;\n        System.out.println(sb.toString());\n    &#125;\n&#125;</code></pre>\n\n\n<p>Article link： <a href=\"https://tqgoblin.site/post/%E6%AD%A3%E6%95%B4%E6%95%B0%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0/\">https://tqgoblin.site/post/正整数分解质因数/</a> <div align=left> Author：<a href=\"https://www.tqgoblin.site\"> Stephen </a> </div></p>\n","text":"将一个正整数分解质因数。例如：输入90，打印出90=2*3*3*5 public class Solution { public static void mai...","permalink":"/post/正整数分解质因数","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":2,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":2,"path":"api/tags/算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%B0%86%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B4%E6%95%B0%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0%E3%80%82%E4%BE%8B%E5%A6%82%EF%BC%9A%E8%BE%93%E5%85%A590%EF%BC%8C%E6%89%93%E5%8D%B0%E5%87%BA90-2-3-3-5\"><span class=\"toc-text\">将一个正整数分解质因数。例如：输入90，打印出90&#x3D;2*3*3*5</span></a></li></ol>","author":{"name":"Stephen","slug":"blog-author","avatar":"../img/logo.png","link":"/","description":"Love and Share","socials":{"github":"http://github.com/topstephen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"基于freemaker 逆向工程","uid":"296290365ed946b345a31171d65dd645","slug":"codegenerator","date":"2018-08-12T02:48:00.000Z","updated":"2019-12-30T04:54:42.000Z","comments":true,"path":"api/articles/codegenerator.json","keywords":"Stephen web3","cover":"https://stblogs.oss-cn-chengdu.aliyuncs.com/UTOOLS1577681541276.jpg","text":" public class MysqlUtil { static { try { Class.forName(\"com.mysql.jdbc.Driver\");...","permalink":"/post/codegenerator","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"软件","slug":"软件","count":2,"path":"api/categories/软件.json"}],"tags":[{"name":"软件","slug":"软件","count":2,"path":"api/tags/软件.json"}],"author":{"name":"Stephen","slug":"blog-author","avatar":"../img/logo.png","link":"/","description":"Love and Share","socials":{"github":"http://github.com/topstephen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Hannuota","uid":"ef5a4863e88e0b505e528fa60d638cfe","slug":"Hannuota","date":"2018-04-10T02:09:00.000Z","updated":"2019-12-30T04:56:08.000Z","comments":true,"path":"api/articles/Hannuota.json","keywords":"Stephen web3","cover":"https://stblogs.oss-cn-chengdu.aliyuncs.com/blog/bimg/248904-106.jpg","text":"Java 实现 汉诺塔解法汉诺塔：汉诺塔问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片...","permalink":"/post/Hannuota","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":2,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":2,"path":"api/tags/算法.json"}],"author":{"name":"Stephen","slug":"blog-author","avatar":"../img/logo.png","link":"/","description":"Love and Share","socials":{"github":"http://github.com/topstephen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}